<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>controllo di versione on Nicola Iarocci</title>
    <link>https://nicolaiarocci.com/tags/controllo-di-versione/</link>
    <description>Recent content in controllo di versione on Nicola Iarocci</description>
    <generator>Hugo -- 0.121.1</generator>
    <language>en</language>
    <copyright>Produced / Written / Maintained by Nicola Iarocci since 2010</copyright>
    <lastBuildDate>Fri, 09 Dec 2011 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://nicolaiarocci.com/tags/controllo-di-versione/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Branching di successo per Git</title>
      <link>https://nicolaiarocci.com/branching-di-successo-per-git/</link>
      <pubDate>Fri, 09 Dec 2011 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/branching-di-successo-per-git/</guid>
      <description>&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Git&lt;!-- raw HTML omitted --&gt; è di gran lunga la tecnologia più significativa che il mio team ha introdotto negli ultimi tempi. Grazie a Git la nostra produttività è migliorata a tal punto che davvero non passa giorno senza che mi chieda come abbiamo potuto farne a meno così a lungo.&lt;/p&gt;
&lt;p&gt;Git è un &lt;!-- raw HTML omitted --&gt;sistema di controllo versione&lt;!-- raw HTML omitted --&gt; ideato da Linus Torvald (quello di Linux). E’ gratuito, multi-piattaforma, distribuito e soprattutto talmente veloce che sembra aggiungere un pizzico di magia al processo produttivo. Git è una macchina del tempo con cui spostarsi avanti e indietro tra le versioni del codice. E’ l’ideale sia per progetti individuali che per gruppi di lavoro numerosi e distribuiti. L’integrità del codice e la preservazione delle versioni sono garantite da un efficiente – e veloce! – sistema di &lt;em&gt;branching&lt;/em&gt; e &lt;em&gt;merging&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Se non avete mai usato prima un sistema di controllo versione (e magari ricorrete ancora a copie manuali del codice tra una release e l’altra) gioite, perché Git vi cambierà la vita. Se venite da altri sistemi (Subversion, Team Foundation Server) sappiate che Git adotta un approccio fondamentalmente diverso: niente copie differenziali. In Git ogni repository è un mirror integrale della codebase; è quest’accorgimento ciò che rende Git così veloce.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><!-- raw HTML omitted -->Git<!-- raw HTML omitted --> è di gran lunga la tecnologia più significativa che il mio team ha introdotto negli ultimi tempi. Grazie a Git la nostra produttività è migliorata a tal punto che davvero non passa giorno senza che mi chieda come abbiamo potuto farne a meno così a lungo.</p>
<p>Git è un <!-- raw HTML omitted -->sistema di controllo versione<!-- raw HTML omitted --> ideato da Linus Torvald (quello di Linux). E’ gratuito, multi-piattaforma, distribuito e soprattutto talmente veloce che sembra aggiungere un pizzico di magia al processo produttivo. Git è una macchina del tempo con cui spostarsi avanti e indietro tra le versioni del codice. E’ l’ideale sia per progetti individuali che per gruppi di lavoro numerosi e distribuiti. L’integrità del codice e la preservazione delle versioni sono garantite da un efficiente – e veloce! – sistema di <em>branching</em> e <em>merging</em>.</p>
<p>Se non avete mai usato prima un sistema di controllo versione (e magari ricorrete ancora a copie manuali del codice tra una release e l’altra) gioite, perché Git vi cambierà la vita. Se venite da altri sistemi (Subversion, Team Foundation Server) sappiate che Git adotta un approccio fondamentalmente diverso: niente copie differenziali. In Git ogni repository è un mirror integrale della codebase; è quest’accorgimento ciò che rende Git così veloce.</p>
<h2 id="come-e-dove-imparare-git">Come e dove imparare Git</h2>
<p>Git non è difficile, ma richiede un pò d’impegno iniziale. In rete sono disponibili numerose e ottime fonti. Vi consiglio <!-- raw HTML omitted -->Git Pro<!-- raw HTML omitted -->, libro gratuito nella versione online. Stampatelo e tenetelo sempre a portata di mano. Ottimi anche <!-- raw HTML omitted -->Git Reference<!-- raw HTML omitted --> e <!-- raw HTML omitted -->Everyday GIT<!-- raw HTML omitted --> (consigliati dal sito ufficiale), <!-- raw HTML omitted -->Git Magic<!-- raw HTML omitted --> per quando avrete già un pò di dimestichezza con Git, e infine la valida raccolta che trovate su <!-- raw HTML omitted -->Stack Overflow<!-- raw HTML omitted -->.</p>
<h2 id="la-potenza-è-nulla-senza-controllo">La potenza è nulla senza controllo</h2>
<p>Uno dei risultati più interessanti che abbiamo ottenuto grazie all’adozione di Git è la pubblicazione contemporanea di più versioni del nostro <!-- raw HTML omitted -->software gestionale<!-- raw HTML omitted -->. C’è quella ufficiale (stabile) e c’é quella <em>sperimentale</em> con una anteprima delle novità a cui stiamo ancora lavorando. E’ un pò la nostra _<!-- raw HTML omitted -->night build<!-- raw HTML omitted --> e _contiene le cose non ancora mature per affrontare il grande pubblico ma già interessanti per gli utenti più smaliziati. Nel frattempo lavoriamo anche a nuove funzionalità importanti. Queste ultime vedranno la luce solo in occasione dei rilasci più significativi (tipicamente non sono più di due o tre all’anno) e non sono incluse nelle night build. In tutto questo <em>bailamme</em> di versioni, hotfix e rilasci pubblici e interni non perdiamo una linea di codice e manteniamo i nostri repository allineati, muovendoci avanti e indietro quando necessario.</p>
<p>Per ottenere un risultato così non basta il sistema di controllo versione; è necessaria anche una ottima strategia o, per meglio dire, un modello di branching ben progettato. Dopo diversi tentativi andati più o meno a vuoto la soluzione è arrivata grazie alla scoperta dello spettacolare articolo di <!-- raw HTML omitted -->Vincent Driessen<!-- raw HTML omitted -->:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Il modello si basa su due branch principali (master e develop) e su tre di supporto (hotfix, feature e release). Lo considero talmente valido che mi sono proposto a Vincent come curatore della traduzione italiana, solo per scoprire che qualcuno prima di me <!-- raw HTML omitted -->ci aveva già pensato<!-- raw HTML omitted -->: meglio così. Da quando l’ho scoperto lo applichiamo con zelo e vi consiglio di fare altrettanto, soprattutto se lavorate su progetti complessi.</p>
<h2 id="non-solo-codice">Non solo codice</h2>
<p>Git è utile anche per i piccoli progetti personali. Anzi, se state cominciando vi consiglio di partire proprio da uno di questi. Non è necessario che sia un programma, potrebbe benissimo trattarsi di un file di testo qualunque. Git funziona con qualunque tipo di file e in effetti viene usato con successo per progetti di scrittura, documentazione, web design e quant’altro.</p>
<p>Una volta presa dimestichezza con Git non potrete più rinunciarvi, qualunque sia la portata del progetto a cui state lavorando.</p>]]></content:encoded>
    </item>
  </channel>
</rss>
