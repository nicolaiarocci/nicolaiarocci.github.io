<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linguaggi on Nicola Iarocci</title>
    <link>https://nicolaiarocci.com/tags/linguaggi/</link>
    <description>Recent content in linguaggi on Nicola Iarocci</description>
    <image>
      <title>Nicola Iarocci</title>
      <url>https://nicolaiarocci.com/images/avatar.png</url>
      <link>https://nicolaiarocci.com/images/avatar.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Produced / Written / Maintained by [Nicola Iarocci](/) since 2010</copyright>
    <lastBuildDate>Sun, 04 Mar 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://nicolaiarocci.com/tags/linguaggi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Link Consigliati dal 29.2 al 5.3.2012</title>
      <link>https://nicolaiarocci.com/link-consigliati-dal-29-2-al-5-3-2012/</link>
      <pubDate>Sun, 04 Mar 2012 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/link-consigliati-dal-29-2-al-5-3-2012/</guid>
      <description>&lt;p&gt;&lt;em&gt;Ogni giorno su &lt;!-- raw HTML omitted --&gt;Twitter&lt;!-- raw HTML omitted --&gt; segnalo i link interessanti in cui incappo mentre mi documento per il mio lavoro. Riscuotono un certo successo, quindi ho pensato di condividerne alcuni anche qui sul sito. Parte così Link Consigliati, rubrica settimanale e sperimentale.&lt;/em&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;“Why are so many developers so very emotional when it comes to their favourite programming language? Considering that no language can (yet) magically translate the perfect idea in your head into machine code, all of them exist on a scale of badness – they all limit you more than your own thoughts or the hardware does.”&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;“Clean, simple web designs have become a popular trend. This article will cover the subject through a two-part discussion. First, we’ll talk about a few traits that clean designs tend to have in common. Secondly, I’ll share some tricks and techniques that can be helpful when trying to achieve a clean design.”&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Database of HTTP status codes with their IETF and Wikipedia descriptions&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;“What happens when you click on a weblink? Here’s one answer: a request goes from your computer to a server identified by the URL of the desired link. The server then locates the webpage in its files and sends it back to your browser, which then displays it on your screen. Simple.”&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em>Ogni giorno su <!-- raw HTML omitted -->Twitter<!-- raw HTML omitted --> segnalo i link interessanti in cui incappo mentre mi documento per il mio lavoro. Riscuotono un certo successo, quindi ho pensato di condividerne alcuni anche qui sul sito. Parte così Link Consigliati, rubrica settimanale e sperimentale.</em></p>
<!-- raw HTML omitted -->
<p>“Why are so many developers so very emotional when it comes to their favourite programming language? Considering that no language can (yet) magically translate the perfect idea in your head into machine code, all of them exist on a scale of badness – they all limit you more than your own thoughts or the hardware does.”</p>
<!-- raw HTML omitted -->
<p>“Clean, simple web designs have become a popular trend. This article will cover the subject through a two-part discussion. First, we’ll talk about a few traits that clean designs tend to have in common. Secondly, I’ll share some tricks and techniques that can be helpful when trying to achieve a clean design.”</p>
<!-- raw HTML omitted -->
<p>Database of HTTP status codes with their IETF and Wikipedia descriptions</p>
<!-- raw HTML omitted -->
<p>“What happens when you click on a weblink? Here’s one answer: a request goes from your computer to a server identified by the URL of the desired link. The server then locates the webpage in its files and sends it back to your browser, which then displays it on your screen. Simple.”</p>
<!-- raw HTML omitted -->
<p>“We occasionally try commercial software. Mostly, we don’t end up buying it. A big reason why is the incredibly time-consuming, aggravating sales process that most commercial enterprise (that is, non-consumer) software vendors insist on.”</p>
<!-- raw HTML omitted -->
<p>“My experience of learning how to write iOS software, after having spent many years exclusively in the world of .NET development. It provides warnings, suggestions, and tips for others who are interested in learning iOS development.”</p>
<!-- raw HTML omitted -->
<p>“If you write any code in JavaScript then you’ve probably used closures, but do you actually understand what they are and how they work? Taking the time to understand closures and how they’re implemented can add a deeper dimension to your understanding of the JavaScript language.”</p>
<!-- raw HTML omitted -->
<p>“In desktop applications, the user interface dominated the screen. The buttons to click, the bars to drag, the windows. That isn’t the case with mobile devices. What’s powerful about mobile devices is that they exist to complement what we are already doing, rather than be our primary focus.”</p>
<!-- raw HTML omitted -->
<p>“At Stack Overflow (…) we feel that it’s part of our mission to help lead fellow .NET developers — and the most effective way to do that is by contributing some of the code that we use to build Stack Overflow and Stack Exchange back to the greater .NET developer community as reusable open source packages.”</p>
<!-- raw HTML omitted -->
<p>“We’ve made a selection of indispensable resources like layout frameworks, tutorials, books, templates and useful tools that can help you understand and implement grid based design in your projects.”</p>]]></content:encoded>
    </item>
    <item>
      <title>Sui Vantaggi del Programmatore Poliglotta</title>
      <link>https://nicolaiarocci.com/sui-vantaggi-del-programmatore-poliglotta/</link>
      <pubDate>Wed, 21 Sep 2011 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/sui-vantaggi-del-programmatore-poliglotta/</guid>
      <description>&lt;p&gt;Per gran parte della mia carriera sono stato un programmatore client/server specializzato nel .NET Framework e in tutto quel gira intorno all’ecosistema Microsoft. Un paio di anni fa ho deciso di uscire dalla mia &lt;em&gt;&lt;!-- raw HTML omitted --&gt;comfort zone&lt;!-- raw HTML omitted --&gt;&lt;/em&gt; professionale, guardarmi attorno e, per citare &lt;a href=&#34;http://www.youtube.com/watch?v=Ex2fpsz-hQI&#34; title=&#34;Quanto è profonda la tana del Bianconiglio?&#34;&gt;qualcun’altro&lt;/a&gt;, andare a vedere &lt;em&gt;quanto è profonda la tana del Bianconiglio&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Tempo libero a disposizione non ce n’era. A quarant’anni tra lavoro, famiglia e attività agonistica mi rimaneva solo la via del furto: rubare ore al sonno per dedicarmi allo studio di nuovi linguaggi e piattaforme. Prima è stato il turno di JavaScript, poi di Python, Django, Ruby e infine Node e MongoDB. Ora mi considero un programmatore poliglotta, capace di scrivere codice in una moltitudine di linguaggi.&lt;/p&gt;
&lt;p&gt;Eppure in passato sono sempre stato convinto che fosse più produttivo concentrarsi su una sola piattaforma per conoscerla fino in fondo e sfruttarne al meglio le possibilità. Sulle ragioni che mi hanno indotto a prendere quella decisione potrei scrivere una decina di articoli, e magari lo farò prima o poi, ma quel che desidero condividere oggi sono le lezioni che questa esperienza mi ha insegnato.&lt;/p&gt;
&lt;p&gt;A dire il vero ci ho già provato una volta, buttando giù appunti e abbozzando un articolo poi miseramente abbandonato. Per fortuna qualche giorno fa sono incappato in &lt;!-- raw HTML omitted --&gt;Advantages of Being a Polyglot Programmer&lt;!-- raw HTML omitted --&gt;, stupefacente articolo di Davy Brion. Il suo è &lt;em&gt;precisamente&lt;/em&gt; il pezzo che io non riuscivo a scrivere, parola per parola. Davy elenca quelli che secondo lui sono i cinque principali vantaggi del programmatore poliglotta. Io ne aggiungo uno e ve li propongo – fate conto che sia io a parlare attraverso lui, o viceversa.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Per gran parte della mia carriera sono stato un programmatore client/server specializzato nel .NET Framework e in tutto quel gira intorno all’ecosistema Microsoft. Un paio di anni fa ho deciso di uscire dalla mia <em><!-- raw HTML omitted -->comfort zone<!-- raw HTML omitted --></em> professionale, guardarmi attorno e, per citare <a href="http://www.youtube.com/watch?v=Ex2fpsz-hQI" title="Quanto è profonda la tana del Bianconiglio?">qualcun’altro</a>, andare a vedere <em>quanto è profonda la tana del Bianconiglio</em>.</p>
<p>Tempo libero a disposizione non ce n’era. A quarant’anni tra lavoro, famiglia e attività agonistica mi rimaneva solo la via del furto: rubare ore al sonno per dedicarmi allo studio di nuovi linguaggi e piattaforme. Prima è stato il turno di JavaScript, poi di Python, Django, Ruby e infine Node e MongoDB. Ora mi considero un programmatore poliglotta, capace di scrivere codice in una moltitudine di linguaggi.</p>
<p>Eppure in passato sono sempre stato convinto che fosse più produttivo concentrarsi su una sola piattaforma per conoscerla fino in fondo e sfruttarne al meglio le possibilità. Sulle ragioni che mi hanno indotto a prendere quella decisione potrei scrivere una decina di articoli, e magari lo farò prima o poi, ma quel che desidero condividere oggi sono le lezioni che questa esperienza mi ha insegnato.</p>
<p>A dire il vero ci ho già provato una volta, buttando giù appunti e abbozzando un articolo poi miseramente abbandonato. Per fortuna qualche giorno fa sono incappato in <!-- raw HTML omitted -->Advantages of Being a Polyglot Programmer<!-- raw HTML omitted -->, stupefacente articolo di Davy Brion. Il suo è <em>precisamente</em> il pezzo che io non riuscivo a scrivere, parola per parola. Davy elenca quelli che secondo lui sono i cinque principali vantaggi del programmatore poliglotta. Io ne aggiungo uno e ve li propongo – fate conto che sia io a parlare attraverso lui, o viceversa.</p>
<!-- raw HTML omitted -->
<h2 id="quali-sono-i-vantaggi-del-programmatore-poliglotta">Quali sono i vantaggi del programmatore poliglotta?</h2>
<h3 id="espandere-i-propri-orizzonti">Espandere i propri orizzonti</h3>
<p>Nell’imparare un nuovo linguaggio c’è molto più che apprenderne la sintassi. Si scoprono nuove tecniche, nuove librerie e nuovi modi di affrontare e risolvere i problemi. Assorbiamo una conoscenza già diffusa nella comunità che si è raccolta attorno al linguaggio, e tuttavia nuova per noi. A seconda del nostro background può capitare di imparare tanto, oppure solo qualcosa qui e là. Se già conosciamo un linguaggio dinamico a oggetti, per esempio, impararne uno nuovo non aggiungerà granché al nostro bagaglio. Se al contrario conosciamo solo linguaggi statici, scoprirne uno dinamico sarà un’esperienza davvero arricchente. E’ proprio questa miscela di paradigmi e conoscenze nuove, grandi e piccole, che influenzerà in modo determinante il nostro modo di risolvere i problemi in futuro.</p>
<h3 id="imparare-più-facilmente">imparare più facilmente</h3>
<p>La pratica rende perfetti. Dedicarsi con costanza all’apprendimento rende più semplice l’atto stesso di apprendere. Tanti hanno difficoltà ad accettare novità che sembrano in conflitto con quel che conoscono. Studiare un linguaggio che si basa su nuovi paradigmi (pensate alla <!-- raw HTML omitted -->programmazione funzionale<!-- raw HTML omitted -->) è difficoltoso perché ci costringe a ragionare al di fuori di strutture e regole che ci sono familiari. La seconda volta sarà già più facile, perché l’esperienza precedente ci avrà insegnato a non lasciarci condizionare da ciò che sappiamo. La terza volta sarà ancora più semplice, e così via. Tutti noi impariamo a imparare imparando.</p>
<h3 id="rinnovare-la-passione-per-la-programmazione">rinnovare la passione per la programmazione</h3>
<p>Quando ero programmatore C# / VB.NET mi capitava ogni tanto di non divertirmi più. In quei momenti scrivere codice era solo lavoro, non più gioia e tanto meno passione. Quei periodi potevano durare un paio di settimane, a volte un mese o due. Da quando mi sono dedicato a nuovi linguaggi non mi è più capitato di annoiarmi. Imparare di continuo cose nuove rende tutto più interessante, divertente e senz’altro impegnativo.</p>
<h3 id="ridurre-la-dipendenza-dagli-strumenti-quotidiani-e-introdurne-di-nuovi">RIDurre la dipendenza dagli strumenti quotidiani e introdurne di nuovi</h3>
<p>Fino a due anni fa non prendevo nemmeno in considerazione l’idea di scrivere codice senza usare qualche tipo di IDE. Ero dipendente da Visual Studio: IntelliSense, completamento automatico, navigazione, debugger integrato… tutte <em>feature</em> alle quali non credevo di poter rinunciare. Oggi preferisco scrivere codice in un semplice text editor per programmatori (nel mio caso <a href="http://nicolaiarocci.com/sublimetext-2-un-sofisticato-text-editor-per-codice-html-e-prosa/" title="Sublime Text 2">Sublime Text 2</a>), con una finestra terminale in cui lanciare i miei test. Fare a meno del debugger non solo è possibile, ma addirittura proficuo. Si procede a piccoli passi, facendo spesso test focalizzati che permettono di isolare e risolvere rapidamente i bug. Per motivi di lavoro ancora oggi uso e apprezzo Visual Studio ogni giorno, ma preferisco senz’altro lavorare in maniera spartana: text editor e terminale sono tutto quello che mi serve.</p>
<p>Lavorare così comporta una conseguenza importante. Si rende necessario (ri)diventare provetti nell’uso della finestra terminale, della linea di comando e, in alcune occasioni, addirittura di sistemi operativi diversi. Per imparare Ruby o Node spesso è meglio installare una distribuzione Linux (o lavorare su OS X se avete un Mac) piuttosto che tentare di far girare il tutto sotto Windows. In ogni caso conoscere la shell e i tool *NIX, specialmente di questi tempi, aggiungerà una freccia potente al nostro arco.</p>
<h3 id="ridurre-il-legame-col-linguaggio-prediletto">ridurre il legame col linguaggio prediletto</h3>
<p>Coloro che lavorano esclusivamente con una piattaforma tendono a sviluppare con essa un vero e proprio legame emotivo. Lo so per certo perché è capitato anche a me (e diverse volte) nel corso degli anni. Se siamo legati emotivamente a un linguaggio ci diventa difficile rimanere equilibrati nel corso di una discussione, o restare calmi se percepiamo che il nostro prediletto è sotto minaccia (pensiamo a quel che sta succedendo a Silverlight proprio <a href="http://nicolaiarocci.com/windows-8-e-i-dubbi-sul-destino-di-silverlight/" title="Windows 8 e il destino di Silverlight">in queste ore</a>). Praticando più linguaggi e piattaforme scopriamo che le nostre conoscenze e capacità sono trasferibili; che siamo programmatori a prescindere dagli strumenti che utilizziamo. Qualunque sia il destino della nostra piattaforma prediletta, noi non abbiamo nulla da temere.</p>
<h3 id="migliorare-e-ampliare-il-network-professionale">migliorare e ampliare il network professionale</h3>
<p>Studiare nuovi linguaggi e nuove piattaforme mi ha portato a conoscere molta più gente in due anni di quanta non ne abbia conosciuta nei venti precedenti. Quando si lavora a lungo nello stesso ambiente con gli stessi strumenti arriva il momento in cui non si ha (o non si sente) più bisogno di confrontarsi, informarsi e… imparare. Si acquisisce l’esperienza sufficiente a portare a casa il risultato, qualunque esso sia. Le stesse comunità di sviluppatori, per quanto ampie, tendono a chiudersi e diventare presto auto referenziali: stesse persone, stessi contributi, stesse domande e risposte. Aprirsi a comunità diverse illuminando la propria mente con idee che provengono dalle fonti più disparate è una esperienza esaltante. Soprattutto dopo anni di programmazione a testa bassa.</p>
<p><em>Una riduzione di questo articolo è stata oggetto di un mio Ignite (relazione lampo in cinque minuti) presentato il 8.10.2011 al KnowCamp 2011. Le slides e il video sono <a href="http://nicolaiarocci.com/il-mio-intervento-al-knowcamp-2011-fuga-dalla-comfort-zone/" title="Il mio intervento al KnowCamp 2011">disponibili online</a>.</em></p>]]></content:encoded>
    </item>
  </channel>
</rss>
