<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Nicola Iarocci</title>
    <link>https://nicolaiarocci.com/tags/linux/</link>
    <description>Recent content in linux on Nicola Iarocci</description>
    <image>
      <title>Nicola Iarocci</title>
      <url>https://nicolaiarocci.com/images/avatar.png</url>
      <link>https://nicolaiarocci.com/images/avatar.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Produced / Written / Maintained by [Nicola Iarocci](/) since 2010</copyright>
    <lastBuildDate>Wed, 23 Aug 2023 07:05:25 +0100</lastBuildDate>
    <atom:link href="https://nicolaiarocci.com/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>rsync with a different user</title>
      <link>https://nicolaiarocci.com/rsync-with-a-different-user/</link>
      <pubDate>Wed, 23 Aug 2023 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/rsync-with-a-different-user/</guid>
      <description>Today I learned how to rsync with a user different than the one connected to the remote. Why would one want to do such a thing? The data I need to download from that server is owned by &amp;lsquo;backup,&amp;rsquo; a different, service-only user. I wanted to avoid going the change-permissions slippery route and allow my user direct access to the data.
Looking at the rsync documentation, I learned about the nifty --rsync-path=PROGRAM [option][1]:</description>
      <content:encoded><![CDATA[<p>Today I learned how to rsync with a user different than the one connected to the remote. Why would one want to do such a
thing? The data I need to download from that server is owned by &lsquo;backup,&rsquo; a different, service-only user. I wanted to
avoid going the change-permissions slippery route and allow my user direct access to the data.</p>
<p>Looking at the rsync documentation, I learned about the nifty <code>--rsync-path=PROGRAM</code> [option][1]:</p>
<blockquote>
<p>Use this to specify what program is to be run on the remote machine to start-up rsync. Often used when rsync is not in
the default remote-shell&rsquo;s path (e.g. &ndash;rsync-path=/usr/local/bin/rsync).</p>
</blockquote>
<p>The example caught my attention. I could perhaps leverage this option to perform a user switch before executing rsync
(now performed on the remote machine). As further research confirmed, it [can be done][2]:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>rsync --rsync-path &#39;sudo -u backup rsync&#39; -a --delete host:source destination
</span></span></code></pre></div><p>It didn&rsquo;t work immediately because my user was not a sudoer, but that was an easy fix:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>cat &gt; /etc/sudoers.d/myuser &lt;&lt; EOF
</span></span><span style="display:flex;"><span>myuser ALL=(ALL) NOPASSWD:/usr/bin/rsync
</span></span><span style="display:flex;"><span>EOF
</span></span></code></pre></div><p>As you can see, not only must the user be a sudoer, but it also needs to be able to sudo with no password. One last
minor issue was that &lsquo;backup&rsquo;, being a service user, had no shell access. That was another easy fix:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo usermod -s /bin/bash backup
</span></span></code></pre></div><p>Now my rsync-with-a-different-user command works like a charm. I do have some mild security concerns, though. My user is
a sudoer (can only sudo rsync, though[^3]), and &lsquo;backup&rsquo; now has shell access. As password logins are turned off, and
SSH keys-only access is allowed to the machine (and I&rsquo;m the only person holding those keys), everything&rsquo;s still
reasonably safe. Are there better ways? Please let me know.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Troubles with VirtualBox and the Windows Subsystem for Linux</title>
      <link>https://nicolaiarocci.com/troubles-with-virtualbox-and-the-windows-subsystem-for-linux/</link>
      <pubDate>Sun, 14 Feb 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/troubles-with-virtualbox-and-the-windows-subsystem-for-linux/</guid>
      <description>Today I learned the hard way: don&amp;rsquo;t you dare running a vanilla install of VirtualBox together with Windows Subsystem for Linux v2 (WSL2). It won&amp;rsquo;t work. That&amp;rsquo;s because WSL2 uses Hyper-V under the hood, which is incompatible with VirtualBox.
According to the [official documentation][1] for VirtualBox v6.0:
Oracle VM VirtualBox can be used on a Windows host where Hyper-V is running. This is an experimental feature. No configuration is required. Oracle VM VirtualBox detects Hyper-V automatically and uses Hyper-V as the virtualization engine for the host system.</description>
      <content:encoded><![CDATA[<p>Today I learned the hard way: don&rsquo;t you dare running a vanilla install of
VirtualBox together with Windows Subsystem for Linux v2 (WSL2). It won&rsquo;t work.
That&rsquo;s because WSL2 uses Hyper-V under the hood, which is incompatible with
VirtualBox.</p>
<p>According to the [official documentation][1] for VirtualBox v6.0:</p>
<blockquote>
<p>Oracle VM VirtualBox can be used on a Windows host where Hyper-V is running.
<strong>This is an experimental feature</strong>. No configuration is required. Oracle VM
VirtualBox detects Hyper-V automatically and uses Hyper-V as the
virtualization engine for the host system.</p>
</blockquote>
<p>Well, that did not prove to be true in my case. Hence the experimental clause,
I guess. A little googling revealed that, indeed, it did work for a while, then
a new Windows 10 release broke it again:</p>
<blockquote>
<p>The Hyper-V API became a viable reality with 1803, practically with 1809. And
it went fine with 1903. And it broke with 1909. Please use your favorite
search engine for &ldquo;Immature API&rdquo;&hellip; (<a href="https://forums.virtualbox.org/viewtopic.php?f=6&amp;t=90853&amp;start=195#p465333">source</a>)</p>
</blockquote>
<p>Even if it did work, however, you&rsquo;d run into some (possibly) severe
performance degradation. Quoting from the same official documentation page:</p>
<blockquote>
<p>When using this feature, some host systems might experience significant
Oracle VM VirtualBox performance degradation.</p>
</blockquote>
<p>If you don&rsquo;t need to run WSL2 and your VMs simultaneously, one workaround is to
disable WSL2 in the Windows Features.  There, you have to disable Hyper-V,
Virtual Machine Platform, and Windows Subsystem for Windows. Yes, I had to
explicitly disable all three of them. When you eventually reactivate them, WSL2
will start working again, configurations included.</p>
<p>Another option is to fallback to WSL1. That will work. Unlike WSL2, WSL1 does
not run in a VM. Also, converting back and forth between WSL1 and WLS2 is dead
simple. I did not go this route because, well, I like the performance that
comes with WSL2. I also plan to use VirtualBox only rarely, when I need to test
new versions of our desktop application&rsquo;s installation procedure.</p>
<p>This is all not ideal, of course. The situation is evolving. [This ticket][2]
on the WSL documentation repository is probably the place to watch for updates.</p>
<p>Hopefully, soon, once the currently &ldquo;immature API&rdquo; stabilizes, I will be able
to come back to this article, edit it, and note that now everything works as
expected.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
