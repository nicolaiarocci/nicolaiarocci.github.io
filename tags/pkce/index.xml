<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Pkce on Nicola Iarocci</title>
    <link>https://nicolaiarocci.com/tags/pkce/</link>
    <description>Recent content in Pkce on Nicola Iarocci</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>en</language>
    <copyright>Produced / Written / Maintained by Nicola Iarocci since 2010</copyright>
    <lastBuildDate>Wed, 17 Jan 2024 18:28:14 +0100</lastBuildDate>
    <atom:link href="https://nicolaiarocci.com/tags/pkce/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to implement a PKCE code challenge in C#</title>
      <link>https://nicolaiarocci.com/how-to-implement-pkce-code-challenge-in-csharp/</link>
      <pubDate>Wed, 17 Jan 2024 18:28:14 +0100</pubDate>
      <guid>https://nicolaiarocci.com/how-to-implement-pkce-code-challenge-in-csharp/</guid>
      <description>&lt;p&gt;Today&amp;rsquo;s fun was implementing OAuth2&amp;rsquo;s &lt;a href=&#34;http://tools.ietf.org/html/rfc7636&#34;&gt;RFC
7636&lt;/a&gt;&amp;rsquo;s PKCE (Proof Key for Code Exchange)
in C#. It&amp;rsquo;s relatively straightforward, but I decided to share my implementation
should it be helpful to someone else out there.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PKCE  is an extension to the Authorization Code flow to prevent CSRF and
authorization code injection attacks. [..] It was originally designed to protect
the authorization code flow in mobile apps, but its ability to prevent
authorization code injection makes it useful for every type of OAuth client,
even web apps that use client authentication
(&lt;a href=&#34;https://oauth.net/2/pkce/&#34;&gt;source&lt;/a&gt;).&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Today&rsquo;s fun was implementing OAuth2&rsquo;s <a href="http://tools.ietf.org/html/rfc7636">RFC
7636</a>&rsquo;s PKCE (Proof Key for Code Exchange)
in C#. It&rsquo;s relatively straightforward, but I decided to share my implementation
should it be helpful to someone else out there.</p>
<blockquote>
<p>PKCE  is an extension to the Authorization Code flow to prevent CSRF and
authorization code injection attacks. [..] It was originally designed to protect
the authorization code flow in mobile apps, but its ability to prevent
authorization code injection makes it useful for every type of OAuth client,
even web apps that use client authentication
(<a href="https://oauth.net/2/pkce/">source</a>).</p></blockquote>
<p>In a nutshell:</p>
<ol>
<li>The client requests a single-use authorization code to an authorization server. In doing that, it includes a <code>code_challenge</code> with the request.</li>
<li>The server responds with the authorization code if the client is recognized and authorized.</li>
<li>The client requests an access token in exchange for the authorization code. It includes the <code>code_verifier</code> used to generate the original <code>code_challenge</code>;</li>
<li>The server confirms that the verifier is the same one used to generate the code challenge; hence, the client is the same.</li>
</ol>
<p>Plenty of excellent documentation is online (like
<a href="https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow-with-proof-key-for-code-exchange-pkce">here</a>.)</p>
<p>I was interested in <code>code_verifier</code> and <code>code_challenge</code> generation. Here&rsquo;s my implementation:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cs" data-lang="cs"><span style="display:flex;"><span><span style="font-style:italic">/// &lt;summary&gt;</span>
</span></span><span style="display:flex;"><span><span style="font-style:italic">/// Provides a randomly generating PKCE code verifier and it&#39;s corresponding code challenge.</span>
</span></span><span style="display:flex;"><span><span style="font-style:italic">/// &lt;/summary&gt;</span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">public</span> <span style="font-weight:bold">static</span> <span style="font-weight:bold">class</span> <span style="font-weight:bold">Pkce</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="font-style:italic">/// &lt;summary&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="font-style:italic">/// Generates a code_verifier and the corresponding code_challenge, as specified in the rfc-7636.</span>
</span></span><span style="display:flex;"><span>    <span style="font-style:italic">/// &lt;/summary&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="font-style:italic">/// &lt;remarks&gt;See https://datatracker.ietf.org/doc/html/rfc7636#section-4.1 and https://datatracker.ietf.org/doc/html/rfc7636#section-4.2&lt;/remarks&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="font-weight:bold">public</span> <span style="font-weight:bold">static</span> (<span style="">string</span> code_challenge, <span style="">string</span> verifier) Generate(<span style="">int</span> size = 32)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="font-weight:bold">using</span> <span style="font-weight:bold">var</span> rng = RandomNumberGenerator.Create();
</span></span><span style="display:flex;"><span>        <span style="">var</span> randomBytes = <span style="font-weight:bold">new</span> <span style="">byte</span>[size];
</span></span><span style="display:flex;"><span>        rng.GetBytes(randomBytes);
</span></span><span style="display:flex;"><span>        <span style="">var</span> verifier = Base64UrlEncode(randomBytes);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="">var</span> buffer = Encoding.UTF8.GetBytes(verifier);
</span></span><span style="display:flex;"><span>        <span style="">var</span> hash = SHA256.Create().ComputeHash(buffer);
</span></span><span style="display:flex;"><span>        <span style="">var</span> challenge = Base64UrlEncode(hash);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="font-weight:bold">return</span> (challenge, verifier);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="font-weight:bold">private</span> <span style="font-weight:bold">static</span> <span style="">string</span> Base64UrlEncode(<span style="">byte</span>[] data) =&gt;
</span></span><span style="display:flex;"><span>        Convert.ToBase64String(data)
</span></span><span style="display:flex;"><span>            .Replace(<span style="font-style:italic">&#34;+&#34;</span>, <span style="font-style:italic">&#34;-&#34;</span>)
</span></span><span style="display:flex;"><span>            .Replace(<span style="font-style:italic">&#34;/&#34;</span>, <span style="font-style:italic">&#34;_&#34;</span>)
</span></span><span style="display:flex;"><span>            .TrimEnd(<span style="font-style:italic">&#39;=&#39;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Usage is as simple as:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cs" data-lang="cs"><span style="display:flex;"><span><span style="">var</span> (challenge, verifier) = Pkce.Generate();
</span></span></code></pre></div><p>In ASP.NET Core you don&rsquo;t usually need to mess with PKCE as the framework
supports it very transparently, but the project I&rsquo;m working on right now is bare
and to the bones, with no ASP.NET Core in sight, so I had to bring my own
implementation. Fun stuff.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
