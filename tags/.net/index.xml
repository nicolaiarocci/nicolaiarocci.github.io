<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.net on Nicola Iarocci</title>
    <link>https://nicolaiarocci.com/tags/.net/</link>
    <description>Recent content in .net on Nicola Iarocci</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Produced / Written / Maintained by [Nicola Iarocci](/) since 2010</copyright>
    <lastBuildDate>Fri, 26 Feb 2021 07:05:25 +0100</lastBuildDate>
    <atom:link href="https://nicolaiarocci.com/tags/.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to increase upload file size in ASP.NET Core</title>
      <link>https://nicolaiarocci.com/how-to-increase-upload-file-size-in-asp.net-core/</link>
      <pubDate>Fri, 26 Feb 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/how-to-increase-upload-file-size-in-asp.net-core/</guid>
      <description>Today I learned the hard way that since ASP.NET Core 2.0, the request body has acquired a default size limit at 30MB (~28.6 MiB).
If the request body size exceeds the configured max request body size limit, the call to Request.Body.ReadAsync will throw an IOException. If this exception is uncaught, Kestrel will respond with a 413 Payload Too Large response and HttpSys will respond with a generic 500 Internal Server Error response ([source][1]).</description>
      <content:encoded><![CDATA[<p>Today I learned the hard way that since ASP.NET Core 2.0, the request body has
acquired a default size limit at 30MB (~28.6 MiB).</p>
<blockquote>
<p>If the request body size exceeds the configured max request body size limit,
the call to Request.Body.ReadAsync will throw an IOException. If this
exception is uncaught, Kestrel will respond with a 413 Payload Too Large
response and HttpSys will respond with a generic 500 Internal Server Error
response ([source][1]).</p>
</blockquote>
<p>This will be a breaking change if your endpoint is expected to handle large
uploads. The solution is simple, just decorate your MVC action or controller
with the <code>RequestSizeLimit</code> attribute, like so:</p>
<pre tabindex="0"><code>    [HttpPost]
    [RequestSizeLimit(100_000_000)]
    public IActionResult MyAction([FromBody] MyViewModel data)
    {
</code></pre><p><code>DisableRequestSizeLimit</code> can be used to make request size unlimited. This
effectively restores pre-2.0.0 behavior for just the attributed action or
controller. You can also change or disable the limit programmatically, either
on a per-request basis or globally (see the instructions at this [link][1].)</p>
<p>In my case, however, disabling the request limit was not enough. Because my
endpoint is expecting an <code>IFormFile</code> argument, I also had to set the
<code>RequestFormLimits</code> attribute:</p>
<pre tabindex="0"><code>    [HttpPost]
    [DisableRequestSizeLimit,
    RequestFormLimits(MultipartBodyLengthLimit = int.MaxValue, 
        ValueLengthLimit = int.MaxValue)]
    public async Task&lt;ActionResult&gt; BulkAdd(string schema, IFormFile file)
    {
</code></pre><p>Please note that all of this happened on a .NET 5 Linux application with
Kestrel running behind nginx. As pointed out at the link above, if you&rsquo;re
running behind IIS, then the limit is disabled, and the usual <em>web.config</em>
limit applies.</p>
<p>For future reference, [here][2] are the current Kestrel limits.</p>
]]></content:encoded>
    </item>
    <item>
      <title>How to convert a PCL (Portable) project to NetStandard</title>
      <link>https://nicolaiarocci.com/how-to-convert-a-pcl-portable-project-to-netstandard/</link>
      <pubDate>Wed, 10 May 2017 09:47:05 +0200</pubDate>
      <guid>https://nicolaiarocci.com/how-to-convert-a-pcl-portable-project-to-netstandard/</guid>
      <description>I have been upgrading a few projects from their original PCL profiles (now deemed obsolete) to the Net Standard platform specification. It turned out to be a relatively straightforward process, but it does have its small hurdles, especially so if in the meantime you also want to transition to the new, streamlined, .csproj format as the migration will leave you with a now obsolete project.json project. In this article, I will cover upgrading a project from Portable Class Library to NetStandard.</description>
      <content:encoded><![CDATA[<p>I have been upgrading a few projects from their original PCL profiles (now
deemed obsolete) to the <a href="https://docs.microsoft.com/it-it/dotnet/articles/standard/library">Net Standard</a> platform specification. It turned out
to be a relatively straightforward process, but it does have its small hurdles,
especially so if in the meantime you also want to transition to the new,
streamlined, <code>.csproj</code> format as the migration will leave you with a now
obsolete <code>project.json</code> project. In this article, I will cover upgrading
a project from Portable Class Library to NetStandard. In a follow-up post,
I plan to write about the switch from <code>project.json</code> to the new <code>.csproj</code>
format.</p>
<p>So let us take the <a href="https://github.com/pyeve/Eve.NET/">Eve.NET</a> project as an example. It makes a good
candidate because it is an open source project, so you can go and have a look
at the source code <a href="https://github.com/pyeve/Eve.NET/tree/v0.2">before</a> and <a href="https://github.com/pyeve/Eve.NET/tree/netstandard">after</a> the switch from PCL to
NetStandard.</p>
<p>The first step was, of course, opening the project in Visual Studio 2017. If
you are on an older VS version, you should upgrade. For many valid reasons
indeed, among them the fact that Visual Studio 2017 comes with a built-in
option to switch a project to NetStandard.</p>
<p><img loading="lazy" src="/images/netstandard1.png" alt=""  />
</p>
<p>As you can see, before the upgrade Eve.NET was a Profile259 PCL project. As
metioned, Visual Studio offers the option to switch to the .NET Platform
Standard. By clicking the link, you get a fair warning that <em>you might not be
able to use the same APIs when targeting NetStandard</em>. That makes sense
because, as you probably know already, NetStandard is an API specification
while a PCL essentially is the intersection (or lowest common denominator) of
the APIs available on target platforms. PCL compatibility has never been the
design goal of NetStandard.</p>
<p>Generally speaking, NetStandard offers a wider range of APIs compared to most
PCL profiles and, most importantly, is planned to go through a cycle of
incremental upgrades of the API specification, each one denoted by a version
number. We already went from 1.0 to 1.6, with 2.0 currently being developed.
<a href="https://github.com/dotnet/standard/blob/master/docs/netstandard-20/README.md">NetStandard 2</a> will be a significant milestone, just give a look at the
<a href="https://raw.githubusercontent.com/dotnet/standard/master/docs/versions/netstandard2.0_diff.md">impressive diff</a> between 1.6 and 2.0. A <em>lot</em> of open source projects are
eagerly waiting on NetStandard 2 release (Q3 2017).</p>
<p>Upon confirming the switch, you might get the following show-stopper (I did):</p>
<p><img loading="lazy" src="/images/netstandard2.png" alt=""  />
</p>
<p>This dialog will pop up if your project never has opted-in for NuGet 3.0. If
this is the case, you have to go back, uninstall all NuGet packages, then
attempt the switch again. When the migration is complete, you will have to
re-install the packages, provided that they are compatible with NetStandard. In
Eve.NET case the only dependency is Json.NET, which supports NetStandard 1.3,
which also means that Eve cannot support previous NetStandard versions.</p>
<p>Now, if you give a look at the installed packages, you will find that you have
a couple of new entries: <code>NETStandard.Library</code>, which is pretty
self-explanatory, and <code>Microsoft.NETCore.Portable.Compatibility</code>. This one will
only appear when you convert from a PCL: a brand new NetStandard project will
not take a dependency on it. If you are not using any legacy code, like NET
4.0-only, or Silverlight, you should be able to drop this dependency safely (I
did with no consequences).</p>
<p>The project is now NetStandard and ready to be used on all the platforms
supporting your chosen version: NETCore, Windows, Xamarin, UWP, you name it.</p>
<p>However, you will soon notice that the project has gained a <code>project.json</code>
file. It is ok, it works just fine, but it is obsolete: with Visual Studio 2017
project.json was abandoned for a new, streamlined and pretty darn powerful,
<code>.csproj</code> project file. In the next article, I will show you how to move your
project forward by dropping <code>project.json</code> and embracing the new project type
(and other niceties, like dropping the <code>.nuspec</code> file in the process).</p>
<p><em>Join the <a href="http://eepurl.com/b-_Pzz">newsletter</a> to get an email alert when a new post surfaces on
this site. If you want to get in touch, I am @<a href="http://twitter.com/nicolaiarocci">nicolaiarocci</a> on twitter.</em></p>
]]></content:encoded>
    </item>
    <item>
      <title>Python support in Visual Studio 2017 or the lack thereof</title>
      <link>https://nicolaiarocci.com/python-support-in-visual-studio-2017-or-the-lack-thereof/</link>
      <pubDate>Wed, 08 Mar 2017 10:41:17 +0100</pubDate>
      <guid>https://nicolaiarocci.com/python-support-in-visual-studio-2017-or-the-lack-thereof/</guid>
      <description>So yesterday Visual Studio 2017 was released. Big news. Lots of cool stuff. As I write this I am watching the live stream of the 2 days-long launch event. If you want to learn about Python support in VS2017 though, you have to dig deeper and head over to the Python Engineering blog at Microsoft.
As expected, the official release is actually coming out with no support for Python. It will come in a few months.</description>
      <content:encoded><![CDATA[<p>So yesterday Visual Studio 2017 was released. Big news. Lots of <a href="https://www.visualstudio.com/vs/whatsnew/">cool
stuff</a>. As I write this I am watching the <a href="https://launch.visualstudio.com">live stream</a> of the
2 days-long launch event. If you want to learn about Python support in VS2017
though, you have to dig deeper and head over to the <a href="https://blogs.msdn.microsoft.com/pythonengineering/2017/03/07/python-support-in-vs2017/">Python Engineering</a>
blog at Microsoft.</p>
<p>As <a href="https://nicolaiarocci.com/python-workload-pulled-off-visual-studio-2017-rc3/">expected</a>, the official release is actually coming out with no support for
Python. It will come in a few months. Bummer. In the meanwhile however you can go and grab the
(also newly released) <a href="https://visualstudio.com/vs/preview?wt.mc_id=blogs_msdn_python">Visual Studio Preview</a>. This new kid on the block
has the ability to be installed and used side-by-side with the official release
and will be used - you guessed it - as an early preview of what’s coming next for Visual Studio.</p>
<p>Two key things to note here:</p>
<ul>
<li>Everything that is in Visual Studio 2017 is also in Visual Studio Preview;</li>
<li>They are two separate installations with separate workloads and settings.</li>
</ul>
<p>Now you might be thinking that two installs are overkill, and I concur. Because
Preview includes all the official features, you might also think that you can
probably get away with only installing Visual Studio Preview. That would work,
but here is the catch: Visual Studio Preview has no support for paid product
offerings. So if you are a Professional or Enterprise user well, you are out of
luck.</p>
<p>This is not ideal. Python pulled out of RC3 was understandable, although
unsettling. Not included with the official release? Not pretty. For most
people, I suspect, the gimmicks required to get Python to work with Visual
Studio 2017 are unbearable. Personally, I will fallback to other solutions and
wait until Python Workload gets merged back with the official offering.</p>
<p>I am still convinced that in the long run Visual Studio with its Python
Workload will become the best option to do Python on Windows (Visual Studio
Code being the second best candidate). I mean, look at this beauty:</p>
<p><img loading="lazy" src="/images/PythonVsPreview.png" alt=""  />
</p>
<p>Combined with the VsVim extension it makes Python coding on Windows almost as
great as Vim+bash I&rsquo;ve been using so far, but within Visual Studio which I use
for all my other coding (don&rsquo;t get me started on C# in Vim. That is material
for another post maybe.) I am also totally sympathetic with the dev team.
I have been in this business for longer than I care to admit and I do know
these things happen. But still, there is no dobut that this unfortunate
incident marks a serious setback.</p>
<p>In less than one month I will be givin a talk at PyCon Italy. It is titled
<a href="https://www.pycon.it/conference/talks/python-tools-for-visual-studio-ovvero-python-windows-like-a-boss-and-for-free">Python on Windows Like a Boss</a> and the heart of it was of course going be
the Python Workload for Visual Studio 2017. With this turn of events I will
probably end up going on stage with the previous version of the tool, and
Visual Studio 2015.</p>
<p>Or I will bite the bullet and install 35 gigs of mostly duplicated software.</p>
<p><em>Join the <a href="http://eepurl.com/b-_Pzz">newsletter</a> to get an email alert when a new post surfaces on
this site. If you want to get in touch, I am @<a href="http://twitter.com/nicolaiarocci">nicolaiarocci</a> on twitter.</em></p>
]]></content:encoded>
    </item>
    <item>
      <title>Setting the default timezone in AppVeyor build worker (and C# 7.0 support)</title>
      <link>https://nicolaiarocci.com/setting-the-default-timezone-in-appveyor-and-c-sharp-7-support/</link>
      <pubDate>Sat, 25 Feb 2017 16:48:09 +0100</pubDate>
      <guid>https://nicolaiarocci.com/setting-the-default-timezone-in-appveyor-and-c-sharp-7-support/</guid>
      <description>So yesterday I pushed some code over to GitHub, then went off to work on a different project. A few seconds later I got an email from AppVeyor telling me that my CI build worker was reporting a failure. I was surprised as just ahead of the push I had tests all green in local.
Turned out failure was on an equality assertion between two date values:
As you can see the mismatch was precisely two hours.</description>
      <content:encoded><![CDATA[<p>So yesterday I pushed some code over to GitHub, then went off to work on
a different project. A few seconds later I got an email from <a href="https://www.appveyor.com">AppVeyor</a>
telling me that my CI build worker was reporting a failure. I was surprised as
just ahead of the push I had tests all green in local.</p>
<p>Turned out failure was on an equality assertion between two date values:</p>
<p><img loading="lazy" src="/images/appveyor-failure-on-date-fields.png" alt=""  />
</p>
<p>As you can see the mismatch was <em>precisely</em> two hours. That always rings a Time
Zone alarm bell in my head. I was under the assumption that since my time zone
was correctly set in my account settings, the workers would pick it up. Well as
it turns out, that is not the case as that setting is only used for
notifications and NuGet feeds. The AppVeyor app worker runs on UTC by default.</p>
<p>Solution was straightforward. I edited the <code>appveyor.yml</code> file and instructed
the worker to launch <code>tzutil</code> and set the desired time zone immediately, before
anything else is executed:</p>
<script src="https://gist.github.com/nicolaiarocci/afbce25a393067e3e22e2f3f706f548a.js"></script>

<p>And that was it. Remember, you can use <code>tzutil /l</code> on your local box to get
a list of the available timezones.</p>
<p>Another minor (and temporary) issue I have with AppVeyor is that they do not
officially support C# 7.0 yet. Try using an inline temporary variable in your
code. Tests will be green in local and happily fail on AppVeyor, as the VM runs
MSBuild 14. The Visual Studio 2017 RC image is in beta and not available in the
Environment settings unless you explictly ask for it <a href="https://github.com/appveyor/ci/issues/1179">here</a>. They are quick
to reply though and then, not without some more fiddling (see the post at the
top of the thread), you can get C# 7.0 features to run seamlessly in the VM.</p>
<p><em>Join the <a href="http://eepurl.com/b-_Pzz">newsletter</a> to get an email alert when a new post surfaces on
this site. If you want to get in touch, I am @<a href="http://twitter.com/nicolaiarocci">nicolaiarocci</a> on twitter.</em></p>
]]></content:encoded>
    </item>
    <item>
      <title>How to build and deploy a private NuGet server on IIS or Azure</title>
      <link>https://nicolaiarocci.com/how-to-build-and-deploy-a-private-nuget-server-on-iis-or-azure/</link>
      <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/how-to-build-and-deploy-a-private-nuget-server-on-iis-or-azure/</guid>
      <description>Recently I had to build and deploy a private NuGet server. The official documentation is quite good, but I did hit some (admittedly small) hitches along the way, so I thought I might as well share the whole process. Hopefully this post will be helpful to the next guy or gal adventuring down the same path.
If I don&amp;rsquo;t need to convince you on the usefulness and importance of packages in modern software development, then you can safely jump to The case for private NuGet feeds, and spare yourself some of my ramblings.</description>
      <content:encoded><![CDATA[<p>Recently I had to build and deploy a private NuGet server. The
official <a href="https://docs.nuget.org/ndocs/hosting-packages/overview">documentation</a> is quite good, but I did hit some
(admittedly small) hitches along the way, so I thought I might as well share
the whole process. Hopefully this post will be helpful to the next guy or gal
adventuring down the same path.</p>
<p><em>If I don&rsquo;t need to convince you on the usefulness and importance of packages
in modern software development, then you can safely jump to <a href="#the-case-for-private-nuget-feeds">The case for
private NuGet feeds</a>, and spare yourself
some of my ramblings.</em></p>
<h2 id="why-you-should-package">Why you should package</h2>
<p>Before I get down to business allow me a little digression to stress the
importance of packaging, even for small teams. Packaging is not new. The
practice is considered to be well settled, even in the .NET community where it
became mainstream in relatively recent times with the advent of NuGet (2010).
Nonetheless, I have seen the discussion going <em>oh</em> so many times, even in
recent times, in shops big and small: <em>should we package in the first place</em>?
Yes you should.</p>
<p>You don&rsquo;t want to just get along with loose .dll files being distributed
(zipped or not) by hand, email, or any other means. We have all done it at some
point or another. Over time even that single, very simple, self-contained
library file is going to outgrow itself. New releases will happen. Some of
those releases might happen to be outright broken. Bugs and/or regressions will
surface. They always do. Maybe your library will take on a few dependencies.
Good luck getting all your peers to upgrade or downgrade painlessly.</p>
<p>And yes I know. Nowadays we have version control systems. A team can simply
share code via git. But often times you don&rsquo;t necessarily want/can share the
code with your colleagues. More importantly, in most scenarios your peers only
need the features that your library offers, not the burden that comes with
adding your project to their solution and then keeping their clones up to date.
They simply need to add a reference to your library. It might make sense to
keep everything fluid (no release, no package) at the very early stages, when
your API is not ironed out yet but really, just don&rsquo;t. Especially so if you
can rely on a private NuGet feed which you can setup to allow for all kind of
dirty (and inadvisable) tricks, like enabling package overwriting which is
disabled on the public feed.</p>
<p>Packages are the way to go. They give you versioning and dependency management.
They also encorage a distribution model made of small, mostly self-contained
files, which is both a best and common pattern (just look at the path taken by
Microsoft itself with the .NET Core distribution model).</p>
<h2 id="the-case-for-private-nuget-feeds">The case for private NuGet feeds</h2>
<p>Now, with that out of the way, let&rsquo;s give a look at the official NuGet feed.
According to the <a href="http://blog.nuget.org/20160622/NuGet-API-key-expiration.html">NuGet blog</a> itself:</p>
<blockquote>
<p>NuGet.org is growing blazingly fast. The past couple of years have seen
a tremendous growth in the usage of packages from the NuGet gallery.</p>
</blockquote>
<p>But let&rsquo;s just dig into that giant haystack for a little while. Just a quick
glance will suffice to determine that the feed is a big mess. Besides the top
packages, the tip of the iceberg, you will easily spot a <em>whole lot</em> of
packages that are clearly intended to be only consumed by a handful of people.
Descriptions are often very short, to the point of being unintelligible.
Sometimes they are totally (purposely?) cryptic, or just speak some kind of
internal lingo. Heck, even the package names are at times so obscure that
I don&rsquo;t even get a hint at what they are supposed to do.</p>
<p><img loading="lazy" src="/images/nuget-random-package.png" alt="Really?"  />
</p>
<p>Mind you, this is not limited to the NuGet ecosystem. If we look at the <a href="https://pypi.python.org/pypi">Python
Package Index</a> for example, we find the same exact situation: 95K+ packages,
many of which are totally unintelligible unless you know what you are looking
for. And don&rsquo;t get me started with <a href="https://www.npmjs.com">npm</a>, which reigns supreme with its
astounding 350,000 packages count.</p>
<p>I cannot help but think that many packages would better sit in a private NuGet
server. I would not be surprised to learn one day that people are publishing to
the public feed just because they don&rsquo;t know they can build their own private
server or, even if they do, they think it is just not worth the effort.</p>
<p>Private servers are not a tool just for the enterprise. Small teams
will benefit from them too. Aside from the obvious <em>we don’t want/can’t
share our packages with the public</em> there are other good reasons to have one.
Setting a server up is cheap (host on IIS or Azure), easy, and allows you
total control over the feed.</p>
<h2 id="private-nuget-feed-options">Private NuGet feed options</h2>
<p>The NuGet framework supports local feeds with three options:</p>
<ul>
<li>Local feed. This is a suitable network file share used to store your
pages. Very simple. Probably a good solution if you don&rsquo;t need to share
your packages outside your LAN.</li>
<li>NuGet.Server. Packages are made available through a HTTP server, local
or remote.</li>
<li>NuGet Gallery. Packages are hosted using the NuGet Gallery Project available on GitHub. This is the same tool used to host the official feed, with all the features like
web browsing and searching, admin interface, etc.</li>
</ul>
<p>There are also third-party NuGet hosting services that support remote private
feeds.</p>
<p>In this article we will look at NuGet.Server option. This is an actual
package provided by the .NET Foundation. It creates an ASP.NET application that
can host a package feed on any server that runs IIS. It is simple and quick to
setup, and it is ideal for small teams and simple scenarios. Its biggest
drawback is that it does not keep state: it does not rely on a local database
to store download counts, user logins, etc. If you need that level of detail then you want to
look at the NuGet Gallery option. What the NuGet.Server packages does, in
practice, is making a folder on the server available through HTTP(S). Visual
Studio and <code>nuget.exe</code> can then add the server to the list of available
sources and consume it along with other feeds, like the public one.</p>
<p>If you played with NuGet.Server in the past and found it slow for large number
of packets, please give it another shot now. Besides some internal
optimizations, in recent times it has been updated to use the <a href="http://blog.nuget.org/20160113/Accelerate-your-NuGet.Server.html">Expanded Folder
Format</a> and its performance has skyrocketed since then.</p>
<h2 id="create-a-nuget-server-in-visual-studio">Create a NuGet Server in Visual Studio</h2>
<p>In Visual Studio select File &gt; New &gt; Project to create a new project. In order
to get the latest version of NuGet.Server, make sure you set the target
framework to .NET Framework 4.6 or above.</p>
<p><img loading="lazy" src="/images/nuget-server-1.png" alt="New VS project with .NET 4.6 or above"  />
</p>
<p>Give the application an appropriate name and click OK. In the following dialog
pick the Empty ASP.NET Web Application template and click OK.</p>
<p>Next you need to install the NuGet.Server package itself. Right-click the
project name and select Manage NuGet Packages. In the NuGet Package Manager
search and install the latest version of NuGet.Server.</p>
<p><img loading="lazy" src="/images/nuget-server-2.png" alt="Install the NuGet.Server package"  />
</p>
<p>Alternatively, you can of course install from the Package Manager Console with
<code>Install-Package NuGet.Server</code>.</p>
<p>The installation process will install the needed dependencies and take care of
converting your empty application into an actual package server. It achieves
that by overwriting the default <code>web.config</code> to include custom application
settings (to which we will get in a second), and by creating a deafult
<code>Packages</code> folder where your packages will reside. When you are asked if you
want to overwrite the current <code>web.config</code>, say YES.</p>
<p>When the process is complete your server is ready to run. Just hit Ctrl+F5 (no
debug) and Edge will fire up at the following page:</p>
<p><img loading="lazy" src="/images/nuget-server-3.png" alt="NuGet server up and running"  />
</p>
<h2 id="adding-packages-to-the-feed">Adding packages to the feed</h2>
<p>Now, if you go back to the project and inspect the newly created <code>Packages</code>
folder, you will find that it is empty except for a readme file, which
makes sense since we have not added any package to our repository yet. The readme
says that you can simply drag (or paste) your <code>.nupkg</code> files into the folder in
order to make them available to clients.</p>
<p>That works. I suspect, though, that it used to work better back when
NuGet Server did not support the Expanded Folder Format. At the time of this
writing (v2.11.3 of the package), dragging packages is an awkward process for
a couple of reasons. First, you also need to remember to set the Copy to Output
Directory property to <em>Copy Always</em> for every file added this way (that&rsquo;s not
mentioned in the readme). Second, as soon as the app is up and runnig it will
reconstruct the folder by moving package files, each one into their own
sub-folder, as the Expanded Folder Format implies. This will leave your project
with orphaned files. My suggestion is to simply use your newly created server
the way it is supposed to be: just push your packages to it via <code>nuget.exe</code>.</p>
<p>Initially your NuGet Server will not allow clients to push packages. You first
need to set an API key in <code>web.config</code>, then clients will need to use the key
when pushing to the server. As you can see, the <code>apiKey</code> value is blank by
default.</p>
<p><img loading="lazy" src="/images/nuget-server-4.png" alt="NuGet API key setting in web.config"  />
</p>
<p>The key will have to be shared by all clients, so make sure you hand it only to
authorized personnel. While you are at it, also make sure that it as strong as
it can get. And yes I agree. Along with being statless, the shared API key
requirement is probably the biggest drawback to the NuGet.Server option.</p>
<p>If your server is secured by other means (e.g. it sits in a firewalled
company network), or if you just want to perform some local testing, you can
switch the API key requirement off by setting <code>requireApiKey</code> to <code>false</code>.</p>
<p>Once your API key is properly configured you can start pushing from the command
line:</p>
<pre><code>nuget.exe push {package file} {apikey} -Source http://localhost:50227/api/v2/package 
</code></pre>
<p>As you can see are still running on localhost. It&rsquo;s almost time to publish our
NuGet server to IIS or Azure. Let&rsquo;s first give a look at a couple interesting
options we have in <code>web.config</code>.</p>
<h2 id="allow-overriding-on-push">Allow overriding on Push</h2>
<p>As I mentioned in my ramblings above, a private feed offers some more
control over the feed compared to the public one. On nuget.org you cannot override an
existing package version, period. On you own server you have to option to allow
that. Just set <code>allowOverrideExistingPackageOnPush</code> to <code>true</code> (it is disabled by
default, and for good reasons).</p>
<h2 id="soft-deletes-delist">Soft deletes (delist)</h2>
<p>When a client has a valid API key it can not only push, but also delete
packages. By default the <code>delete</code> command will do just that, delete the package
file from the repository. On your server you can change that behavior and opt
for delisting on <code>delete</code> instead. Just set <code>enableDelisting</code> to <code>true</code>.</p>
<p>Be careful however as a delisted package can still be donwloaded by clients
that explictly specify the version, as correctly reported in the comments for
the option.</p>
<h2 id="change-the-default-folder">Change the default folder</h2>
<p>If you dislike <code>~/Packages</code> as your packages repository, you can set
<code>packagesPath</code> to something other than the default blamk value. This can be
a virtual or physical path.</p>
<h2 id="deploy-to-iis-or-azure">Deploy to IIS or Azure</h2>
<p>There is nothing special about deploying the server application to either IIS
or Azure. It is just a normal web application and we can leverage Visual
Studio&rsquo;s Web Deploy feature to achieve our goal.</p>
<p>In the Solution Explorer right click on the project name and hit Publish. In
the Publish dialog, if you are publishing to Azure select Microsoft App
Service. Sign-if if you need to, and then pick an appropriate service name.</p>
<p><img loading="lazy" src="/images/nuget-server-5.png" alt="Ready to deploy on Azure"  />
</p>
<p>Hit Publish. At the end of the process Edge will open your remote welcome page.</p>
<p><img loading="lazy" src="/images/nuget-server-6.png" alt="The NuGet server is up and running on Azure"  />
</p>
<p>You can start to push packages right away.</p>
<p>If publishing to IIS in the Publish dialog select the Custom option and fill in
server name (IP address works too), site name, username and password. The
Destination URL is not strictly necessary. When I first tried this, pushes were
failing despite the server app being up and running. The issue was that the
application did not have write access to the Packages folder, so you might want
to check that too.</p>
<h2 id="consume-the-feed-from-visual-studio">Consume the feed from Visual Studio</h2>
<p>Once your server is up and running you can add it as a NuGet Source in Visual
Studio. Go to Tools &gt; Options and browse to NuGet Package Manager &gt; Package
Sources. Alternatively, right click on the project in the Solution Explorer,
hit Manage NuGet Packages and then hit the gear icon next to the Package Source
combo.</p>
<p><img loading="lazy" src="/images/nuget-server-7.png" alt="NuGet sources in Visual Studio"  />
</p>
<p>Add your server to the list of available sources. As you can see in my case
I have nuget.org, a local folder and the test server for this article
available. Hit OK once your server has been added. At this point when you go to
the NuGet Package Manager window your Package source combo will also list your
private server and you can install packages from there.</p>
<p><img loading="lazy" src="/images/nuget-server-8.png" alt="NuGet server in VS for Mac"  />
</p>
<p>The screenshot above is from Visual Studio for Mac. It shows the actual private
feed we use for development. All our packages are nicely listed there, with no
interference from the public feed. The public feed is only one click away and,
both on Mac and Windows, you can search on all available feeds at once, wich is
super convenient.</p>
<h2 id="wrap-up">Wrap up</h2>
<p>NuGet.Server makes setting up a private NuGet feed a breeze. It does have a few
drawbacks. If you can live with it being stateless and not allowing for
individual API keys, then this package is probably your best option. The full
NuGet Gallery project is still available if you need more power.</p>
<p>If you want to get in touch, I am @<a href="http://twitter.com/nicolaiarocci">nicolaiarocci</a> on Twitter.</p>
<p><em>Special thanks to fellow Microsft MVP &amp; Regional Director <a href="https://mvp.microsoft.com/it-it/PublicProfile/8464?fullName=andrea%20saltarello">Andrea
Saltarello</a> for peer reviewing this article before publication.</em></p>
]]></content:encoded>
    </item>
    <item>
      <title>Eve SDK for .NET v0.2 is out in the wild</title>
      <link>https://nicolaiarocci.com/eve-sdk-for-net-v0-2-is-out-in-the-wild/</link>
      <pubDate>Tue, 02 Aug 2016 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/eve-sdk-for-net-v0-2-is-out-in-the-wild/</guid>
      <description>I just released a long overdue update to Eve.NET. This release marks a significant improvement over the previous one, which was more a prototype than a real package. New features are as follows:
PostAsync() supports bulk inserts DeleteAsync() supports bulk deletes GetAsync() has a softDelete option to include soft-deleted documents with query results GetAsync() has a rawQuery option to pass raw Eve queries to the server BearerAuthenticator class adds support for Bearer Token authentication Several fixes made it into this release and, most importantly, I switched to portable Profile259 which offers support for the following platforms: Xamarin.</description>
      <content:encoded><![CDATA[<p>I just released a long overdue update to <a href="https://github.com/nicolaiarocci/Eve.NET/">Eve.NET</a>. This release marks a significant improvement over the previous one, which was more a prototype than a real package. New features are as follows:</p>
<ul>
<li><code>PostAsync()</code> supports bulk inserts</li>
<li><code>DeleteAsync()</code> supports bulk deletes</li>
<li><code>GetAsync()</code> has a <code>softDelete</code> option to include soft-deleted documents with query results</li>
<li><code>GetAsync()</code> has a <code>rawQuery</code> option to pass raw Eve queries to the server</li>
<li><code>BearerAuthenticator</code> class adds support for Bearer Token authentication</li>
</ul>
<p>Several fixes made it into this release and, most importantly, I switched to portable Profile259 which offers support for the following platforms: Xamarin.iOS, Xamarin.Android, WinPhone 8.1, Windows 8, .NET 4.5+. Yes, that means no more support for .NET 4.0. See the <a href="https://github.com/nicolaiarocci/Eve.NET/blob/master/CHANGES">changelog</a> for details.</p>
<p>Eve.NET v0.2 is on NuGet so you can install it either from Visual Studio or with the Package Manager console. Enjoy!</p>
<p>If you want to get in touch, I am <a href="http://twitter.com/nicolaiarocci">@nicolaiarocci</a> on Twitter.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Introducing SimpleObjectCache a simple cross-platform object cache for .NET systems</title>
      <link>https://nicolaiarocci.com/introducing-simpleobjectcache-a-simple-cross-platform-object-cache-for-net-systems/</link>
      <pubDate>Wed, 20 Jul 2016 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/introducing-simpleobjectcache-a-simple-cross-platform-object-cache-for-net-systems/</guid>
      <description>SimpleObjectCache is a very simple permanent, cross-platform, asynchronous key-value object cache for .NET. It comes with built-in SQLite 3 support. Alternative backends can be added by implementing the IObjectCache or IBulkObjectCache interfaces.
How it works First, you need to set the ApplicatioName. This is also going to be the folder where your cache will reside. Depending on the host OS the location of this folder might be different. On Windows it would be something like C:\ProgramData\&amp;lt;ApplicationName&amp;gt;\SimpleObjectCache.</description>
      <content:encoded><![CDATA[<p><a href="https://github.com/nicolaiarocci/SimpleObjectCache">SimpleObjectCache</a> is a very simple permanent, cross-platform, asynchronous key-value object cache for .NET. It comes with built-in <a href="https://www.sqlite.org">SQLite 3</a> support. Alternative backends can be added by implementing the <code>IObjectCache</code> or <code>IBulkObjectCache</code> interfaces.</p>
<h2 id="how-it-works">How it works</h2>
<p>First, you need to set the <code>ApplicatioName</code>. This is also going to be the folder where your cache will reside. Depending on the host OS the location of this folder might be different. On Windows it would be something like <code>C:\ProgramData\&lt;ApplicationName&gt;\SimpleObjectCache</code>.</p>
<p>Let’s instantiate SimpleObjectCache so we can use it:</p>
<script src="https://gist.github.com/nicolaiarocci/8ad25dc8a892adb6a7428a3e5177edcd.js"></script>

<p>Now we create a <code>Person</code>, then store it into our cache.</p>
<script src="https://gist.github.com/nicolaiarocci/a45090fde90ce0fb210a1c000c9bd9ae.js"></script>

<p>As we insert an object into the cache we can also set its expiration date:</p>
<script src="https://gist.github.com/nicolaiarocci/61e55e36e4e602a4ef025bf08df6617b.js"></script>

<p>Inserting an object with an already existing key, which we just did, will overwrite the previous object with the same key. Retrieving the object is a matter of providing its key:</p>
<script src="https://gist.github.com/nicolaiarocci/30a890e120b10f0d4258d0e5f34e40f8.js"></script>

<p>To remove the object from the cache we use the <code>Invalidate</code> method:</p>
<script src="https://gist.github.com/nicolaiarocci/303a88046f0ad546f22eed84f45d6099.js"></script>

<p>Bulk inserts are also possible:</p>
<script src="https://gist.github.com/nicolaiarocci/2654b88bc3f7fe818dfa8ac862599728.js"></script>

<p>Note that we just set the Tom and Mike expiration date to yesterday. Now let’s add John again. For him however, we set an expiration date which is bigger than Tom’s and Mike’s:</p>
<script src="https://gist.github.com/nicolaiarocci/abf9444dc7d87b175d6249506d5ef568.js"></script>

<p>The <code>Vacuum</code> method removes expired objects from the cache. So Tom and Mike, whose dates are passed, are going to be purged by the following command:</p>
<script src="https://gist.github.com/nicolaiarocci/729bf7604e06caacffbf761054829c74.js"></script>

<p>Now let’s get all the available <code>Person</code> objects from the cache.</p>
<script src="https://gist.github.com/nicolaiarocci/a69e45d088d6d104ebe20a480405d6ba.js"></script>

<p>Since Tom and Mike are gone, we only got one object back, and that’s our very own little John.</p>
<h2 id="installation">Installation</h2>
<p>SimpleObjectCache is on <a href="https://www.nuget.org/packages/SimpleObjectCache/">NuGet</a>. Run the following command on the Package Manager Console:</p>
<script src="https://gist.github.com/nicolaiarocci/758165b8800d9dba483b8a50373d964c.js"></script>

<p>Or install via the NuGet Package Manager in Visual Studio.</p>
<h2 id="wrapping-it-up">Wrapping it up</h2>
<p>We needed a simple cache that we could use as a component of our cross-platform storage system (more on that in a future post). We wanted the cache to also run seamlessly on the old .NET 4.0 framework. Unfortunately <a href="https://github.com/akavache/Akavache">Akavache</a>, to which this project is blatantly inspired, does not run on .NET4, so I decided to roll out my own simplified alternative. This project also offered a great occasion get my feet wet with bait-and-switch portable classes and a few other interesting challenges.</p>
<p>Currently supported platforms are iOS and Android (Xamarin) and .NET Framework versions 4.0 and .NET 4.5+.</p>
<p>If you want to get in touch, I am @<a href="http://twitter.com/nicolaiarocci">nicolaiarocci</a> on Twitter.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Fattura Elettronica per la PA v0.2.1</title>
      <link>https://nicolaiarocci.com/fattura-elettronica-per-la-pa-v0-2-1/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/fattura-elettronica-per-la-pa-v0-2-1/</guid>
      <description>Ho appena pubblicato su NuGet l’ultimo aggiornamento di FatturaElettronicaPA, il package .NET per la compilazione e convalida delle fatture elettroniche per la Pubblica Amministrazione. Si tratta della versione 0.2.1 che fa proprie le novità annunciate il 9 Maggio scorso:
A partire dal 9 maggio 2016 sono introdotti nuovi controlli sui file trasmessi al Sistema di Interscambio. Per consentire il necessario adeguamento al nuovo regime di verifiche, fino al 31 luglio 2016 il mancato superamento di uno o più di questi nuovi controlli non comporterà lo scarto del file ma solo una segnalazione che verrà riportata all’interno della Ricevuta di consegna o della Notifica di mancata consegna.</description>
      <content:encoded><![CDATA[<p>Ho appena pubblicato su NuGet l’ultimo aggiornamento di <a href="https://github.com/FatturaElettronicaPA/FatturaElettronicaPA/">FatturaElettronicaPA</a>, il package .NET per la compilazione e convalida delle fatture elettroniche per la Pubblica Amministrazione. Si tratta della <a href="https://www.nuget.org/packages/FatturaElettronicaPA/0.2.1">versione 0.2.1</a> che fa proprie le novità annunciate il 9 Maggio scorso:</p>
<blockquote>
<p>A partire dal 9 maggio 2016 sono introdotti nuovi controlli sui file trasmessi al Sistema di Interscambio. Per consentire il necessario adeguamento al nuovo regime di verifiche, fino al 31 luglio 2016 il mancato superamento di uno o più di questi nuovi controlli non comporterà lo scarto del file ma solo una segnalazione che verrà riportata all’interno della Ricevuta di consegna o della Notifica di mancata consegna. Dal 1 agosto 2016 i file che non dovessero superare uno o più di questi controlli verranno scartati.</p>
</blockquote>
<p>Se per ora i nuovi controlli non sono vincolanti, lo saranno a partire dal 1 agosto. Poiché si tratta di una serie di convalide sui conteggi consiglio di passare alla versione 0.2.1 al più presto, così da verificare che in effetti le vostre fatture elettroniche siano in linea con le aspettative della PA: potreste avere qualche sorpresa.</p>
<p>Nel nostro caso, per esempio, abbiamo dovuto prendere atto che gli importi imponibili relativi alle aliquote IVA, così come le corrispondenti imposte, devono essere indicati al lordo degli eventuali sconti generali del documento, pena il rifiuto dello stesso da parte del sistema di interscambio. Date una occhiata al <a href="https://github.com/FatturaElettronicaPA/FatturaElettronicaPA/blob/master/CHANGES">changelog</a> per l’elenco completo delle novità.</p>
<p>Voglio aggiungere un commento sulle modalità di pubblicazione degli aggiornamenti tecnici da parte di Agenzia Entrate/Sogei. Sebbene siano dotati di data e numero di versione, questi sono da considerarsi, ad essere buoni, puramente indicativi. Per esempio l’attuale <a href="http://www.fatturapa.gov.it/export/fatturazione/sdi/Elenco_Controlli_V1.2.pdf">versione 1.2</a> dell’elenco controlli è stata aggiornata “silenziosamente” un paio di giorni dopo la pubblicazione (hanno aggiunto una tolleranza di 1 Euro al controllo 00422). Così lo sviluppatore incauto che si limiti a controllare la data e il numero di versione del documento rischia di vedersi respingere fatture per lui del tutto corrette, a meno che non di prenda la briga di verificare, riga per riga, la corrispondenza tra la documentazione in suo possesso e quella disponibile sul sito in quel momento. Chiaramente in PA non hanno idea di cosa sia il <a href="http://semver.org/">Semantic Versioning</a>.</p>
<p>Un ringraziamento al mio collega Stefano Gardini. Il suo nome non compare nelle commit ma, quando si stratta di fatturazione e contabilità, è come se ci fosse.</p>
<p>If you want to get in touch, I am <a href="https://twitter.com/nicolaiarocci">@nicolaiarocci</a> on Twitter.</p>
]]></content:encoded>
    </item>
    <item>
      <title>FatturaElettronicaPA for .NET has been updated</title>
      <link>https://nicolaiarocci.com/fatturaelettronicapa-for-net-has-been-updated/</link>
      <pubDate>Tue, 14 Jul 2015 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/fatturaelettronicapa-for-net-has-been-updated/</guid>
      <description>FatturaElettronicaPA has just been updated to v0.1.4. With this release invoice bodies (FatturaElettronicaBody items) are also validated. As always, you can install the package directly from NuGet. See the original post for more info. Also don’t forget to check the related projects.
Update: v0.1.6 has also been released.</description>
      <content:encoded><![CDATA[<p><a href="https://github.com/FatturaElettronicaPA/FatturaElettronicaPA">FatturaElettronicaPA</a> has just been updated to v0.1.4. With this release invoice bodies (<code>FatturaElettronicaBody</code> items) are also validated. As always, you can install the package directly from <a href="https://www.nuget.org/packages/FatturaElettronicaPA/">NuGet</a>. See the <a href="http://nicolaiarocci.com/fattura-elettronica-open-source/">original post</a> for more info. Also don’t forget to check the <a href="https://github.com/FatturaElettronicaPA">related projects</a>.</p>
<p>Update: v0.1.6 has also been released.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Fattura Elettronica Open Source: Web Service PA</title>
      <link>https://nicolaiarocci.com/fattura-elettronica-open-source-web-service-pa/</link>
      <pubDate>Thu, 21 May 2015 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/fattura-elettronica-open-source-web-service-pa/</guid>
      <description>this post is about an all-Italian open source release, so it’s going to be in Italian
Il progetto Fattura Elettronica Open Source si è arricchito di un nuovo strumento: Web Services. Il namespace FatturaElettronicaPA.WebServices raccoglie una serie di client C# che consentono di consultare i Web Service per la Fattura Elettronica messi a disposizione dalla Pubblica Amministrazione.
Sono disegnati in maniera da esporre tutti la stessa interfaccia ed essere al tempo stesso semplici e leggeri.</description>
      <content:encoded><![CDATA[<p><em>this post is about an all-Italian open source release, so it’s going to be in Italian</em></p>
<p>Il progetto <a href="http://nicolaiarocci.com/fattura-elettronica-open-source/">Fattura Elettronica Open Source</a> si è arricchito di un nuovo strumento: <a href="https://github.com/FatturaElettronicaPA/FatturaElettronicaPA.WebServices">Web Services</a>. Il namespace <code>FatturaElettronicaPA.WebServices</code> raccoglie una serie di client C# che consentono di consultare i Web Service per la Fattura Elettronica messi a disposizione dalla Pubblica Amministrazione.</p>
<p>Sono disegnati in maniera da esporre tutti la stessa interfaccia ed essere al tempo stesso semplici e leggeri. Al momento lavorano in modalità sincrona ma l’obiettivo è di renderli tutti asincroni.</p>
<h2 id="come-usare-i-web-service">Come usare i Web Service</h2>
<p>Prendiamo per esempio il Web Service che consente di convalidare un Codice Univoco di Fatturazione e recuperare le informazioni relative all’ufficio:</p>
<pre><code>var ws = new CodiceUnivocoFatturazioneWebService()

// Authorization Id ricevuto dall'ente.
ws.AuthId = &quot;&lt;auth Id&gt;&quot;;
// Codice univoco dell'ufficio che ci interessa
ws.CodiceUfficio = &quot;KN3VNW&quot;;

ws.PerformRequest();
if (ws.Ufficio == null) return;

// &quot;Ravenna&quot;
Console.WriteLine(ws.Ufficio.Comune);
</code></pre>
<p>Molto semplice. Gli altri WebService (sono sette in tutto) operano secondo lo stesso schema. Ricordo che per l’utilizzo dei Web Services della Pubblica Amministrazione è necessario richiedere una specifica autorizzazione. L’Authorization Id è gratuito ed il rilascio è immediato, ma bisogna compilare un apposito <a href="http://www.indicepa.gov.it/registr-user-ws/ws-registrazione-start.php">questionario</a>.</p>
<h2 id="installazione">Installazione</h2>
<p>FatturaElettronicaPA.WebServices è su <a href="https://www.nuget.org/packages/FatturaElettronicaPA.WebServices/">NuGet</a> quindi tutto quel che serve è eseguire:</p>
<pre><code>PM&gt; Install-Package FatturaElettronicaPA.WebServices
</code></pre>
<p>dalla Package Console, oppure usare il comando equivalente in Visual Studio.</p>
<p>La libreria è una portable class library e gira senza modifiche sui seguenti ambienti: .NET Framework 4.0 e superiori; Xamarin.iOS; Xamarin.Android; Windows Phone 8; Windows Store apps (Windows 8); Silverlight 5.0. Enjoy!</p>
<p>If you want to get in touch, I am @<a href="http://twitter.com/nicolaiarocci">nicolaiarocci</a> on Twitter.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Fattura Elettronica Open Source Update</title>
      <link>https://nicolaiarocci.com/fattura-elettronica-open-source-update/</link>
      <pubDate>Fri, 17 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/fattura-elettronica-open-source-update/</guid>
      <description>Fattura Elettronica Open Source has been updated to v0.1.3 a few days ago and is available on NuGet. Sources are on GitHub. It fixes a deserialization issue with the ReadXML method.</description>
      <content:encoded><![CDATA[<p><a href="http://fatturaelettronicaopensource.org/">Fattura Elettronica Open Source</a> has been updated to v0.1.3 a few days ago and is available on <a href="https://www.nuget.org/packages/FatturaElettronicaPA/">NuGet</a>. Sources are on <a href="https://github.com/FatturaElettronicaPA/FatturaElettronicaPA">GitHub</a>. It fixes a deserialization issue with the <code>ReadXML</code> method.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Fattura Elettronica Open Source</title>
      <link>https://nicolaiarocci.com/fattura-elettronica-open-source/</link>
      <pubDate>Tue, 10 Feb 2015 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/fattura-elettronica-open-source/</guid>
      <description>&lt;p&gt;&lt;em&gt;this post is about an all-italian open source release, so it’s going to be in italian&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/FatturaElettronicaPA&#34;&gt;FatturaElettronicaPA&lt;/a&gt; è un nuovo progetto open source che ho rilasciato qualche giorno fa assieme alla &lt;a href=&#34;http://gestionaleamica.com&#34;&gt;mia azienda&lt;/a&gt;. Si tratta di una libreria C# che permette di leggere, scrivere e convalidare le Fatture Elettroniche aderenti alle specifiche del &lt;a href=&#34;http://www.fatturapa.gov.it/export/fatturazione/sdi/Specifiche_tecniche_del_formato_FatturaPA_V1.1.pdf&#34;&gt;sistema di interscambio&lt;/a&gt; della Pubblica Amministrazione.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em>this post is about an all-italian open source release, so it’s going to be in italian</em></p>
<p><a href="https://github.com/FatturaElettronicaPA">FatturaElettronicaPA</a> è un nuovo progetto open source che ho rilasciato qualche giorno fa assieme alla <a href="http://gestionaleamica.com">mia azienda</a>. Si tratta di una libreria C# che permette di leggere, scrivere e convalidare le Fatture Elettroniche aderenti alle specifiche del <a href="http://www.fatturapa.gov.it/export/fatturazione/sdi/Specifiche_tecniche_del_formato_FatturaPA_V1.1.pdf">sistema di interscambio</a> della Pubblica Amministrazione.</p>
<p>Rilasciata come <a href="https://msdn.microsoft.com/en-us/library/gg597391%28v=vs.110%29.aspx">Portable Class Library</a>, FatturaElettronicaPA gira senza modifiche sui seguenti ambienti:</p>
<ul>
<li>.NET Framework 4.0 e superiori,</li>
<li>Xamarin.iOS</li>
<li>Xamarin.Android</li>
<li>Windows Phone 8</li>
<li>Windows Store apps (Windows 8)</li>
<li>Silverlight 5.0</li>
</ul>
<h2 id="come-usare-la-fattura-elettronica-pa">Come usare la Fattura Elettronica PA</h2>
<p>Usarla è molto semplice. Prima creiamo una istanza di <code>FatturaElettronica</code>:</p>
<pre><code>// instanzia una nuova fattura elettronica
FatturaElettronica fattura = new FatturaElettronica();
</code></pre>
<p>Quindi leggiamo da un file standard SDI. E’ sufficiente passare un <code>XmlReader</code> attivo al metodo <code>FatturaElettronica.ReadXml()</code>:</p>
<pre><code>// lettura da file XML compatibile con formato SDI1.1
var s = new XmlReaderSettings {IgnoreWhitespace = true};
var r = XmlReader.Create(&quot;IT01234567890_11111.xml&quot;, s);
fattura.ReadXml(r);
</code></pre>
<p>La fattura si aggiorna cambiando i valori delle sue proprietà. Qui aggiorniamo il regime fiscale del mittente. Basterebbe una sola riga di codice; usiamo tre linee per una migliore leggibilità:</p>
<pre><code>// modifica valore
var header = fattura.FatturaElettronicaHeader
var prestatore = header.CedentePrestatore
prestatore.DatiAnagrafici.RegimeFiscale = &quot;RF11&quot;;
</code></pre>
<p>Convalidare una fattura è un gioco da ragazzi. La proprietà <code>Error</code> conterrà tutti gli errori eventualmente riscontrati.</p>
<pre><code>// convalida documento
if (!fattura.IsValid) {
    Debug.WriteLine(fattura.Error);
}
</code></pre>
<p>Stampiano la fattura come flusso JSON:</p>
<pre><code>// serializzazione JSON
var json = fattura.ToJson(JsonOptions.Indented);
Debug.WriteLine(json);
</code></pre>
<p>Infine, salvarla su file standard SDI è solo questione di aprire un file con <code>XmlWriter</code> e passarlo al metodo <code>WriteXml</code>:</p>
<pre><code>// serializzazione XML secondo lo standard SDI 1.1
var s = new XmlWriterSettings { Indent = true };

XmlWriter w;
var fileName = &quot;IT01234567890_11111.xml&quot;
using (w = XmlWriter.Create(fileName, s)) {
    fattura.WriteXml(w);
}
</code></pre>
<h2 id="installazione">Installazione</h2>
<p>FatturaElettronicaPA è un package <a href="https://www.nuget.org/packages/FatturaElettronicaPA/">NuGet</a>. Per installarlo è sufficiente usare la Package Console manualmente:</p>
<pre><code>PM&gt; Install-Package FatturaElettronicaPA
</code></pre>
<p>oppure usare la interfaccia di Visual Studio.</p>
<h2 id="progetti-satellite">Progetti satellite</h2>
<p><code>FatturaElettronica</code> deriva a sua volta da <a href="https://github.com/FatturaElettronicaPA/BusinessObjects">BusinessObjects</a>, una classe che implementa la (de)serializzazione e la convalida base.</p>
<p><a href="https://github.com/FatturaElettronicaPA/FatturaElettronicaPA.Forms">FatturaElettronica.Forms</a> è invece una libreria WinForms che provvede una UI per l’editing e la segnalazione degli errori di convalida. Al momento supporta l’intestazione (header) e viene già usato in produzione nel nostro software gestionale:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>In futuro sarebbe utile aggiungere supporto per la visualizzazione e convalida del corpo fattura (Body).</p>
<p><a href="https://github.com/FatturaElettronicaPA/FatturaElettronicaPA.WebServices">FatturaElettronica.WebServices</a> consente di interrogare i diversi Web Service della Pubblica Amministrazione dedicati alla fatturazione elettronica. Tutti i progetti relativi alla fatturazione elettronica sono disponibili su <a href="https://github.com/FatturaElettronicaPA">GitHub</a>.</p>
<h2 id="perché-la-fattura-elettronica-open-source">Perché la Fattura Elettronica Open Source?</h2>
<p>Dallo scorso 6 Giugno 2014 i Ministeri, le Agenzie fiscali, le scuole e gli enti nazionali di previdenza non accettano più fatture emesse o trasmesse in forma cartacea. A partire dal 31 marzo 2015 la stessa disposizione è estesa agli altri Enti a carattere Nazionale ed a tutte le amministrazioni locali.</p>
<p>L’adozione delle fatture elettroniche è in pieno svolgimento e non crediamo di sbagliarci immaginando un futuro non troppo remoto in cui questo formato verrà adottato (per imposizione, come ci pare probabile, o per comodità) anche dal settore privato, diventando di fatto lo standard di riferimento.</p>
<p>Noi ci siamo trovati a dover implementare il supporto per la fatturazione elettronica per gli utenti di <a href="http://gestionaleamica.com">Amica 10</a>, il nostro software gestionale. Abbiamo pensato che questa fosse una buona occasione per rendere libero il nostro lavoro così che chiunque possa utilizzarlo per mettersi rapidamente al passo e magari decidere di dare una mano in uno dei tanti modi possibili: <a href="https://github.com/FatturaElettronicaPA/FatturaElettronicaPA/issues">segnalando problemi</a>, <a href="https://github.com/FatturaElettronicaPA">contribuendo direttamente</a> al progetto, o semplicemente parlandone in giro.</p>
<p>Il software è migliore quando è condiviso.</p>
<p>If you want to get in touch, I am @<a href="http://twitter.com/nicolaiarocci">nicolaiarocci</a> on Twitter.</p>]]></content:encoded>
    </item>
    <item>
      <title>Some Thoughts on the new .NET (Redux)</title>
      <link>https://nicolaiarocci.com/some-thoughts-on-the-new-net-redux/</link>
      <pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/some-thoughts-on-the-new-net-redux/</guid>
      <description>Like all those involved with the .NET ecosystem I’ve been slowly digesting the recent news on the whole thing going open source and cross platform. I’ve been jogging down a few notes in light of a future blog post, but then Jeremy Miller came out with his own Some Thoughts on the New .NET which is almost exactly the post I wanted to write. So when he writes:
I’ve started to associate .</description>
      <content:encoded><![CDATA[<p>Like all those involved with the .NET ecosystem I’ve been slowly digesting the recent news on the whole thing going open source and cross platform. I’ve been jogging down a few notes in light of a future blog post, but then Jeremy Miller came out with his own <a href="http://jeremydmiller.com/2014/12/02/some-thoughts-on-the-new-net/">Some Thoughts on the New .NET</a> which is almost exactly the post I wanted to write. So when he writes:</p>
<blockquote>
<p>I’ve started to associate .Net “classic” with seemingly constant aggravations like strong naming conflicts, csproj file merge hell, slow compilation, slow nuget restores, and how absurdly heavyweight and bloated that Visual Studio.Net has become over the years.</p>
</blockquote>
<p>It is me. No it’s actually Jeremy but really it’s me. I also share his concerns on the future OSS .NET community him:</p>
<blockquote>
<p>So much of .Net is open source now and they even take contributions. Awesome, great, but my very first reaction was that it doesn’t matter much because <strong>the .Net community as a whole isn’t as participatory as other communities</strong> and that would have to change before ASP.Net vNext being OSS matters. It’ll be interesting to me to see if that changes over time.</p>
</blockquote>
<p>I’m very involved with the Python language and its community. I released <a href="http://nicolaiarocci.com/opensource/">open source projects</a> for both platforms and frankly I’ve been shocked by the difference in culture between the two communities. I am really hoping that, in due time, .NET going open source will also cause its community to evolve as a whole.</p>
<p>And what about coding on a Mac (or Linux for the matter)? He goes on with:</p>
<blockquote>
<p>After a couple years now of using a Mac, I’d really prefer to stay on that side of things and hopefully give my Windows VM much more time off. Mac OS being a first class citizen for the new .Net and the progress on the OmniSharp tools for Sublime or MacVim is going to make the new ASP.Net vNext runtime a much easier sell in my shop.</p>
</blockquote>
<p>I’ve been working on a Mac for years, confining Windows on a VM, doing Python with Vim as much as possible. My God I love Vim. My Visual Studio runs VsVim (which is open source by the way). Even my Xamarin Studio on OSX runs in vi mode (which sucks unfortunately). I would never go back to a Windows machine but that does not mean that I don’ want to use C# or F#. Even these days most of my coding is C# in XS/OSX or Vim with OmniSharp, a project I’ve been experimenting with since when the plugin for Vim was released. So native .NET on OSX and Unix? Yes please.</p>
<p>I am in the process of writing a C# iOS application. The data layer is SQLite encapsulated in a Portable Class so we can use it on both Windows and iOS. The HTTP/REST client is also portable, <a href="http://nicolaiarocci.com/introducing-eve-net-httprest-client-humans/">open source</a> and consumed on both platforms. And now even the mobile UI is C# and portable between Android, iOS and Windows Phone thanks to Xamarin.Forms. If you ask me, the future looks bright.</p>
<p>You should read Jeremy post on <a href="http://jeremydmiller.com/2014/12/02/some-thoughts-on-the-new-net/">his site</a>.</p>
<p>If you want to get in touch, I am <a href="https://twitter.com/nicolaiarocci">@nicolaiarocci</a> on Twitter.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Introducing Eve.NET the HTTP/REST Client for Humans™</title>
      <link>https://nicolaiarocci.com/introducing-eve-net-httprest-client-humans/</link>
      <pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/introducing-eve-net-httprest-client-humans/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/nicolaiarocci/Eve.NET&#34;&gt;Eve.NET&lt;/a&gt; is a simple HTTP and REST client for Web Services powered by the &lt;a href=&#34;http://python-eve.org&#34;&gt;Eve Framework&lt;/a&gt;. It leverages both &lt;code&gt;System.Net.HttpClient&lt;/code&gt; and &lt;code&gt;Json.NET&lt;/code&gt; to provide the best possible Eve experience on the .NET platform.&lt;/p&gt;
&lt;p&gt;Written and maintained by the same author of the Eve Framework itself, Eve.NET is delivered as a portable library (PCL) and runs seamlessly on .NET4, Mono, Xamarin.iOS, Xamarin.Android, Windows Phone 8 and Windows 8. We use Eve.NET internally to power our iOS, Web and Windows applications.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><a href="https://github.com/nicolaiarocci/Eve.NET">Eve.NET</a> is a simple HTTP and REST client for Web Services powered by the <a href="http://python-eve.org">Eve Framework</a>. It leverages both <code>System.Net.HttpClient</code> and <code>Json.NET</code> to provide the best possible Eve experience on the .NET platform.</p>
<p>Written and maintained by the same author of the Eve Framework itself, Eve.NET is delivered as a portable library (PCL) and runs seamlessly on .NET4, Mono, Xamarin.iOS, Xamarin.Android, Windows Phone 8 and Windows 8. We use Eve.NET internally to power our iOS, Web and Windows applications.</p>
<p><em>And now please forgive me while I take you on a quick motivational, strongly opinionated, probably boring and overzealous detour</em></p>
<hr>
<h2 id="python-and-c-motherfucker-do-you-speak-it-">Python and C# Motherfucker, Do You Speak It? *</h2>
<p>If you don’t then well, you should consider doing just that. Especially so these days, with C# and the whole .NET platform going open source and cross platform. Actually, thanks to technologies like Mono and Xamarin (also based on Mono) we have been able to run C# code on all major platforms for a while: iOS, Android, OSX, Linux, Windows, Windows Phone, you-name-it. And what’s even better, on mobile platforms C# is compiled to native so performance is a non-issue.</p>
<p>What makes C# a perfect match for a REST API is precisely that: it’s ubiquity. You can have a portable client library like Eve.NET which runs seamlessly (and untouched) on all these mobile desktop and server platforms.</p>
<p>If you already have a Web Service running on Eve and are now looking at the client side of things then well, you should consider C# and Eve.NET because you know, you can’t have a native iOS app written in Python anyway. On the other hand if you are a C#/.NET shop consider this: you can have a powerful Web Service up and running in minutes (even if you don’t grok Python yet – trust me on that) <em>and</em> a complete out-of-the-box, cross platform client library ready to go with it.</p>
<p>A few years ago I gave a talk about leaving my Comfort Zone (**) and getting out of my .NET nest. That opened the path to Python, MongoDB, Node and so many other technologies and best practices and, what’s even more relevant, most of what I learned down that path I ended up using in my .NET projects in the long run. But the point I’m trying to make is don’t be afraid of change, it can only improve your skills making you a better all-around professional programmer.</p>
<p>Never mind the naysayers. Polyglot is the way.</p>
<hr>
<p>(*) I’m paraphrasing Zed A. Shaw’s <a href="http://programming-motherfucker.com/">Programming, Motherfucker</a>. You should get a T-Shirt by the way. They are so cool.</p>
<p>(**) Since then there have been plenty of talks on the same subject. Mine was an 5 minutes ignite talk and was in Italian, so you probably don’t care (it’s on my <a href="http//nicolaiarocci.com/talks">Talks</a> page anyway).</p>
<hr>
<p><em>Back to business now</em>.</p>
<h2 id="usage">Usage</h2>
<p>Initialization is as simple as instantiating a new client and providing it with the web service entry point.</p>
<pre><code>// Initialize and set API address.
var client = new EveClient();
client.BaseAddress = new Uri(&quot;http://api.com&quot;);

// Set target resource for subsequent requests.
client.ResourceName = &quot;companies&quot;;
</code></pre>
<p>Getting a list of objects is pretty straightforward:</p>
<pre><code>// List&lt;T&gt;
companies = await client.GetAsync&lt;Company&gt;();

// Objects changed since DateTime.
var ifModifiedSince = DateTime.Now.AddDays(-1);
companies = await 
  client.GetAsync&lt;Company&gt;(ifModifiedSince);

// Refresh an object
company = await client.GetAsync&lt;Company&gt;(company);

// Raw, conditional GET request
var companyId = &quot;507c7f79bcf86cd7994f6c0e&quot;;
var eTag = &quot;7776cdb01f44354af8bfa4db0c56eebcb1378975&quot;;

company = await 
  client.GetAsync&lt;Company&gt;(&quot;companies&quot;, companyId, eTag);
</code></pre>
<p>Other CRUD operations are easy too:</p>
<pre><code>// Create (POST)
company = await 
  client.PostAsync&lt;Company&gt;(
    new Company { Name = &quot;MyCompany&quot; }
  );

// Update (PUT)
company.Name = &quot;YourCompany&quot;;
var result = await client.PutAsync&lt;Company&gt;(company);

// Delete (DELETE)
var result = await client.DeleteAsync(company);
</code></pre>
<p>As you can see all methods are Async and return full object instances parsing JSON in and out on for you. If you need more control you can query the <code>HttpResponse</code> property to inspect the original JSON, response headers, status code, etc.</p>
<p>Behind the scenes <a href="http://python-eve.org/features#data-integrity-and-concurrency-control">data integrity and concurrency control</a> are transparently handled so for example <code>PutAsync</code> performs a <code>If-Match</code> check and same happens with <code>DeleteAsync</code>. On <code>PostAsync</code> new objects are returned with fresh meta-fields such as <code>ETag</code>, <code>DateCreated</code>, <code>DateUpdated</code> and <code>UniqueId</code>. Mapping object properties to JSON fields and Eve metafields is just a matter of setting the <code>JSonPropertyAttribute</code> and <code>RemoteAttribute</code>:</p>
<pre><code>public abstract class BaseClass
{
  [JsonProperty(&quot;_id&quot;)]
  [Remote(Meta.DocumentId)]
  public string UniqueId { get; set; }

  [JsonProperty(&quot;_etag&quot;)]
  [Remote(Meta.ETag)]
  public string ETag { get; set; }

  [JsonProperty(&quot;_updated&quot;)]
  [Remote(Meta.LastUpdated)]
  public DateTime Updated { get; set; }

  [JsonProperty(&quot;_created&quot;)]
  [Remote(Meta.DateCreated)]
  public DateTime Created { get; set; }   
}

public class Company : BaseClass
{
  [JsonProperty(&quot;n&quot;)]
  public string Name { get; set; }

  [JsonProperty(&quot;p&quot;)]
  public string Password { get; set; }
}
</code></pre>
<p>For a complete list of usage examples see the <a href="https://github.com/nicolaiarocci/Eve.NET/blob/master/README.md">README</a></p>
<h2 id="current-status-and-license">Current Status and License</h2>
<p>Eve.NET is a <a href="http://nicolaiarocci.com">Nicola Iarocci</a> and <a href="http://gestionaleamica.com">Gestionali Amica</a> open source project distributed under the <a href="https://github.com/nicolaiarocci/Eve.NET/blob/master/LICENSE.txt">BSD license</a>. It is a work in progress but it’s pretty stable already. It is <a href="https://www.nuget.org/packages/Eve.NET/">available on NuGet</a> as a pre-release package. The test suite can be run against a local Eve instance or, if you don’t grok Python yet, you can use a free test instance which is available online, see the <a href="https://github.com/nicolaiarocci/Eve.NET/blob/master/README.md">README</a> for details.</p>
<p>Did you read this far? Well thank you! And please, consider showing your appreciation by starring the project on <a href="https://github.com/nicolaiarocci/Eve.NET">GitHub</a>. It feels so lonely out there.</p>
<p>If you want to get in touch, I’m <a href="https://twitter.com/nicolaiarocci">@nicolaiarocci</a> on Twitter.</p>]]></content:encoded>
    </item>
    <item>
      <title>Taming Portable Class Libraries and .NET Framework 4</title>
      <link>https://nicolaiarocci.com/taming-portable-class-libraries-and-net-framework-4/</link>
      <pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/taming-portable-class-libraries-and-net-framework-4/</guid>
      <description>&lt;p&gt;If your project is a Portable Class Library and you want it to run with the .NET Framework 4 well, you are in for a few surprises. Especially so if you are using InstallShield for building your deployment package. We’ve been going through this a few days ago and it’s been kind of a wild ride. I thought I could pin the whole thing down so that others might enjoy a painless journey through all this mess.&lt;/p&gt;
&lt;h2 id=&#34;portable-class-libraries-and-net-framework-4&#34;&gt;Portable Class Libraries and .NET Framework 4&lt;/h2&gt;
&lt;p&gt;The first thing you should know is that while the .NET Framework 4 does support PCLs, in fact it won’t run them without a patch. For whatever reason, Microsoft decided that PCL compatibility wasn’t a worth a 4.0.4 update. That leaves us with the need to not only make sure that target machines are running the up-to-date .NET4 release (v4.0.3) but also that they’ve been updated with &lt;!-- raw HTML omitted --&gt;KB2468871&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;You might be wondering why this is an issue in the first place. We could simply install the .NET Framework 4.5 which is backward compatible with the .NET4 and includes the afore mentioned KB2468871. Even better, we could just target the .NET 4.5 on our PCL. Problem is that besides iOS, Android, WinPhone and Silverlight we also want our libraries to run seamlessly on as many Windows editions as possible, Windows XP included. Here is the catch: &lt;!-- raw HTML omitted --&gt;.NET4 is the last framework version to run on Windows XP&lt;!-- raw HTML omitted --&gt;. And yes, we got the memo, Microsoft officially abandoned Windows XP a while ago so why bother? Well it turns out that millions of users are still running XP, especially so in the enterprise and SMB. These PCL are targeting exactly that, precisely the accounting software segment, and believe me there’s a huge number of users happily invoicing and accounting on their &lt;em&gt;old-fart-but-still-splendidly-doing-its-job-for-cheap&lt;/em&gt; boxes. Oh and the .NET Framework 3.5 is not an option as it doesn’t support Portable Classes at all.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>If your project is a Portable Class Library and you want it to run with the .NET Framework 4 well, you are in for a few surprises. Especially so if you are using InstallShield for building your deployment package. We’ve been going through this a few days ago and it’s been kind of a wild ride. I thought I could pin the whole thing down so that others might enjoy a painless journey through all this mess.</p>
<h2 id="portable-class-libraries-and-net-framework-4">Portable Class Libraries and .NET Framework 4</h2>
<p>The first thing you should know is that while the .NET Framework 4 does support PCLs, in fact it won’t run them without a patch. For whatever reason, Microsoft decided that PCL compatibility wasn’t a worth a 4.0.4 update. That leaves us with the need to not only make sure that target machines are running the up-to-date .NET4 release (v4.0.3) but also that they’ve been updated with <!-- raw HTML omitted -->KB2468871<!-- raw HTML omitted -->.</p>
<p>You might be wondering why this is an issue in the first place. We could simply install the .NET Framework 4.5 which is backward compatible with the .NET4 and includes the afore mentioned KB2468871. Even better, we could just target the .NET 4.5 on our PCL. Problem is that besides iOS, Android, WinPhone and Silverlight we also want our libraries to run seamlessly on as many Windows editions as possible, Windows XP included. Here is the catch: <!-- raw HTML omitted -->.NET4 is the last framework version to run on Windows XP<!-- raw HTML omitted -->. And yes, we got the memo, Microsoft officially abandoned Windows XP a while ago so why bother? Well it turns out that millions of users are still running XP, especially so in the enterprise and SMB. These PCL are targeting exactly that, precisely the accounting software segment, and believe me there’s a huge number of users happily invoicing and accounting on their <em>old-fart-but-still-splendidly-doing-its-job-for-cheap</em> boxes. Oh and the .NET Framework 3.5 is not an option as it doesn’t support Portable Classes at all.</p>
<p>All things considered, it’s still good news. We can build PCL which run everywhere, Windows XP included. We only need to make sure that both the .NET Framework 4 and the KB2468871 are installed on target machines. Easy enough, right?</p>
<h2 id="the-strange-story-about-kb2468871-installshield-prerequisite">The strange story about KB2468871 InstallShield Prerequisite</h2>
<p>We rely on InstallShield for building our distributions, so I was delighted to find that it comes with a KB2468871 Setup Prerequisite out of the box. All we had to do was add the prerequisite to our setup and we would be done. In fact, our first test was encouraging. We ran the setup on a pristine Windows XP. It installed the .NET Framework 4, then the KB patch and then, finally, our own application which included the PCL libraries. Everything was running smoothly. We then moved on to test the same identical build on a fresh Windows 7 machine. Again, it installed the .NET4 just fine… and then it crashed. Actually, the setup itself did not crash. It was the KB2468871 which was crashing while the main setup itself was left idle, waiting for the KB install to complete. So, what was going on there?</p>
<h3 id="cpu-architecture-does-matter">CPU Architecture Does Matter</h3>
<p>To make a long story short, after a lot of investigation and an embarrassingly high number of tests we found that our setup was only crashing on 64bit editions of Windows. It turned out that the issue was with the InstallShield Prerequisite itself. It was broken. In a bad way.</p>
<p>The KB2468871 comes in three flavors:</p>
<ul>
<li>NDP40-KB2468871-v2-x86.exe</li>
<li>NDP40-KB2468871-v2-IA64.exe</li>
<li>NDP40-KB2468871-v2-x64.exe</li>
</ul>
<p>Three executables, each one targeting a different architecture. Upon inspection of the stock prerequisite however, we discovered that it was launching the x86 executable no matter what the target edition of Windows was. That explained the crashes on x64 systems.</p>
<p>The solution was to create a new custom prerequisite which would download and launch the x64 KB edition on 64bit systems. We then had to update the stock prerequisite too, so that it would only run on x86 systems. So we now had two specialized KB2468871 prerequisites. One for 32 and another for 64 bit systems. They would be launched alternatively depending on the target system. We proceeded to add them both to our InstallShield project and rebuild it. Then we went and tested it against freshly installed Windows. It installed the .NET Framework 4, then totally skipped the KB (like the prerequisite didn’t even exist) and finally proceeded to install both PCL and main application – which of course would crash on execution as there was no KB on the system.</p>
<p>Beaten, but not ready to admit defeat yet, we went back to the drawing board.</p>
<h3 id="execution-order-does-matter-or-not">Execution Order Does Matter. Or Not.</h3>
<p>Our custom launch conditions for both our KB prerequisites were there, and they looked good. Then there was this other conditional triplet. It was validating two registry keys and then making sure that mscorlib.dll existed in .NET4 folder. So, the idea was that the KB installation should only be executed if the .NET4 was on the target system. That sounded perfectly reasonable. As we could configure the order in which prerequisites were executed, we just had to make sure that the .NET4 prerequisite was assigned a higher priority, so it would run before the KB prerequisites themselves. The prerequisites order was fixed, a new setup was built and… nothing changed. KB were still not being installed.</p>
<p>Prerequistes order did not seem to matter. In fact, if we removed that check-if-net4-is-there conditional triplet the KB would install. However that was not an acceptable solution because then the KB would <em>always</em> be installed, causing a reinstall (and a waste of time and resources) on most systems.</p>
<p>Then I had my epiphany. Maybe launch conditions were being evaluated all together at boot time, for all prerequisites, before they were installed and regardless of their execution order? Non-sense you might think (I did). Why allow me to set an execution order in the first place, if launch conditions for each item are not going to be evaluated in <em>that</em> order? Luckily, validating this theory was going to be quick and easy. We just had to reboot the system after the faulty installation was completed, then run the setup again. And guess what? On second run, after the reboot, the KB installation would be executed without a glitch. Bingo. Since the .NET4 had been installed on the previous run, now registry keys were there and the mscorlib.dll was in the right place, so the KB launch conditions were finally met.</p>
<p>We ended up replacing that bogus conditional triplet completely and changing the validation logic. Instead of checking if the .NET4 was installed (on pristine XP and Windows 7 systems, which don’t have the .NET Framework 4 preinstalled, <em>it just could not be there</em> <em>yet</em>), we were now simply checking if KB itself was installed. After all it just needs to be there, no matter the Windows or framework version (on .NET 4.5+ the KB will be installed by default).</p>
<p>So now, armed with our brand new custom KB2468871-x64 prerequisite and a totally re-imaginated set of launch conditions we were finally able to build a setup that would deliver a fully functional Portable Class Library which would run on all possible Windows: XP, Windows 7, Windows 8… independently of the CPU architecture. Victory!</p>
<p>If you read this far you probably noticed that I didn’t include instructions on how to apply these changes to the stock prerequisite, let alone create a new one. You can find those instructions on the InstallShield website, or you can simply use <a href="https://gist.github.com/nicolaiarocci/34f9c167a4ec1adf591a">our modified prerequisites</a>. Of course we are providing them without any guarantee that they will work for you. They did for us, and that’s it.</p>
<h2 id="too-long-didn8217t-read">Too long; didn’t read</h2>
<ol>
<li>Portable Class Libraries won’t run on plain vanilla .NET Framework 4.0 unless KB2468871 is installed;</li>
<li>If using InstallShield KB2468871 Setup Prerequiste you’re in for a wild ride;</li>
<li>However, and until an official fix is released, you can opt to use our modified prerequisites instead.</li>
<li>Get the <a href="https://gist.github.com/nicolaiarocci/34f9c167a4ec1adf591a#file-microsoft-net-framework-4-0-kb2468871-x64-prq">custom KB2468871 (64x) InstallShield prerequisite</a>.</li>
<li>Get the <a href="https://gist.github.com/nicolaiarocci/34f9c167a4ec1adf591a#file-microsoft-net-framework-4-0-kb2468871-prq">custom KB2468871 (x86) prerequisite</a>.</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>The stock KB2468871 InstallShield prerequiste has been out for a good while so I’m baffled that to this day I still cannot find any reference about these issues on the internet. Portable Class Libraries are probably still a niche and the fact that most of Macrovision KB resources are hidden behind a wall does not help. Soon or later an official prerequisite update will be released. Until then, feel free to use our mods.</p>
<p>I’ll just add that if we were dealing with an Open Source project, we’d just open a pull request and be done with it.</p>
<p>If you want to get in touch, I’m <a href="https://twitter.com/nicolaiarocci">@nicolaiarocci</a> on Twitter.</p>]]></content:encoded>
    </item>
    <item>
      <title>Why I Left the .NET Framework</title>
      <link>https://nicolaiarocci.com/left-net-framework/</link>
      <pubDate>Mon, 03 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/left-net-framework/</guid>
      <description>I can’t say I left the .NET Framework altogether as our main app was developed with .NET and we still maintain it on daily basis. Whenever applicable however, all the recent stuff is being done outside the walled garden.
The following Jonathan Oliver totally resonates with my experience.
The .NET Framework was good. Really good. Until it wasn’t. Why did I leave .NET? In short, it constrained our ability to choose (which is a huge deal for me) and turned our focus inward toward the perceived safety of the nest instead of the helping us experiencing all of the possibilities out there in the big, wide world.</description>
      <content:encoded><![CDATA[<p>I can’t say I left the .NET Framework altogether as our main app was developed with .NET and we still maintain it on daily basis. Whenever applicable however, all the recent stuff is being done outside the walled garden.</p>
<p>The following Jonathan Oliver totally resonates with my experience.</p>
<blockquote>
<p>The .NET Framework was good. Really good. Until it wasn’t. Why did I leave .NET? In short, it constrained our ability to choose (which is a huge deal for me) and turned our focus inward toward the perceived safety of the nest instead of the helping us experiencing all of the possibilities out there in the big, wide world.</p>
</blockquote>
<p>via <a href="http://blog.jonathanoliver.com/why-i-left-dot-net/">Why I Left the .NET Framework</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Ci sono più offerte di lavoro che Programmatori .NET</title>
      <link>https://nicolaiarocci.com/ci-sono-piu-offerte-di-lavoro-che-programmatori-net/</link>
      <pubDate>Wed, 02 Nov 2011 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/ci-sono-piu-offerte-di-lavoro-che-programmatori-net/</guid>
      <description>&lt;p&gt;Ai primi di ottobre &lt;!-- raw HTML omitted --&gt;TechCrunch&lt;!-- raw HTML omitted --&gt; riportava una notizia interessante: negli Stati Uniti ci sarebbe carenza di sviluppatori .NET. La piattaforma di recruitment Dice dichiara che le offerte di lavoro .NET aumentano del 25% ogni anno, e che la gran parte delle ricerche sui loro database riguarda skill .NET. Ai primi di ottobre 2011 sarebbero state oltre 10.000 le richieste inevase di figure professionali .NET.&lt;/p&gt;
&lt;p&gt;Notizie di questo tipo vanno prese con beneficio di inventario anche se in questo caso una conferma indiretta viene da WANTED Analytics, che a Settembre ha pubblicato un &lt;!-- raw HTML omitted --&gt;report&lt;!-- raw HTML omitted --&gt; indipendente che sembra giungere alle stesse conclusioni. Anche i &lt;!-- raw HTML omitted --&gt;commenti&lt;!-- raw HTML omitted --&gt; all’articolo di TechCrunch sono confortanti: ci sono aziende che ammettono di essere a caccia di sviluppatori .NET e ci sono programmatori che confermano di ricevere continuamente offerte di lavoro (non mancano quelli che sono passati ad altri linguaggi e non se ne pentono).&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Ai primi di ottobre <!-- raw HTML omitted -->TechCrunch<!-- raw HTML omitted --> riportava una notizia interessante: negli Stati Uniti ci sarebbe carenza di sviluppatori .NET. La piattaforma di recruitment Dice dichiara che le offerte di lavoro .NET aumentano del 25% ogni anno, e che la gran parte delle ricerche sui loro database riguarda skill .NET. Ai primi di ottobre 2011 sarebbero state oltre 10.000 le richieste inevase di figure professionali .NET.</p>
<p>Notizie di questo tipo vanno prese con beneficio di inventario anche se in questo caso una conferma indiretta viene da WANTED Analytics, che a Settembre ha pubblicato un <!-- raw HTML omitted -->report<!-- raw HTML omitted --> indipendente che sembra giungere alle stesse conclusioni. Anche i <!-- raw HTML omitted -->commenti<!-- raw HTML omitted --> all’articolo di TechCrunch sono confortanti: ci sono aziende che ammettono di essere a caccia di sviluppatori .NET e ci sono programmatori che confermano di ricevere continuamente offerte di lavoro (non mancano quelli che sono passati ad altri linguaggi e non se ne pentono).</p>
<!-- raw HTML omitted -->
<h2 id="perché-la-carenza-di-programmatori-net">Perché la carenza di Programmatori .NET?</h2>
<p>Secondo TechCrunch gli sviluppatori .NET tendono a spostarsi su altre piattaforme perché temono di rimanere tagliati fuori dal mercato, visto che la tendenza del momento vuole i linguaggi open source far la parte del leone. Ci sarebbe inoltre una motivazione economica. Secondo Dice negli Stati Uniti i programmatori .NET guadagnano in media $83.000, mentre quelli Java arrivano a $91.000.</p>
<h2 id="e-in-italia">E in Italia?</h2>
<p>Per quanto ne so non esistono dati sulla situazione italiana (se ne sapete qualcosa fatemelo sapere: li segnalerò volentieri). Un mio <!-- raw HTML omitted -->rapido test<!-- raw HTML omitted --> ha prodotto risultati incoraggianti: oltre 30 pagine di offerte di lavoro in ambito .NET. Non mi intendo di recruitment ma senz’altro è facile rilevare che, come negli Stati Uniti, anche da noi girano migliaia di applicazioni legacy .NET che assicureranno continuità di impiego anche nel lungo periodo. Probabilmente, ma si tratta di una mia sensazione, nel nostro paese la piattaforma Microsoft è meno diffusa in ambito Enterprise. Senz’altro la media dei salari IT europei (e italiani soprattutto) è più bassa di quella americana.</p>
<p>Anche da noi la tendenza è comunque verso l’open source e d’altra parte la stessa Microsoft <!-- raw HTML omitted -->si muove<!-- raw HTML omitted --> da anni anche in questa direzione pur senza intaccare il suo modello di business principale. Tempo fa mi sono dilungato sul <a href="http://nicolaiarocci.com/perche-le-web-startup-non-amano-net-framework/" title="Perché le Web Startup non amano il .NET Framework?">perché le web startup non amano il .NET Framework</a> e tutto sommato credo che quelle conclusioni siano valide tutt’ora. Certo mi fa piacere apprendere che la piattaforma sulla quale ho investito oltre quindici anni di carriera sta vivendo, almeno dal punto di vista del recruitment, una seconda giovinezza.</p>]]></content:encoded>
    </item>
    <item>
      <title>Mono 2.10.3 gira su OS X Lion (ed è vivo e vegeto)</title>
      <link>https://nicolaiarocci.com/mono-2-10-3-gira-su-os-x-lion-ed-e-vivo-e-vegeto/</link>
      <pubDate>Fri, 05 Aug 2011 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/mono-2-10-3-gira-su-os-x-lion-ed-e-vivo-e-vegeto/</guid>
      <description>Xamarin, la compagnia che ha preso in mano il Progetto Mono dopo l’addio di Novell, ha appena rilasciato Mono 2.10.3. Ne da annuncio lo stesso Manuel de Icaza, storico deux-ex-machina del progetto e fondatore di Xamarin.
Si tratta per lo più di una versione di manutenzione che risolve numerosi problemi, primo fra tutti l’instabilità di Mono sull’ultima versione di MacOS X Lion.
L’importanza di questo aggiornamento va ben oltre le sue caratteristiche tecniche.</description>
      <content:encoded><![CDATA[<p><!-- raw HTML omitted -->Xamarin, la compagnia che <a href="http://nicolaiarocci.com/il-progetto-mono-salvato-in-extremis-dal-suo-fondatore/" title="Progetto Mono salvato dal suo fondatore">ha preso in mano il Progetto Mono</a> dopo l’addio di Novell, ha appena rilasciato Mono 2.10.3. Ne da annuncio lo stesso Manuel de Icaza, storico deux-ex-machina del progetto e fondatore di Xamarin.</p>
<p>Si tratta per lo più di una versione di manutenzione che <!-- raw HTML omitted -->risolve numerosi problemi<!-- raw HTML omitted -->, primo fra tutti l’instabilità di Mono sull’ultima versione di MacOS X Lion.</p>
<p>L’importanza di questo aggiornamento va ben oltre le sue caratteristiche tecniche. Il titolo stesso dell’<!-- raw HTML omitted -->annuncio<!-- raw HTML omitted --> (And We Are Back) parla chiaro: si tratta di un segnale di continuità importante che Xamarin lancia alla comunità mondiale di sviluppatori Mono. Per informazioni sul progetto e sulle sue vicissitudini recenti vi invito a leggere l’<a href="http://nicolaiarocci.com/il-progetto-mono-salvato-in-extremis-dal-suo-fondatore/" title="Il Progetto Mono salvato in extremis dal suo fondatore">articolo sul salvataggio di Mono</a> che ho scritto qualche tempo fa.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Windows 8 e i dubbi sul destino di Silverlight</title>
      <link>https://nicolaiarocci.com/windows-8-e-i-dubbi-sul-destino-di-silverlight/</link>
      <pubDate>Wed, 08 Jun 2011 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/windows-8-e-i-dubbi-sul-destino-di-silverlight/</guid>
      <description>&lt;p&gt;Con un &lt;!-- raw HTML omitted --&gt;filmato di 10 minuti&lt;!-- raw HTML omitted --&gt; Microsoft ha presentato in anteprima il nuovo Windows 8. A molti non è sfuggita l’enfasi su HTML5 e JavaScript, annunciate come le tecnologie con le quali costruire le nuove accattivanti applicazioni per Windows 8. Il fatto che non si faccia cenno a Silverlight, WPF o .NET sta causando un bel po’ di preoccupazione.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;</description>
      <content:encoded><![CDATA[<p>Con un <!-- raw HTML omitted -->filmato di 10 minuti<!-- raw HTML omitted --> Microsoft ha presentato in anteprima il nuovo Windows 8. A molti non è sfuggita l’enfasi su HTML5 e JavaScript, annunciate come le tecnologie con le quali costruire le nuove accattivanti applicazioni per Windows 8. Il fatto che non si faccia cenno a Silverlight, WPF o .NET sta causando un bel po’ di preoccupazione.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<blockquote>
<p>You all saw a very small technology demo of Windows 8, and a brief press release. We’re all being quiet right now because we can’t comment on this. It’s not because we don’t care, aren’t listening, have given up, or are agreeing or disagreeing with you on something. All I can say for now is to please wait until September. If we say more before then, that will be great, but there are no promises (and I’m not aware of any plans) to say more right now. I’m very sorry that there’s nothing else to share at the moment. I know that answer is terrible, but it’s all that we can say right now. Seriously.</p>
</blockquote>
<p>Quindi bocche cucite, almeno fino a Settembre. In seguito Brown interviene ancora, tirato per la giacchetta dai molti che hanno interpretato le sue parole nelle maniere più disparate:</p>
<blockquote>
<p>This whole thing has blown way out of proportion. Base your information on our primary sources (like our press release), not on third party speculation. That’s not to minimize how everyone feels, but keep in mind that Windows 8 itself is still a ways off from retail, and even much further away from internal IT adoption. The 8 weeks until //build/ is a pretty small amount of time to wait in comparison.</p>
<p>Take some vacation time this summer, and look forward to the //build/ conference. Stop speculating based on just a small demo of some very cool new technology. Tell your management to do the same: if they’re basing your project work for the next X years on the results of a quick demo for an unreleased operating system, then they are doing you and your company a real disservice.</p>
</blockquote>
<p>Windows 8 è ben lontano dall’essere pronto, e quel che si è visto nel filmato è solo la prima di una serie di anteprime. Inutile fare speculazioni basate su una demo di pochi minuti. Questa estate godetevi le vacanza, ne riparleremo al vostro ritorno. Dite ai vostri manager di fare lo stesso. <strong>Se stanno pianificando il lavoro dei prossimi anni basandosi solo su una breve anteprima di un sistema operativo non ancora pronto, allora stanno facendo un grave errore</strong>.</p>
<h2 id="non-è-mica-la-prima-volta">Non è mica la prima volta</h2>
<p>Niente da obiettare da parte mia. Mi limito a rilevare che non è la prima volta che il futuro delle piattaforme Microsoft viene messo in discussione anche dallo stesso personale Microsoft. Leggendaria la gaffe di <!-- raw HTML omitted -->Bob Muglia<!-- raw HTML omitted -->, Vice President for Server and Tools Businesses (mica cotica) riportata fedelmente da <!-- raw HTML omitted -->Mary Jo Foley<!-- raw HTML omitted -->:</p>
<blockquote>
<p>“Silverlight is our development platform for Windows Phone,” he said. Silverlight also has some “sweet spots” in media and line-of-business applications, he said.</p>
<p>But when it comes to touting Silverlight as Microsoft’s vehicle for delivering a cross-platform runtime, “<strong>our strategy has shifted</strong>,” Muglia told me.</p>
<p>Silverlight will continue to be a cross-platform solution, working on a variety of operating system/browser platforms, going forward, he said. “But <strong>HTML is the only true cross platform solution for everything</strong>, including (Apple’s) iOS platform,” Muglia said.</p>
</blockquote>
<p>All’epoca fu necessario un comunicato congiunto di Steve Ballmer (CEO Microsoft) e del penitente Bob Muglia per acquietare la tempesta scatenata da queste parole. Sarà un caso che recentemente Muglia abbia annunciato il trasloco ad altri lidi?</p>
<p>Il fatto è che le tante aziende che hanno investito molto e – ahimé – esclusivamente sulle piattaforme Microsoft ora guardano con terrore a uno scenario, per quanto improbabile, che non veda Silverlight, WPF e .NET in cima all’agenda della casa madre.</p>
<h2 id="img-classalignright-titlehtml5-logo-srchttpi2wpcomnicolaiaroccicomwp-contentuploadshtml5-logopngresize1282c150-althtml5-logo-data-recalc-dims1-il-futuro-del-web-è-silverlight"><!-- raw HTML omitted -->Il futuro del Web è Silverlight?</h2>
<p>Personalmente non ho dubbi sul fatto che il futuro delle piattaforme tecnologiche Microsoft sarà garantito. La domanda cruciale che ogni programmatore dovrebbe porsi è un’altra. Il futuro del web è Silverlight? In soldoni, su cosa vale la pena investire tempo, risorse e denaro? Temo la risposta non sia quella che i programmatori Silverlight vorrebbero sentire.</p>]]></content:encoded>
    </item>
    <item>
      <title>Il Progetto Mono salvato in extremis dal suo fondatore</title>
      <link>https://nicolaiarocci.com/il-progetto-mono-salvato-in-extremis-dal-suo-fondatore/</link>
      <pubDate>Tue, 17 May 2011 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/il-progetto-mono-salvato-in-extremis-dal-suo-fondatore/</guid>
      <description>&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Sono settimane di passione per il &lt;strong&gt;&lt;!-- raw HTML omitted --&gt;progetto Mono&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt;, celeberrima versione open source e multi piattaforma del Microsoft .NET Framework. All’inizio del mese Attachmate (proprietaria di Novell, sponsor storico del progetto) ha &lt;!-- raw HTML omitted --&gt;improvvisamente licenziato&lt;!-- raw HTML omitted --&gt; l’intero team di ingegneri al lavoro su Mono.&lt;/p&gt;
&lt;p&gt;L’annuncio ha gettato nel panico la comunità internazionale di sviluppatori Mono. Dal 2004, anno di nascita del progetto, migliaia di grandi e piccole software house hanno adottato la piattaforma per lo sviluppo rapido di soluzioni cross-platform. Purtroppo salvo rare eccezioni è frequente che progetti open source nati o assorbiti in grandi organizzazioni commerciali finiscano per essere abbandonati.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><!-- raw HTML omitted -->Sono settimane di passione per il <strong><!-- raw HTML omitted -->progetto Mono<!-- raw HTML omitted --></strong>, celeberrima versione open source e multi piattaforma del Microsoft .NET Framework. All’inizio del mese Attachmate (proprietaria di Novell, sponsor storico del progetto) ha <!-- raw HTML omitted -->improvvisamente licenziato<!-- raw HTML omitted --> l’intero team di ingegneri al lavoro su Mono.</p>
<p>L’annuncio ha gettato nel panico la comunità internazionale di sviluppatori Mono. Dal 2004, anno di nascita del progetto, migliaia di grandi e piccole software house hanno adottato la piattaforma per lo sviluppo rapido di soluzioni cross-platform. Purtroppo salvo rare eccezioni è frequente che progetti open source nati o assorbiti in grandi organizzazioni commerciali finiscano per essere abbandonati.</p>
<h2 id="xamarin-al-salvataggio-di-mono">Xamarin al salvataggio di Mono</h2>
<p><!-- raw HTML omitted -->Fortunatamente non sembra essere questo il destino di Mono. Miguel de Icaza, il creatore di Mono, ha <!-- raw HTML omitted -->annunciato<!-- raw HTML omitted --> ieri la fondazione di <strong><!-- raw HTML omitted -->Xamarin<!-- raw HTML omitted --></strong>, startup indipendente interamente dedicata a Mono. Sembra di capire che gran parte del team originale stia confluendo nella nuova realtà, che per ovvie ragioni di copyright dovrà per prima cosa lanciare prodotti nuovi destinati a sostituire quelli a marchio Novell. Xamarin è al lavoro sull’allestimento di nuovi componenti .NET per iOS e Android e continuerà a garantire, supportare e sviluppare le piattaforme open source Mono e Moonlight.</p>
<p>La comunità di sviluppatori, incluso chi scrive, aveva accolto con un certo disappunto il lancio delle edizioni per iOS (<!-- raw HTML omitted -->MonoTouch<!-- raw HTML omitted -->) e Android (<!-- raw HTML omitted -->Mono for Android<!-- raw HTML omitted -->) della piattaforma. Si trattava infatti di versioni commerciali, anche piuttosto costose. Resta da vedere se e come Xamarin deciderà di riposizionare l’offerta di questi due importanti componenti. Ora che non c’è più una multinazionale dietro a Mono non mi sorprenderebbe affatto un ritocco verso il basso dei prezzi di listino.</p>]]></content:encoded>
    </item>
    <item>
      <title>Il Formato Valuta in ASP.NET quando il sito è all’estero</title>
      <link>https://nicolaiarocci.com/il-formato-valuta-in-asp-net-quando-il-sito-e-allestero/</link>
      <pubDate>Mon, 28 Mar 2011 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/il-formato-valuta-in-asp-net-quando-il-sito-e-allestero/</guid>
      <description>&lt;p&gt;Una settimana fa abbiamo lanciato il nuovo sito del &lt;a href=&#34;http://gestionaleamica.com&#34; title=&#34;Gestionale Amica&#34;&gt;Gestionale Amica&lt;/a&gt;, il nostro prodotto di punta. E’ scritto in &lt;strong&gt;ASP.NET&lt;/strong&gt; ed è dotato di un sistema di e-commerce sviluppato su misura. Carrello della spesa, checkout, pagamenti con carta di credito, tracciamento ordini, profilo utenti… un lavoro del quale sono piuttosto orgoglioso. Man mano che il giorno del debutto si avvicinava cresceva l’eccitazione; ero impaziente di vederlo funzionare questo gioiellino. Finalmente il 21 marzo è arrivato e con la primavera è sbocciato il nuovo sito. Come è andata? Bene! A parte un piccolo dettaglio. Il mio gioiellino vendeva in Dollari ($) anziché in Euro (€)&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;</description>
      <content:encoded><![CDATA[<p>Una settimana fa abbiamo lanciato il nuovo sito del <a href="http://gestionaleamica.com" title="Gestionale Amica">Gestionale Amica</a>, il nostro prodotto di punta. E’ scritto in <strong>ASP.NET</strong> ed è dotato di un sistema di e-commerce sviluppato su misura. Carrello della spesa, checkout, pagamenti con carta di credito, tracciamento ordini, profilo utenti… un lavoro del quale sono piuttosto orgoglioso. Man mano che il giorno del debutto si avvicinava cresceva l’eccitazione; ero impaziente di vederlo funzionare questo gioiellino. Finalmente il 21 marzo è arrivato e con la primavera è sbocciato il nuovo sito. Come è andata? Bene! A parte un piccolo dettaglio. Il mio gioiellino vendeva in Dollari ($) anziché in Euro (€)</p>
<!-- raw HTML omitted -->
<h2 id="come-è-potuto-succedere">Come è potuto succedere?</h2>
<p>In fatto di localizzazione una pagina ASP.NET non è diversa da una normale applicazione WinForms. In assenza di indicazioni diverse il .NET Framework <strong>rappresenta le valute in base alle impostazioni internazionali del computer che lo ospita</strong>. Durante sviluppo e collaudo non abbiamo avuto problemi perché lavoravamo su server aziendali locali. Tuttavia il server di produzione è americano, ed è così che pubblicando il sito ci siamo regalati un bel cambiamento di valuta, il tutto senza toccare una linea di codice.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Restituisce <strong>€1.567,50</strong> in Italia e <strong>$1,567.50</strong> negli Stati Uniti. Probabilmente a questo punto vi starete dicendo due cose:</p>
<ol>
<li>Ma perché hai pubblicato un sito in italiano, per un pubblico italiano, negli Stati Uniti?</li>
<li>Te lo dovevi aspettare, cosa volevi che succedesse? Qualunque sviluppatore con un minimo di esperienza sa queste cose.</li>
</ol>
<p>A proposito del primo punto ci sarebbe da scrivere un articolo intero (e magari lo farò). Basti sapere per ora che, malgrado le apparenze, ci sono (anche) buone ragioni per pubblicare siti italiani all’estero. Sul secondo punto naturalmente avreste ragione. Il fatto è che, nel grande schema delle cose, sono proprio i piccoli dettagli quelli che possono sfuggire. Per fortuna porre rimedio è stato semplice e indolore. Vediamo.</p>
<h2 id="e8217-tutta-questione-di-culture">E’ tutta questione di Culture</h2>
<p>In ogni pagina ASP.NET è possibile impostare il valore delle proprietà <a href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.culture(v=VS.85).aspx"><strong>Culture</strong></a> e <a href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.uiculture(v=VS.85).aspx"><strong>UICulture</strong></a>. <!-- raw HTML omitted -->Culture<!-- raw HTML omitted --> determina l’output delle funzioni influenzate dalla cultura: date, numeri, valute, orari. <!-- raw HTML omitted -->UICulture<!-- raw HTML omitted --> istruisce la pagina su quali risorse culturali caricare.</p>
<h3 id="impostare-culture-e-uiculture-per-tutto-il-sito">Impostare Culture e UICulture per tutto il sito</h3>
<p>Intervenendo direttamente nel file Web.Config possiamo dire a ASP.NET quale è la cultura da usare in tutto il sito. In questo modo non dovremo preoccuparci di intervenire su ogni in pagina.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Attenzione alle maiuscole. <!-- raw HTML omitted -->uiCulture<!-- raw HTML omitted --> va bene; <!-- raw HTML omitted -->uiculture<!-- raw HTML omitted --> non va bene. Non sprecate mezz’ora per una sciocchezza del genere, l’ho già fatto io per voi.</p>
<h3 id="impostare-culture-e-uiculture-per-una-pagina">Impostare Culture e UICulture per una pagina</h3>
<p>Per modificare Culture e UICulture di una singola pagina è necessario impostare i corrispondenti attributi della direttiva <a href="http://msdn.microsoft.com/it-it/library/ydy4x04a(v=VS.85).aspx">@ Page</a></p>
<!-- raw HTML omitted -->
<p>Questa tecnica può naturalmente venire usata in abbinamento alla precedente anche se devo dire che non mi viene in mente un motivo, uno scenario valido in cui ciò potrebbe essere utile.</p>
<h3 id="adattare-l8217output-alla-lingua-del-browser">Adattare l’output alla lingua del browser</h3>
<p>Per adattare la cultura al linguaggio del browser che visita la pagina basta impostare <strong>UICulture</strong> e <strong>Culture</strong> su <strong>auto</strong> (non l’ho testato personalmente). E’ anche possibile cambiare la cultura dinamicamente via codice. Se volete sapere come fare consultate la <a href="http://msdn.microsoft.com/en-us/library/syy068tk.aspx">documentazione ufficiale</a>.</p>
<h2 id="dimenticavo8230">Dimenticavo…</h2>
<p>C’è un’altra cosuccia che non ha funzionato perfettamente al momento del debutto. Immaginate la sorpresa del cliente che, ordinando un prodotto da €499 + IVA, si è visto proporre l’addebito su carta di credito per <strong>€1 (uno)</strong> IVA inclusa. Ma questa è un’altra storia…</p>]]></content:encoded>
    </item>
    <item>
      <title>Il meglio di Stack Overflow in una collana di eBook gratuiti</title>
      <link>https://nicolaiarocci.com/il-meglio-di-stack-overflow-una-collana-di-ebook-gratuiti/</link>
      <pubDate>Wed, 02 Feb 2011 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/il-meglio-di-stack-overflow-una-collana-di-ebook-gratuiti/</guid>
      <description>&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;http://stackoverflow.com/&#34;&gt;&lt;strong&gt;Stack Overflow&lt;/strong&gt;&lt;/a&gt; è la risorsa per programmatori più famosa e apprezzata della Rete. Purtroppo domande e risposte pubblicate sul sito si succedono a un ritmo tale che è impossibile seguire gli aggiornamenti in tempo reale. Per questo motivo la gran parte degli utenti (sottoscritto incluso!) ricorre a Stack Overflow solo al momento del bisogno, quando è necessario trovare in fretta la soluzione a un problema critico. E’ un peccato perchè Stack Overflow è una vera &lt;strong&gt;minera di informazioni&lt;/strong&gt; &lt;strong&gt;preziose&lt;/strong&gt; e  meriterebbe maggiore attenzione…&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><!-- raw HTML omitted --><a href="http://stackoverflow.com/"><strong>Stack Overflow</strong></a> è la risorsa per programmatori più famosa e apprezzata della Rete. Purtroppo domande e risposte pubblicate sul sito si succedono a un ritmo tale che è impossibile seguire gli aggiornamenti in tempo reale. Per questo motivo la gran parte degli utenti (sottoscritto incluso!) ricorre a Stack Overflow solo al momento del bisogno, quando è necessario trovare in fretta la soluzione a un problema critico. E’ un peccato perchè Stack Overflow è una vera <strong>minera di informazioni</strong> <strong>preziose</strong> e  meriterebbe maggiore attenzione…</p>
<h2 id="gli-ebooks-di-stack-overflow">Gli eBooks di Stack Overflow</h2>
<h2 id="img-classsize-full-wp-image-794-alignright-titlestack-overflow-ebook-srchttpi2wpcomnicolaiaroccicomwp-contentuploads201102stack_overflow_ebookjpgfit2002c267-altstack-overflow-ebook-srcsethttpi2wpcomnicolaiaroccicomwp-contentuploads201102stack_overflow_ebookjpgw200-200w-httpi2wpcomnicolaiaroccicomwp-contentuploads201102stack_overflow_ebookjpgresize1122c150-112w-sizesmax-width-200px-100vw-200px-data-recalc-dims1-"><!-- raw HTML omitted --></h2>
<p>Recentemente <a href="http://meta.stackoverflow.com/users/893/greg-hewgill">Greg Hewkill</a> ha <a href="http://meta.stackoverflow.com/questions/74399/stack-overflow-top-20-tags-in-ebook-format">annunciato</a> la creazione di <a href="https://github.com/ghewgill/so-static">uno script open source</a> che genera un eBook per ognuno dei <strong>20 tag più popolari</strong> di Stack Overflow. Ogni libro contiene le domande (e risposte) più votate nella sua categoria. Il risultato è una vera e propria <a href="http://hewgill.com/~greg/stackoverflow/ebooks/"><em>collana Stack Overflow</em></a> che propone il <strong>concentrato dei migliori contenuti del sito</strong>. Basta scorrere i <em>titoli</em> (tag) per rendersi conto che ce n’è davvero per tutti i gusti. Ecco una lista parziale:</p>
<ul>
<li>JAVA (26M)</li>
<li>C# (24M), C++ (21M), C (11M)</li>
<li>NET (21M)</li>
<li>PYTHON (20M), DJANGO (1.6M)</li>
<li>JAVASCRIPT (15M)</li>
<li>PHP (9.6M)</li>
<li>IPHONE (7.3M)</li>
<li>HTML (6.0M), HTML 5 (3.0M)</li>
<li>CSS (5.7M)</li>
<li>JQUERY (5.5M)</li>
<li>ASP.NET (4.8M)</li>
<li>DATABASE (4.8M)</li>
<li>RUBY (3.1M), RUBY ON RAILS (1.9M)</li>
<li>ANDROID (2.7M)</li>
<li>MY SQL (2.5M), ORACLE (662K), SQL SERVER (2.8M), SQL (5.1M)</li>
<li>AJAX (2.1M)</li>
<li>COCOA (1.5M), OBJECTIVE-C (3.1M)</li>
<li>VB.NET (1.5M)</li>
<li>SILVERLIGHT (1.1M)</li>
<li>FLASH (509K)</li>
</ul>
<p>Alcuni sono di dimensioni notevoli il che ne fa ideali letture da divano! Il formato usato per confezionare gli eBook è <a href="http://www.mobipocket.com/dev/article.asp?BaseFolder=prcgen&amp;File=mobiformat.htm">Mobipocket</a>, compatibile con [<!-- raw HTML omitted --><a href="http://stackoverflow.com/"><strong>Stack Overflow</strong></a> è la risorsa per programmatori più famosa e apprezzata della Rete. Purtroppo domande e risposte pubblicate sul sito si succedono a un ritmo tale che è impossibile seguire gli aggiornamenti in tempo reale. Per questo motivo la gran parte degli utenti (sottoscritto incluso!) ricorre a Stack Overflow solo al momento del bisogno, quando è necessario trovare in fretta la soluzione a un problema critico. E’ un peccato perchè Stack Overflow è una vera <strong>minera di informazioni</strong> <strong>preziose</strong> e  meriterebbe maggiore attenzione…<!-- raw HTML omitted --></p>
<h2 id="gli-ebooks-di-stack-overflow-1">Gli eBooks di Stack Overflow</h2>
<h2 id="img-classsize-full-wp-image-794-alignright-titlestack-overflow-ebook-srchttpi2wpcomnicolaiaroccicomwp-contentuploads201102stack_overflow_ebookjpgfit2002c267-altstack-overflow-ebook-srcsethttpi2wpcomnicolaiaroccicomwp-contentuploads201102stack_overflow_ebookjpgw200-200w-httpi2wpcomnicolaiaroccicomwp-contentuploads201102stack_overflow_ebookjpgresize1122c150-112w-sizesmax-width-200px-100vw-200px-data-recalc-dims1--1"><!-- raw HTML omitted --></h2>
<p>Recentemente <a href="http://meta.stackoverflow.com/users/893/greg-hewgill">Greg Hewkill</a> ha <a href="http://meta.stackoverflow.com/questions/74399/stack-overflow-top-20-tags-in-ebook-format">annunciato</a> la creazione di <a href="https://github.com/ghewgill/so-static">uno script open source</a> che genera un eBook per ognuno dei <strong>20 tag più popolari</strong> di Stack Overflow. Ogni libro contiene le domande (e risposte) più votate nella sua categoria. Il risultato è una vera e propria <a href="http://hewgill.com/~greg/stackoverflow/ebooks/"><em>collana Stack Overflow</em></a> che propone il <strong>concentrato dei migliori contenuti del sito</strong>. Basta scorrere i <em>titoli</em> (tag) per rendersi conto che ce n’è davvero per tutti i gusti. Ecco una lista parziale:</p>
<ul>
<li>JAVA (26M)</li>
<li>C# (24M), C++ (21M), C (11M)</li>
<li>NET (21M)</li>
<li>PYTHON (20M), DJANGO (1.6M)</li>
<li>JAVASCRIPT (15M)</li>
<li>PHP (9.6M)</li>
<li>IPHONE (7.3M)</li>
<li>HTML (6.0M), HTML 5 (3.0M)</li>
<li>CSS (5.7M)</li>
<li>JQUERY (5.5M)</li>
<li>ASP.NET (4.8M)</li>
<li>DATABASE (4.8M)</li>
<li>RUBY (3.1M), RUBY ON RAILS (1.9M)</li>
<li>ANDROID (2.7M)</li>
<li>MY SQL (2.5M), ORACLE (662K), SQL SERVER (2.8M), SQL (5.1M)</li>
<li>AJAX (2.1M)</li>
<li>COCOA (1.5M), OBJECTIVE-C (3.1M)</li>
<li>VB.NET (1.5M)</li>
<li>SILVERLIGHT (1.1M)</li>
<li>FLASH (509K)</li>
</ul>
<p>Alcuni sono di dimensioni notevoli il che ne fa ideali letture da divano! Il formato usato per confezionare gli eBook è <a href="http://www.mobipocket.com/dev/article.asp?BaseFolder=prcgen&amp;File=mobiformat.htm">Mobipocket</a>, compatibile con]<a href="http://www.amazon.com/dp/B002Y27P3M/?tag=gocous-20&amp;hvadid=5729120357&amp;ref=pd_sl_blgu0nkyl_b">7</a> e credo con altri lettori di eBook. Ricordo che è possibile leggere i libri per Kindle con l’applicazione <strong>gratuita</strong> disponibile per <a href="http://www.amazon.com/gp/feature.html/ref=kcp_pc_mkt_lnd?docId=1000426311">PC</a>, <a href="http://www.amazon.com/gp/feature.html/ref=kcp_mac_mkt_lnd?docId=1000464931">Mac</a>, [<!-- raw HTML omitted --><a href="http://stackoverflow.com/"><strong>Stack Overflow</strong></a> è la risorsa per programmatori più famosa e apprezzata della Rete. Purtroppo domande e risposte pubblicate sul sito si succedono a un ritmo tale che è impossibile seguire gli aggiornamenti in tempo reale. Per questo motivo la gran parte degli utenti (sottoscritto incluso!) ricorre a Stack Overflow solo al momento del bisogno, quando è necessario trovare in fretta la soluzione a un problema critico. E’ un peccato perchè Stack Overflow è una vera <strong>minera di informazioni</strong> <strong>preziose</strong> e  meriterebbe maggiore attenzione…<!-- raw HTML omitted --></p>
<h2 id="gli-ebooks-di-stack-overflow-2">Gli eBooks di Stack Overflow</h2>
<h2 id="img-classsize-full-wp-image-794-alignright-titlestack-overflow-ebook-srchttpi2wpcomnicolaiaroccicomwp-contentuploads201102stack_overflow_ebookjpgfit2002c267-altstack-overflow-ebook-srcsethttpi2wpcomnicolaiaroccicomwp-contentuploads201102stack_overflow_ebookjpgw200-200w-httpi2wpcomnicolaiaroccicomwp-contentuploads201102stack_overflow_ebookjpgresize1122c150-112w-sizesmax-width-200px-100vw-200px-data-recalc-dims1--2"><!-- raw HTML omitted --></h2>
<p>Recentemente <a href="http://meta.stackoverflow.com/users/893/greg-hewgill">Greg Hewkill</a> ha <a href="http://meta.stackoverflow.com/questions/74399/stack-overflow-top-20-tags-in-ebook-format">annunciato</a> la creazione di <a href="https://github.com/ghewgill/so-static">uno script open source</a> che genera un eBook per ognuno dei <strong>20 tag più popolari</strong> di Stack Overflow. Ogni libro contiene le domande (e risposte) più votate nella sua categoria. Il risultato è una vera e propria <a href="http://hewgill.com/~greg/stackoverflow/ebooks/"><em>collana Stack Overflow</em></a> che propone il <strong>concentrato dei migliori contenuti del sito</strong>. Basta scorrere i <em>titoli</em> (tag) per rendersi conto che ce n’è davvero per tutti i gusti. Ecco una lista parziale:</p>
<ul>
<li>JAVA (26M)</li>
<li>C# (24M), C++ (21M), C (11M)</li>
<li>NET (21M)</li>
<li>PYTHON (20M), DJANGO (1.6M)</li>
<li>JAVASCRIPT (15M)</li>
<li>PHP (9.6M)</li>
<li>IPHONE (7.3M)</li>
<li>HTML (6.0M), HTML 5 (3.0M)</li>
<li>CSS (5.7M)</li>
<li>JQUERY (5.5M)</li>
<li>ASP.NET (4.8M)</li>
<li>DATABASE (4.8M)</li>
<li>RUBY (3.1M), RUBY ON RAILS (1.9M)</li>
<li>ANDROID (2.7M)</li>
<li>MY SQL (2.5M), ORACLE (662K), SQL SERVER (2.8M), SQL (5.1M)</li>
<li>AJAX (2.1M)</li>
<li>COCOA (1.5M), OBJECTIVE-C (3.1M)</li>
<li>VB.NET (1.5M)</li>
<li>SILVERLIGHT (1.1M)</li>
<li>FLASH (509K)</li>
</ul>
<p>Alcuni sono di dimensioni notevoli il che ne fa ideali letture da divano! Il formato usato per confezionare gli eBook è <a href="http://www.mobipocket.com/dev/article.asp?BaseFolder=prcgen&amp;File=mobiformat.htm">Mobipocket</a>, compatibile con [<!-- raw HTML omitted --><a href="http://stackoverflow.com/"><strong>Stack Overflow</strong></a> è la risorsa per programmatori più famosa e apprezzata della Rete. Purtroppo domande e risposte pubblicate sul sito si succedono a un ritmo tale che è impossibile seguire gli aggiornamenti in tempo reale. Per questo motivo la gran parte degli utenti (sottoscritto incluso!) ricorre a Stack Overflow solo al momento del bisogno, quando è necessario trovare in fretta la soluzione a un problema critico. E’ un peccato perchè Stack Overflow è una vera <strong>minera di informazioni</strong> <strong>preziose</strong> e  meriterebbe maggiore attenzione…<!-- raw HTML omitted --></p>
<h2 id="gli-ebooks-di-stack-overflow-3">Gli eBooks di Stack Overflow</h2>
<h2 id="img-classsize-full-wp-image-794-alignright-titlestack-overflow-ebook-srchttpi2wpcomnicolaiaroccicomwp-contentuploads201102stack_overflow_ebookjpgfit2002c267-altstack-overflow-ebook-srcsethttpi2wpcomnicolaiaroccicomwp-contentuploads201102stack_overflow_ebookjpgw200-200w-httpi2wpcomnicolaiaroccicomwp-contentuploads201102stack_overflow_ebookjpgresize1122c150-112w-sizesmax-width-200px-100vw-200px-data-recalc-dims1--3"><!-- raw HTML omitted --></h2>
<p>Recentemente <a href="http://meta.stackoverflow.com/users/893/greg-hewgill">Greg Hewkill</a> ha <a href="http://meta.stackoverflow.com/questions/74399/stack-overflow-top-20-tags-in-ebook-format">annunciato</a> la creazione di <a href="https://github.com/ghewgill/so-static">uno script open source</a> che genera un eBook per ognuno dei <strong>20 tag più popolari</strong> di Stack Overflow. Ogni libro contiene le domande (e risposte) più votate nella sua categoria. Il risultato è una vera e propria <a href="http://hewgill.com/~greg/stackoverflow/ebooks/"><em>collana Stack Overflow</em></a> che propone il <strong>concentrato dei migliori contenuti del sito</strong>. Basta scorrere i <em>titoli</em> (tag) per rendersi conto che ce n’è davvero per tutti i gusti. Ecco una lista parziale:</p>
<ul>
<li>JAVA (26M)</li>
<li>C# (24M), C++ (21M), C (11M)</li>
<li>NET (21M)</li>
<li>PYTHON (20M), DJANGO (1.6M)</li>
<li>JAVASCRIPT (15M)</li>
<li>PHP (9.6M)</li>
<li>IPHONE (7.3M)</li>
<li>HTML (6.0M), HTML 5 (3.0M)</li>
<li>CSS (5.7M)</li>
<li>JQUERY (5.5M)</li>
<li>ASP.NET (4.8M)</li>
<li>DATABASE (4.8M)</li>
<li>RUBY (3.1M), RUBY ON RAILS (1.9M)</li>
<li>ANDROID (2.7M)</li>
<li>MY SQL (2.5M), ORACLE (662K), SQL SERVER (2.8M), SQL (5.1M)</li>
<li>AJAX (2.1M)</li>
<li>COCOA (1.5M), OBJECTIVE-C (3.1M)</li>
<li>VB.NET (1.5M)</li>
<li>SILVERLIGHT (1.1M)</li>
<li>FLASH (509K)</li>
</ul>
<p>Alcuni sono di dimensioni notevoli il che ne fa ideali letture da divano! Il formato usato per confezionare gli eBook è <a href="http://www.mobipocket.com/dev/article.asp?BaseFolder=prcgen&amp;File=mobiformat.htm">Mobipocket</a>, compatibile con]<a href="http://www.amazon.com/dp/B002Y27P3M/?tag=gocous-20&amp;hvadid=5729120357&amp;ref=pd_sl_blgu0nkyl_b">7</a> e credo con altri lettori di eBook. Ricordo che è possibile leggere i libri per Kindle con l’applicazione <strong>gratuita</strong> disponibile per <a href="http://www.amazon.com/gp/feature.html/ref=kcp_pc_mkt_lnd?docId=1000426311">PC</a>, <a href="http://www.amazon.com/gp/feature.html/ref=kcp_mac_mkt_lnd?docId=1000464931">Mac</a>,]<a href="http://www.amazon.com/gp/feature.html/ref=kcp_iphone_mkt_lnd?docId=1000301301">10</a> e <a href="http://www.amazon.com/gp/feature.html?ie=UTF8&amp;docId=165849822">Android</a>.</p>
<p><strong>Buona lettura!</strong></p>]]></content:encoded>
    </item>
    <item>
      <title>Programmazione Asincrona per C# e VB</title>
      <link>https://nicolaiarocci.com/programmazione-asincrona/</link>
      <pubDate>Fri, 29 Oct 2010 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/programmazione-asincrona/</guid>
      <description>Un articolo sul Somasegar’s Weblog annuncia oggi il rilascio imminente di un nuovo modello di programmazione asincrona per C# and VB:
Today, we are unveiling significant language and framework enhancements in C# and Visual Basic that enable developers to harness asynchrony, letting them retain the control flow from their synchronous code while developing responsive user interfaces and scalable web applications with greater ease. This CTP delivers a lightweight asynchronous development experience as close to the standard synchronous paradigms as possible, while providing an easy on-ramp to the world of concurrency</description>
      <content:encoded><![CDATA[<p>Un articolo sul <!-- raw HTML omitted -->Somasegar’s Weblog<!-- raw HTML omitted --> annuncia oggi il rilascio imminente di un nuovo modello di programmazione asincrona per C# and VB:</p>
<blockquote>
<p>Today, we are unveiling significant language and framework enhancements in C# and Visual Basic that enable developers to harness asynchrony, letting them retain the control flow from their synchronous code while developing responsive user interfaces and scalable web applications with greater ease.   This CTP delivers a lightweight asynchronous development experience as close to the standard synchronous paradigms as possible, while providing an easy on-ramp to the world of concurrency</p>
</blockquote>
<p>Lo stesso Somasegar riconosce che finora sviluppare applicazioni asincrone complesse con la piattaforma .NET non è stato facile. Tempo fa l’ho sperimentato in prima persona. Lavoravo su <a href="http://gestionaleamica.com/Backup/">Amica Prodigy Backup</a>, una applicazione di backup remoto.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Il programma invia files di grandi dimensioni al servizio di cloud storage <a href="http://aws.amazon.com/s3/">S3</a> aggiornando l’interfaccia utente con lo stato del trasferimento e consentendo nel frattempo di operare liberamente con l’interfaccia. Devo ammettere che si è trattata di una sfida molto accattivante. Lavoravo per la prima volta su sistemi cloud e c’era molto da imparare. La parte più difficile fu naturalmente la gestione dei processi asincroni sul client, che era una applicazione WinForm scritta su .NET Framework.</p>
<p>Una rapida occhiata al codice di esempio presente nell’articolo di Somasegar è meglio di mille parole. ‘The Old Way’ vs ‘The New Way’ ha un vincitore evidente, ed è la New Way. Mi piace molto il concetto della nuova keyword Await, è una soluzione così elegante! Come sempre in questi casi occorrerà scendere nei dettagli per verificare l’affidabilità di questa nuova soluzione.</p>
<p>La  CTP è già disponibile per il <!-- raw HTML omitted -->download<!-- raw HTML omitted -->, attualmente solo per le versioni inglesi di Visual Studio 2010.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
