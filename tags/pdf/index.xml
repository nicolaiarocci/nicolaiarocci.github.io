<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>pdf on Nicola Iarocci</title>
    <link>https://nicolaiarocci.com/tags/pdf/</link>
    <description>Recent content in pdf on Nicola Iarocci</description>
    <generator>Hugo -- 0.121.1</generator>
    <language>en</language>
    <copyright>Produced / Written / Maintained by Nicola Iarocci since 2010</copyright>
    <lastBuildDate>Fri, 26 Apr 2024 09:39:22 +0200</lastBuildDate>
    <atom:link href="https://nicolaiarocci.com/tags/pdf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tor: from the Dark Web to the Future of Privacy</title>
      <link>https://nicolaiarocci.com/tor-from-the-dark-web-to-the-future-of-privacy/</link>
      <pubDate>Fri, 26 Apr 2024 09:39:22 +0200</pubDate>
      <guid>https://nicolaiarocci.com/tor-from-the-dark-web-to-the-future-of-privacy/</guid>
      <description>This one looks like a promising read:
Tor, one of the most important and misunderstood technologies of the digital age, is best known as the infrastructure underpinning the so-called Dark Web. But the real “dark web,” when it comes to Tor, is the hidden history brought to light in this book: where this complex and contested infrastructure came from, why it exists, and how it connects with global power in intricate and intimate ways.</description>
      <content:encoded><![CDATA[<p>This one looks like a promising read:</p>
<blockquote>
<p>Tor, one of the most important and misunderstood technologies of the digital age, is best known as the infrastructure underpinning the so-called Dark Web. But the real “dark web,” when it comes to Tor, is the hidden history brought to light in this book: where this complex and contested infrastructure came from, why it exists, and how it connects with global power in intricate and intimate ways. In Tor: From the Dark Web to the Future of Privacy,Ben Collier has written, in essence, a biography of Tor—a cultural and technological history of power, privacy, politics, and empire in the deepest reaches of the internet.</p>
</blockquote>
<p>I&rsquo;ve always been cautiously curious about the Tor project. I remember listening to a Tor talk at a PyCon Italy (or EuroPython?) conference, where the speaker insisted that Tor wasn&rsquo;t meant for dark usages but as a means of liberation. <a href="https://direct.mit.edu/books/oa-monograph/5761/TorFrom-the-Dark-Web-to-the-Future-of-Privacy"><em>Tor: From the Dark Web to the Future of Privacy</em></a> might help frame the project from that perspective.</p>
<p>It&rsquo;s packaged as a free PDF. It&rsquo;s too bad it&rsquo;s watermarked, so converting it to EPUB results in a mess.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Avviare un Download con richiesta di nome file da una pagina ASP.NET</title>
      <link>https://nicolaiarocci.com/avviare-un-download-con-richiesta-di-nome-file-da-una-pagina-asp-net/</link>
      <pubDate>Wed, 27 Apr 2011 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/avviare-un-download-con-richiesta-di-nome-file-da-una-pagina-asp-net/</guid>
      <description>&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Normalmente quando un visitatore clicca su un link che punta a un file, quest’ultimo viene mostrato nel browser e non viene avviato alcun download. Questo succede perché il browser determina il tipo di contenuto in base alla estensione del file. Quando clicchiamo su un file con estensione jpg il browser sa che si tratta di una immagine e la mostra direttamente. Lo stesso avviene per i file pdf e così via.&lt;/p&gt;
&lt;p&gt;Può capitare che questo comportamento non sia quello desiderato. Oggi &lt;!-- raw HTML omitted --&gt;al lavoro&lt;!-- raw HTML omitted --&gt; ho implementato una funzionalità interessante: il download della versione PDF di una pagina web. Il pdf viene costruito dinamicamente nel momento stesso in cui il visitatore clicca un link. Questo accorgimento libera il webmaster dalla tediosa (e facilmente dimenticabile) necessità di rigenerare il pdf ad ogni minimo ritocco della pagina.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Volevo che cliccando sul link si avviasse automaticamente il download, così da ‘costringere’ l’utente a interagire col PDF in un secondo tempo rispetto all’esperienza di navigazione. Se scarichi un PDF è per stamparlo o consultarlo con calma o magari passarlo a un collega, no?&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><!-- raw HTML omitted -->Normalmente quando un visitatore clicca su un link che punta a un file, quest’ultimo viene mostrato nel browser e non viene avviato alcun download. Questo succede perché il browser determina il tipo di contenuto in base alla estensione del file. Quando clicchiamo su un file con estensione jpg il browser sa che si tratta di una immagine e la mostra direttamente. Lo stesso avviene per i file pdf e così via.</p>
<p>Può capitare che questo comportamento non sia quello desiderato. Oggi <!-- raw HTML omitted -->al lavoro<!-- raw HTML omitted --> ho implementato una funzionalità interessante: il download della versione PDF di una pagina web. Il pdf viene costruito dinamicamente nel momento stesso in cui il visitatore clicca un link. Questo accorgimento libera il webmaster dalla tediosa (e facilmente dimenticabile) necessità di rigenerare il pdf ad ogni minimo ritocco della pagina.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Volevo che cliccando sul link si avviasse automaticamente il download, così da ‘costringere’ l’utente a interagire col PDF in un secondo tempo rispetto all’esperienza di navigazione. Se scarichi un PDF è per stamparlo o consultarlo con calma o magari passarlo a un collega, no?</p>
<p>Costringere l’utente a usare il menu contestuale del browser (<em>Salva link con nome..</em>) non è certo la scelta ideale dal punto di vista dell’esperienza utente, tanto più che in questo caso il link non è statico e invoca codice JavaScript. Per ottenere il risultato desiderato dobbiamo inviare direttamente il file all’utente. [cci_asp theme=”standard”]Response.TransmitFile()[/cci_asp] è il metodo che invia il file dall’applicazione ASP.NET al client, ma prima dobbiamo preoccuparci di aggiungere un paio di header al nostro messaggio di output:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>E’ importante fornire il ContentType corretto altrimenti il browser non sarà sempre in grado di gestire i contenuti del file. Internet Explorer per esempio offre l’opzione di aprire direttamente il file (verrà scaricato nella cache). Nel nostro caso se l’utente sceglie l’apertura diretta IE lancerà Acrobat Reader perché ContentType è <em>application/pdf</em>.</p>
<p>Altro accorgimento è la chiamata al metodo Path.GetFileName() in riga 7. Non sarebbe necessario se non fosse che <em>taluni broswer arcaici e superati</em> (ogni riferimento a IE è naturalmente voluto) non sono in grado di gestire intelligentemente il filename e, quando propongono il nome del file da salvare, riproducono l’intero path del file sul server. Questo comportamento tra l’altro è pericoloso perché espone l’intera struttura  del sito, dalla radice al folder che contiene la pagina, al visitatore.</p>
<p>Se la routine deve essere usata in un modulo e non direttamente in una pagina aspx ricordate di sostituire Response con HttpContect.Current.Response. Buon lavoro!</p>]]></content:encoded>
    </item>
  </channel>
</rss>
