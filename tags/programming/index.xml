<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Nicola Iarocci</title>
    <link>https://nicolaiarocci.com/tags/programming/</link>
    <description>Recent content in programming on Nicola Iarocci</description>
    <image>
      <title>Nicola Iarocci</title>
      <url>https://nicolaiarocci.com/images/avatar.png</url>
      <link>https://nicolaiarocci.com/images/avatar.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Produced / Written / Maintained by [Nicola Iarocci](/) since 2010</copyright>
    <lastBuildDate>Sun, 21 Jan 2024 12:27:26 +0100</lastBuildDate>
    <atom:link href="https://nicolaiarocci.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linus Torvalds on the impact of LLMs and AI on programming</title>
      <link>https://nicolaiarocci.com/linus-torvalds-on-the-impact-of-llms-and-ai-on-programming/</link>
      <pubDate>Sun, 21 Jan 2024 12:27:26 +0100</pubDate>
      <guid>https://nicolaiarocci.com/linus-torvalds-on-the-impact-of-llms-and-ai-on-programming/</guid>
      <description>I think I his take on the topic.</description>
      <content:encoded><![CDATA[<p>I think I <a href="https://www.youtube.com/watch?v=VHHT6W-N0ak">his take</a> on the topic.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/VHHT6W-N0ak" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

]]></content:encoded>
    </item>
    <item>
      <title>How to implement a PKCE code challenge in C#</title>
      <link>https://nicolaiarocci.com/how-to-implement-pkce-code-challenge-in-csharp/</link>
      <pubDate>Wed, 17 Jan 2024 18:28:14 +0100</pubDate>
      <guid>https://nicolaiarocci.com/how-to-implement-pkce-code-challenge-in-csharp/</guid>
      <description>Today&amp;rsquo;s fun was implementing OAuth2&amp;rsquo;s RFC 7636&amp;rsquo;s PKCE (Proof Key for Code Exchange) in C#. It&amp;rsquo;s relatively straightforward, but I decided to share my implementation should it be helpful to someone else out there.
PKCE is an extension to the Authorization Code flow to prevent CSRF and authorization code injection attacks. [..] It was originally designed to protect the authorization code flow in mobile apps, but its ability to prevent authorization code injection makes it useful for every type of OAuth client, even web apps that use client authentication (source).</description>
      <content:encoded><![CDATA[<p>Today&rsquo;s fun was implementing OAuth2&rsquo;s <a href="http://tools.ietf.org/html/rfc7636">RFC
7636</a>&rsquo;s PKCE (Proof Key for Code Exchange)
in C#. It&rsquo;s relatively straightforward, but I decided to share my implementation
should it be helpful to someone else out there.</p>
<blockquote>
<p>PKCE  is an extension to the Authorization Code flow to prevent CSRF and
authorization code injection attacks. [..] It was originally designed to protect
the authorization code flow in mobile apps, but its ability to prevent
authorization code injection makes it useful for every type of OAuth client,
even web apps that use client authentication
(<a href="https://oauth.net/2/pkce/">source</a>).</p>
</blockquote>
<p>In a nutshell:</p>
<ol>
<li>The client requests a single-use authorization code to an authorization server. In doing that, it includes a <code>code_challenge</code> with the request.</li>
<li>The server responds with the authorization code if the client is recognized and authorized.</li>
<li>The client requests an access token in exchange for the authorization code. It includes the <code>code_verifier</code> used to generate the original <code>code_challenge</code>;</li>
<li>The server confirms that the verifier is the same one used to generate the code challenge; hence, the client is the same.</li>
</ol>
<p>Plenty of excellent documentation is online (like
<a href="https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow-with-proof-key-for-code-exchange-pkce">here</a>.)</p>
<p>I was interested in <code>code_verifier</code> and <code>code_challenge</code> generation. Here&rsquo;s my implementation:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cs" data-lang="cs"><span style="display:flex;"><span><span style="font-style:italic">/// &lt;summary&gt;</span>
</span></span><span style="display:flex;"><span><span style="font-style:italic">/// Provides a randomly generating PKCE code verifier and it&#39;s corresponding code challenge.</span>
</span></span><span style="display:flex;"><span><span style="font-style:italic">/// &lt;/summary&gt;</span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">public</span> <span style="font-weight:bold">static</span> <span style="font-weight:bold">class</span> <span style="font-weight:bold">Pkce</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="font-style:italic">/// &lt;summary&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="font-style:italic">/// Generates a code_verifier and the corresponding code_challenge, as specified in the rfc-7636.</span>
</span></span><span style="display:flex;"><span>    <span style="font-style:italic">/// &lt;/summary&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="font-style:italic">/// &lt;remarks&gt;See https://datatracker.ietf.org/doc/html/rfc7636#section-4.1 and https://datatracker.ietf.org/doc/html/rfc7636#section-4.2&lt;/remarks&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="font-weight:bold">public</span> <span style="font-weight:bold">static</span> (<span style="">string</span> code_challenge, <span style="">string</span> verifier) Generate(<span style="">int</span> size = 32)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="font-weight:bold">using</span> <span style="font-weight:bold">var</span> rng = RandomNumberGenerator.Create();
</span></span><span style="display:flex;"><span>        <span style="">var</span> randomBytes = <span style="font-weight:bold">new</span> <span style="">byte</span>[size];
</span></span><span style="display:flex;"><span>        rng.GetBytes(randomBytes);
</span></span><span style="display:flex;"><span>        <span style="">var</span> verifier = Base64UrlEncode(randomBytes);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="">var</span> buffer = Encoding.UTF8.GetBytes(verifier);
</span></span><span style="display:flex;"><span>        <span style="">var</span> hash = SHA256.Create().ComputeHash(buffer);
</span></span><span style="display:flex;"><span>        <span style="">var</span> challenge = Base64UrlEncode(hash);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="font-weight:bold">return</span> (challenge, verifier);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="font-weight:bold">private</span> <span style="font-weight:bold">static</span> <span style="">string</span> Base64UrlEncode(<span style="">byte</span>[] data) =&gt;
</span></span><span style="display:flex;"><span>        Convert.ToBase64String(data)
</span></span><span style="display:flex;"><span>            .Replace(<span style="font-style:italic">&#34;+&#34;</span>, <span style="font-style:italic">&#34;-&#34;</span>)
</span></span><span style="display:flex;"><span>            .Replace(<span style="font-style:italic">&#34;/&#34;</span>, <span style="font-style:italic">&#34;_&#34;</span>)
</span></span><span style="display:flex;"><span>            .TrimEnd(<span style="font-style:italic">&#39;=&#39;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Usage is as simple as:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cs" data-lang="cs"><span style="display:flex;"><span><span style="">var</span> (challenge, verifier) = Pkce.Generate();
</span></span></code></pre></div><p>In ASP.NET Core you don&rsquo;t usually need to mess with PKCE as the framework
supports it very transparently, but the project I&rsquo;m working on right now is bare
and to the bones, with no ASP.NET Core in sight, so I had to bring my own
implementation. Fun stuff.</p>
]]></content:encoded>
    </item>
    <item>
      <title>How to use XmlWriter along with StringWriter to properly serialize a UTF-8 string</title>
      <link>https://nicolaiarocci.com/how-to-use-xmlwriter-along-with-stringwriter-to-properly-serialize-a-utf-8-string/</link>
      <pubDate>Thu, 09 Nov 2023 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/how-to-use-xmlwriter-along-with-stringwriter-to-properly-serialize-a-utf-8-string/</guid>
      <description>Today, I (re)learned how to serialize an XML to a UTF-8 string. Like all the other times I did this, I got backstabbed by StringWriter, which only supports UTF-16. A simple code snippet like this:
await using var sw = new StringWriter(); await using var w = XmlWriter.Create(sw, new() { Async = true }); ... await w.FlushAsync(); return sw.ToString(); Will emit this output:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-16&amp;#34;?&amp;gt;&amp;lt;... There&amp;rsquo;s nothing inherently wrong with UTF-16, but XML is usually UTF-8, so one must do something about it.</description>
      <content:encoded><![CDATA[<p>Today, I (re)learned how to serialize an XML to a UTF-8 string. Like all the other times I did this, I got backstabbed
by StringWriter, which only supports UTF-16. A simple code snippet like this:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>    await using <span style="font-weight:bold">var</span> sw = new StringWriter();
</span></span><span style="display:flex;"><span>    await using <span style="font-weight:bold">var</span> w = XmlWriter.Create(sw, new() { Async = true });
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    await w.FlushAsync();
</span></span><span style="display:flex;"><span>    <span style="font-weight:bold">return</span> sw.ToString();
</span></span></code></pre></div><p>Will emit this output:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>    &lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-16&#34;?&gt;&lt;...
</span></span></code></pre></div><p>There&rsquo;s nothing inherently wrong with UTF-16, but XML is usually UTF-8, so one must do something about it. StringWriter
exposes an <code>Encoding</code> property, but it is read-only for unknown reasons. One might think that given that the XmlWriter
allows setting its own <code>Encoding</code> value, something like this would work:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>    await using <span style="font-weight:bold">var</span> sw = new StringWriter();
</span></span><span style="display:flex;"><span>    await using <span style="font-weight:bold">var</span> w = XmlWriter.Create(sw, 
</span></span><span style="display:flex;"><span>        new() { Async = true , Encoding = Encoding.UTF8});
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    await w.FlushAsync();
</span></span><span style="display:flex;"><span>    <span style="font-weight:bold">return</span> sw.ToString();
</span></span></code></pre></div><p>But it doesn’t. Over time, I’ve seen a few different ways to get out of this dead end, some more performant and or less
verbose than others, but my favorite is resorting to a custom StringWriter:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>    public class Utf8StringWriter : StringWriter
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        public override Encoding Encoding =&gt; Encoding.UTF8;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>Armed with this, it is trivial, as it should have been from the get-go, to obtain the desired output:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>    await using <span style="font-weight:bold">var</span> sw = new Utf8StringWriter();
</span></span><span style="display:flex;"><span>    await using <span style="font-weight:bold">var</span> w = XmlWriter.Create(sw, new() { Async = true });
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    await w.FlushAsync();
</span></span><span style="display:flex;"><span>    <span style="font-weight:bold">return</span> sw.ToString();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    // returns  &lt;<span style="">?</span>xml version=<span style="font-style:italic">&#34;1.0&#34;</span> encoding=<span style="font-style:italic">&#34;utf-8&#34;</span><span style="">?</span>&gt;&lt;...
</span></span></code></pre></div><p>The whole .NET framework has seen fantastic performance improvements, top-class multi-platform support, and remarkable
streamlining, but some baffling pitfalls are still hidden in some of its less obvious parts. StringWriter not supporting
UTF-8 out-of-the-box is one of them.</p>
]]></content:encoded>
    </item>
    <item>
      <title>LINQ DistinctBy on a property for .NET Standard and older .NET versions</title>
      <link>https://nicolaiarocci.com/linq-distinctby-on-a-property-for-dotnet-standard-and-old-dotnet-versions/</link>
      <pubDate>Wed, 25 Oct 2023 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/linq-distinctby-on-a-property-for-dotnet-standard-and-old-dotnet-versions/</guid>
      <description>Today I learned how to implement a custom Enumerable.DistinctBy extension method that returns distinct elements from a sequence according to a specified key selector function.
.NET 6 and its successors have the method built in within LINQ, but I needed it in a .NET Standard 2.0 class library, so I was out of luck. My implementation is simple, not different from others I found online, and should also work fine with old .</description>
      <content:encoded><![CDATA[<p>Today I learned how to implement a custom <code>Enumerable.DistinctBy</code> extension method that returns distinct elements from a
sequence according to a specified key selector function.</p>
<p>.NET 6 and its successors have the method <a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.distinctby?view=net-6.0">built in</a> within LINQ, but I needed it in a .NET Standard 2.0 class
library, so I was out of luck. My implementation is simple, not different from <a href="https://stackoverflow.com/a/489421/323269">others</a> I found online, and should
also work fine with old .NET releases. Here it is:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>    public <span style="font-weight:bold">static</span> IEnumerable&lt;TSource&gt; DistinctBy&lt;TSource, TKey&gt;(this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, TKey&gt; keySelector)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="font-weight:bold">var</span> keys = new HashSet&lt;TKey&gt;();
</span></span><span style="display:flex;"><span>        foreach (<span style="font-weight:bold">var</span> element <span style="font-weight:bold">in</span> source)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="font-weight:bold">if</span> (keys.Contains(keySelector(element))) <span style="font-weight:bold">continue</span>;
</span></span><span style="display:flex;"><span>            keys.Add(keySelector(element));
</span></span><span style="display:flex;"><span>            yield <span style="font-weight:bold">return</span> element;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>In the following usage example, I will get back all unique objects from the original sequence, distinct by their Name
property:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>    <span style="font-weight:bold">var</span> uniques = mySequenceOfObjects.DistinctBy(x =&gt; x.Name);
</span></span></code></pre></div><p>I later went to check the <a href="https://github.com/dotnet/runtime/blob/e0409d44bd8d1fd0be1d66fbb52bd609be18f388/src/libraries/System.Linq/src/System/Linq/Distinct.cs#L62">official .NET 6+ implementation</a>. They support an optional equality comparer , which I
don&rsquo;t need, but their base implementation is similar to mine (they use deferred execution as well).</p>
<p>By the way, years after its open-sourcing, I still get thrills when I realize I can always look at, let alone contribute
to, the .NET source code.</p>
]]></content:encoded>
    </item>
    <item>
      <title>I won the Microsoft MVP Award</title>
      <link>https://nicolaiarocci.com/i-won-the-microsoft-mvp-award/</link>
      <pubDate>Thu, 06 Jul 2023 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/i-won-the-microsoft-mvp-award/</guid>
      <description>I&amp;rsquo;ve just received news that I&amp;rsquo;ve been awarded the Microsoft Most Valuable Professional (MVP) Award in the Software Development category. It is an honor and a pleasure to be renewed for the eighth time. Being a Microsoft MVP means a lot to me; I remember how intimidated I felt when I met MVPs at various events and how totally out of reach the title seemed for someone like me. Besides my everyday work, I kept doing the things I loved:</description>
      <content:encoded><![CDATA[<p>I&rsquo;ve just received news that I&rsquo;ve been awarded the Microsoft Most Valuable Professional (MVP) Award in the Software
Development category. It is an honor and a pleasure to be renewed for the eighth time. Being a Microsoft MVP means a lot
to me; I remember how intimidated I felt when I met MVPs at various events and how totally out of reach the title seemed
for someone like me. Besides my everyday work, I kept doing the things I loved:</p>
<ul>
<li>Work on my open-source projects</li>
<li>Present at conferences and local meetups</li>
<li>Write some articles here and there</li>
<li>Blog as usual</li>
</ul>
<p>Then, one day, someone nominated me for the award. I was surprised, baffled and thankful, and I did not expect to pass
the selection process. I was genuinely shocked when I received the first award. Being in the MVP program has been a
happy and rewarding ride, and I&rsquo;m glad the journey continues for another year.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Homebrew and docfx don&#39;t like each other too</title>
      <link>https://nicolaiarocci.com/homebrew-and-docfx-dont-like-each-other-too/</link>
      <pubDate>Tue, 20 Jun 2023 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/homebrew-and-docfx-dont-like-each-other-too/</guid>
      <description>Another day another Homebrew incompatibility emerges, this time with docfx, the technical documentation building tool of reference in .NET space. I&amp;rsquo;ve been using docfx for years to build the FatturaElettronica.NET website, and it&amp;rsquo;s always been working without a glitch. Lately, however, my builds have been failing with strange errors I was too lazy to diagnose until today when I decided to grasp the nettle and sort the whole thing out.</description>
      <content:encoded><![CDATA[<p>Another day another Homebrew incompatibility emerges, this time with <a href="https://dotnet.github.io/docfx/index.html">docfx</a>, the technical documentation building
tool of reference in .NET space. I&rsquo;ve been using docfx for years to build the <a href="https://fatturaelettronicaopensource.org">FatturaElettronica.NET</a> website, and it&rsquo;s
always been working without a glitch. Lately, however, my builds have been failing with strange errors I was too lazy to
diagnose until today when I decided to grasp the nettle and sort the whole thing out.</p>
<p>It took me an embarrassing time to realize that, while successful, my docfx updates (<code>dotnet tool update -g docfx</code>) were
being ignored. An old, Homebrew-installed version of docfx was being executed at my launches —a simple <code>which docfx</code>
revealed the issue. <code>brew uninstall docfx</code> finally set the updated, dotnet-installed version free of its chains, and it
is now merrily churning websites.</p>
<p>A similar issue emerged <a href="/homebrew-and-dotnet-8-preview-dont-like-each-other/">between Homebrew and .NET 8 Preview</a> only a few days ago. Lesson learned I&rsquo;m not installing
dotnet tools via Homebrew anymore. Or maybe, I might stay clear of Homebrew altogether.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Homebrew and .NET 8 Preview don&#39;t like each other</title>
      <link>https://nicolaiarocci.com/homebrew-and-dotnet-8-preview-dont-like-each-other/</link>
      <pubDate>Tue, 13 Jun 2023 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/homebrew-and-dotnet-8-preview-dont-like-each-other/</guid>
      <description>Today I learned that .NET 8 Preview could play better with Homebrew (or vice-versa). I&amp;rsquo;m working on a C# 12 presentation for our local developer meetup, and for that, I wanted .NET 8 Preview to run side by side with version 7 on my Mac. As version 7 was initially installed with Homebrew, I also wanted to install version 8 Preview with Homebrew, but that recipe was unavailable. Not perfectly happy with that, I fell back to the stand-alone installer, expecting problems.</description>
      <content:encoded><![CDATA[<p>Today I learned that .NET 8 Preview could play better with Homebrew (or vice-versa). I&rsquo;m working on a <a href="https://www.meetup.com/it-IT/devromagna/events/293340671/">C# 12 presentation
for our local developer meetup</a>, and for that, I wanted .NET 8 Preview to run side by side with version 7 on my Mac. As
version 7 was initially installed with Homebrew, I also wanted to install version 8 Preview with Homebrew, but that
recipe was unavailable. Not perfectly happy with that, I fell back to the stand-alone installer, expecting
problems.</p>
<p>Installation went well, but then I turned to the command line only to find that <code>dotnet --list-sdks</code> was still and only
showing version 7. Yet, the 8 Preview was sitting there at its canonical location at <code>/usr/local/share/dotnet/sdk</code>,
where the v7 was also listed.</p>
<p>Puzzled, I tried a few things, but the quick fix was to simply <code>brew uninstall --ignore-dependencies dotnet</code> and, boom,
both versions 8 Preview and 7 became immediately available. I suspect that <code>brew uninstall</code> only removed the symlink
from .NET canonical location to the Homebrew cellar, which magically solved the SDK visibility problem.</p>
<p>TL; DR. Homebrew recipes don&rsquo;t play nicely with .NET canonical installer. To make all my SDK versions visible to .NET,
I had to forego the Homebrew installation, which did not uninstall the SDK itself, but simply unlinked it.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Python `decimal.getcontext` does not work with bpython</title>
      <link>https://nicolaiarocci.com/python-decimal.getcontext-does-not-work-with-bpython/</link>
      <pubDate>Tue, 06 Jun 2023 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/python-decimal.getcontext-does-not-work-with-bpython/</guid>
      <description>I have been working on a side project for which I&amp;rsquo;m using bpython, a &amp;ldquo;fancy interface to the Python interpreter.&amp;rdquo; If you use the Python REPL often, you should check it out. It offers unique features like in-line syntax highlighting, readline-like autocomplete, a &amp;ldquo;rewind&amp;rdquo; function to pop the last line of code from memory, auto-indentation and more.
Anyway, today I found a bug in bpython, and that&amp;rsquo;s that Python&amp;rsquo;s decimal.getcontext() does not work with it.</description>
      <content:encoded><![CDATA[<p>I have been working on a side project for which I&rsquo;m using <a href="https://bpython-interpreter.org">bpython</a>, a &ldquo;fancy interface to the Python interpreter.&rdquo;
If you use the Python REPL often, you should check it out. It offers unique features like in-line syntax
highlighting, readline-like autocomplete, a &ldquo;rewind&rdquo; function to pop the last line of code from memory, auto-indentation
and more.</p>
<p>Anyway, today I found a bug in bpython, and that&rsquo;s that Python&rsquo;s <code>decimal.getcontext()</code> does not work with it.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>bpython version 0.24 on top of Python 3.11.3
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; import decimal
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; decimal.getcontext().prec = 6
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; decimal.Decimal(1) / decimal.Decimal(7)
</span></span><span style="display:flex;"><span>Decimal(&#39;0.1428571428571428571428571429&#39;)
</span></span></code></pre></div><p>If you run the same lines in the standard Python REPL, what you get instead is:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>bpython version 0.24 on top of Python 3.11.3
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; import decimal
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; decimal.getcontext().prec = 6
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; decimal.Decimal(1) / decimal.Decimal(7)
</span></span><span style="display:flex;"><span>Decimal(&#39;0.142857&#39;)
</span></span></code></pre></div><p>Further experimenting revealed that, as a workaround, setting <code>DefaultContext</code> works as expected:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>bpython version 0.24 on top of Python 3.11.3
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; decimal.DefaultContext.prec = 6
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; decimal.Decimal(1) / decimal.Decimal(7)
</span></span><span style="display:flex;"><span>Decimal(&#39;0.142857&#39;)
</span></span></code></pre></div><p>I suspect this has something to do with threads, as <code>decimal.getcontext</code> targets the current thread while
<code>DefaultContext</code> is global. I went to the bpython repository only to find that a ticket was already opened in 2021. I
<a href="https://github.com/bpython/bpython/issues/918#issuecomment-1578911204">added</a> my <code>DefaultContext</code> observation there.</p>
]]></content:encoded>
    </item>
    <item>
      <title>A new modern MSBuild terminal logger is coming with .NET 8</title>
      <link>https://nicolaiarocci.com/a-new-modern-msbuild-terminal-logger-is-coming-with-dotnet-8/</link>
      <pubDate>Sat, 20 May 2023 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/a-new-modern-msbuild-terminal-logger-is-coming-with-dotnet-8/</guid>
      <description>The latest .NET 8 Preview is out, and I love that they&amp;rsquo;re finally changing how MSBuild logs are printed to the terminal. The new Terminal Logger ditches the infamous &amp;ldquo;wall of text&amp;rdquo; that is a nightmare to parse in favor of a cleaner, leaner, and more organized output.
Once enabled, the new logger shows you the restore phase, followed by the build phase. During each phase, the currently-building projects are at the bottom of the terminal, and each building project tells you both the MSBuild Target currently being built, as well as the amount of time spent on that target.</description>
      <content:encoded><![CDATA[<p>The <a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-8-preview-4/">latest .NET 8 Preview</a> is out, and I love that they&rsquo;re finally changing how MSBuild logs are printed to the terminal.
The new Terminal Logger ditches the infamous &ldquo;wall of text&rdquo; that is a nightmare to parse in favor of a cleaner, leaner,
and more organized output.</p>
<blockquote>
<p>Once enabled, the new logger shows you the restore phase, followed by the build phase. During each phase, the
currently-building projects are at the bottom of the terminal, and each building project tells you both the MSBuild
Target currently being built, as well as the amount of time spent on that target.</p>
</blockquote>
<p>The new MSBuild terminal logger is not the default. It must be opted-in with the <code>tl</code> option of the <code>dotnet build</code>
command. Here&rsquo;s what it looks like for a complex, multi-project and multi-target solution:</p>
<p><img loading="lazy" src="/images/modernbuildoutput.gif" alt="MSBuild Terminal Logger output"  />
</p>
<p>Now, if you&rsquo;re doing .NET programming within an IDE like Rider of Visual Studio, this all might seem of little
importance to you, but rest assured as soon as you have to look at CI logs or if you use the command line in your
workflow a lot as I do, this is pure bliss.</p>
<p>Interestingly, this marks only the first step in a series of upcoming MSBuild UX improvements: <em>&ldquo;We hope to use this
logger as the foundation for a new batch of UX improvements for MSBuild, including aspects like progress reporting and
structured errors in the future.&rdquo;</em> Color me excited.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Story of Redis and its creator antirez</title>
      <link>https://nicolaiarocci.com/story-of-redis-and-its-creator-antirez/</link>
      <pubDate>Thu, 11 May 2023 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/story-of-redis-and-its-creator-antirez/</guid>
      <description>I read a well-researched story about Redis and its creator Salvatore Sanfilippo, also known as antirez. I was already familiar with many details as I have been following him since OKNotizie and Segnalo, of which I was a user. At the time, as a user, I exchanged a few emails with Salvatore, whom years later I had the pleasure of meeting in person, as we were both speakers at several conferences.</description>
      <content:encoded><![CDATA[<p>I read a well-researched story about Redis and its creator Salvatore Sanfilippo, also known as antirez. I was already
familiar with many details as I have been following him since OKNotizie and Segnalo, of which I was a user. At the time,
as a user, I exchanged a few emails with Salvatore, whom years later I had the pleasure of meeting in person, as we were
both speakers at several conferences.</p>
<p>On his website, he apologizes for being unable to respond to all the mail he receives. Well, my experience is the
opposite. I remember one of our several mail exchanges. In 2013 I asked him for git help, and minutes later, he replied
with a custom script he had put together for dealing with that exact problem. Later on, as I was working on a git
presentation for Codemotion (I think), I fired a quick email asking permission to feature his script in my session. The
green light landed seconds later. Salvatore is the epitome of kindness and helpfulness.</p>
<p>As if his pronounced computer skills were not enough, with his latest sci-fi novel Wohpe (on my reading list), he proves
to be endowed with the most diverse capabilities.</p>
<p>Anyway, <a href="https://blog.brachiosoft.com/redis-en">here&rsquo;s the antirez &amp; Redis story</a> I mentioned. Worth reading it.</p>
]]></content:encoded>
    </item>
    <item>
      <title>The real cost of interruption</title>
      <link>https://nicolaiarocci.com/the-real-cost-of-interruption/</link>
      <pubDate>Fri, 07 Apr 2023 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/the-real-cost-of-interruption/</guid>
      <description>I&amp;rsquo;m just back from reading Programmer Interrupted: The Real Cost of Interruption and Context Switching, an interesting short piece in which I learned about at least two new things.
First, The Parable of the Two Watchmakers, introduced by Nobel Prize winner Herbert Simon, describes the complex relationship between sub-systems and their larger wholes. In the context of the article, it helps explain, even for non-programmers, the cost of an interruption. It also hints at a possible mitigation technique:</description>
      <content:encoded><![CDATA[<p>I&rsquo;m just back from reading <a href="https://contextkeeper.io/blog/the-real-cost-of-an-interruption-and-context-switching/">Programmer Interrupted: The Real Cost of Interruption and Context Switching</a>, an interesting
short piece in which I learned about at least two new things.</p>
<p>First, <em>The Parable of the Two Watchmakers</em>, introduced by Nobel Prize winner Herbert Simon, describes the complex
relationship between sub-systems and their larger wholes. In the context of the article, it helps explain, even for
non-programmers, the cost of an interruption. It also hints at a possible mitigation technique:</p>
<blockquote>
<p>There once were two watchmakers, named Hora and Tempus, who made very fine watches. The phones in their workshops rang
frequently and new customers were constantly calling them. However, Hora prospered while Tempus became poorer and
poorer. In the end, Tempus lost his shop. What was the reason behind this?</p>
</blockquote>
<blockquote>
<p>The watches consisted of about 1000 parts each. The watches that Tempus made were designed such that, when he had to
put down a partly assembled watch, it immediately fell into pieces and had to be reassembled from the basic elements.
Hora had designed his watches so that he could put together sub-assemblies of about ten components each, and each
sub-assembly could be put down without falling apart. Ten of these sub-assemblies could be put together to make a
larger sub-assembly, and ten of the larger sub-assemblies constituted the whole watch.</p>
</blockquote>
<p>Second, larger computer screens help a programmer keep his mental model (and context) together. I&rsquo;m still deciding on
this one. Focusing on a single window or not having a lot of cruft around the screen helps solve complex code for me.
But toss anything John Carmack at me, and I will abide.</p>
<blockquote>
<p>The 640 x 480 resolution was the standard from 1990 to around 1996, but it was possible to get more screen real estate
back then. There is a famous photo of John Carmack working on Quake using a 28-inch 1080p monitor in 1995.</p>
</blockquote>
<blockquote>
<p>Why did he choose 45 kg monitor for about $10k in 1995? The higher screen real estate allowed for more code to be
visible at once, resulting in a more dense context. Productivity greatly increases when you have the ability to store
and access more detailed context. It&rsquo;s like having a larger desk to hold documents when studying for an exam or doing
any task that requires the use of multiple sources of information from a common domain, such as solving puzzles.</p>
</blockquote>
<p>The brilliant comic that opens the article is the perfect TL;DR for the Watchmakers parable.</p>
<p><img loading="lazy" src="/images/ProgrammerInterrupted.png" alt="This is why you shouldn&amp;rsquo;t interrupt a programmer"  />
</p>
]]></content:encoded>
    </item>
    <item>
      <title>Running .NET code in an isolated sandbox</title>
      <link>https://nicolaiarocci.com/running-dotnet-code-in-an-isolated-sandbox/</link>
      <pubDate>Thu, 23 Mar 2023 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/running-dotnet-code-in-an-isolated-sandbox/</guid>
      <description>Steve Sanderson is experimenting again, and when Steve plays with his toys, I pay attention. In a new video on his YouTube channel, Steve introduces an experimental new .NET package that allows the creation of isolated instances of the .NET runtime that will safely run code in a sandbox.</description>
      <content:encoded><![CDATA[<p>Steve Sanderson is experimenting <a href="/a-quick-preview-of-the-blazor-united-prototype-for-.net8/">again</a>, and when Steve plays with his toys, I pay attention. In a new video on his
YouTube channel, Steve introduces an experimental new .NET package that allows the creation of isolated instances of the
.NET runtime that will safely run code in a sandbox.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content:encoded>
    </item>
    <item>
      <title>Making C# and OmniSharp play well with Neovim</title>
      <link>https://nicolaiarocci.com/making-csharp-and-omnisharp-play-well-with-neovim/</link>
      <pubDate>Fri, 03 Mar 2023 08:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/making-csharp-and-omnisharp-play-well-with-neovim/</guid>
      <description>I&amp;rsquo;ve recently moved away from my custom Neovim configuration to embrace LazyVim. LazyVim is a Neovim setup with sane default settings for options, autocmds, and keymaps. It boldly aims to transform Neovim into a full-fledged IDE that is easy to extend and customize. It comes with a wealth of plugins pre-configured and ready to use, and it is also blazing fast. Elijah Manor has a fantastic introductory video on YouTube; I suggest you take the time to look at it.</description>
      <content:encoded><![CDATA[<p>I&rsquo;ve recently moved away from my custom Neovim configuration to embrace <a href="https://www.lazyvim.org/">LazyVim</a>. LazyVim is a Neovim setup with sane
default settings for options, autocmds, and keymaps. It boldly aims to transform Neovim into a full-fledged IDE that is
easy to extend and customize. It comes with a wealth of plugins pre-configured and ready to use, and it is also blazing
fast. Elijah Manor has a fantastic introductory video on YouTube; I suggest you take the time to look at it.</p>
<p>
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/N93cTbtLCIM" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<!-- raw HTML omitted -->
So far I&rsquo;m delighted with the result. In the process, I learned about several useful plugins I now use regularly.</p>
<h3 id="neovim-trouble-with-c-and-omnisharp">Neovim trouble with C# and OmniSharp</h3>
<p>When I upgraded my old-<em>ish</em> Neovim (I am using nightly builds now), I started getting a weird error on every <code>.cs</code> file
I loaded:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>Error executing vim.schedule lua callbaack: /usr/share/[...]/semantic_tokens.lua:342:E5248: Invalid character in group name.
</span></span></code></pre></div><p>A little investigation revealed that semantic tokens provided by
OmniSharp don&rsquo;t conform to the LSP specification, which triggers the error. I cloned the <em>omnisharp-roslyn</em> repo and dug
into the code hoping I could offer a quick fix. As it turns out, however, the issue is actually with <a href="https://github.com/dotnet/roslyn/blob/3cca4fdc3b125995bfd32b3a02b5d5c2d2b82504/src/Workspaces/Core/Portable/Classification/ClassificationTypeNames.cs#L97">Roslyn
itself</a>, not OmniSharp. There are tickets on both the <a href="https://github.com/neovim/neovim/issues/21391">Neovim</a> and the <a href="https://github.com/OmniSharp/omnisharp-roslyn/issues/2483">OmniSharp</a> repositories, but I fear
they&rsquo;ll stagnate there as non-relevant (<em>note to self</em>: maybe report the problem to the Roslyn folks? Alternatively,
propose a patched semantic provider to the <em>omnisharp-roslyn</em> maintainers.)</p>
<p>Anyway, a quick, hacky, and not future-proof fix is to customize Neovim (LazyVim) configuration like this:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>-- ~/.config/nvim/lua/plugins/omnisharp.lua (create <span style="font-weight:bold">if</span> needed)
</span></span><span style="display:flex;"><span><span style="font-weight:bold">return</span> {
</span></span><span style="display:flex;"><span>  <span style="font-style:italic">&#34;OmniSharp/omnisharp-vim&#34;</span>,
</span></span><span style="display:flex;"><span>  init = function()
</span></span><span style="display:flex;"><span>    require(<span style="font-style:italic">&#34;lazyvim.util&#34;</span>).on_attach(function(client, _)
</span></span><span style="display:flex;"><span>      <span style="font-weight:bold">if</span> client.name == <span style="font-style:italic">&#34;omnisharp&#34;</span> then
</span></span><span style="display:flex;"><span>        client.server_capabilities.semanticTokensProvider = {
</span></span><span style="display:flex;"><span>          full = vim.empty_dict(),
</span></span><span style="display:flex;"><span>          legend = {
</span></span><span style="display:flex;"><span>            tokenModifiers = { <span style="font-style:italic">&#34;static_symbol&#34;</span> },
</span></span><span style="display:flex;"><span>            tokenTypes = {
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;comment&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;excluded_code&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;identifier&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;keyword&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;keyword_control&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;number&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;operator&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;operator_overloaded&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;preprocessor_keyword&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;string&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;whitespace&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;text&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;static_symbol&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;preprocessor_text&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;punctuation&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;string_verbatim&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;string_escape_character&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;class_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;delegate_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;enum_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;interface_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;module_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;struct_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;type_parameter_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;field_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;enum_member_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;constant_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;local_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;parameter_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;method_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;extension_method_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;property_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;event_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;namespace_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;label_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_doc_comment_attribute_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_doc_comment_attribute_quotes&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_doc_comment_attribute_value&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_doc_comment_cdata_section&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_doc_comment_comment&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_doc_comment_delimiter&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_doc_comment_entity_reference&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_doc_comment_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_doc_comment_processing_instruction&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_doc_comment_text&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_literal_attribute_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_literal_attribute_quotes&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_literal_attribute_value&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_literal_cdata_section&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_literal_comment&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_literal_delimiter&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_literal_embedded_expression&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_literal_entity_reference&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_literal_name&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_literal_processing_instruction&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;xml_literal_text&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;regex_comment&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;regex_character_class&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;regex_anchor&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;regex_quantifier&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;regex_grouping&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;regex_alternation&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;regex_text&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;regex_self_escaped_character&#34;</span>,
</span></span><span style="display:flex;"><span>              <span style="font-style:italic">&#34;regex_other_escape&#34;</span>,
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>          },
</span></span><span style="display:flex;"><span>          range = true,
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      end
</span></span><span style="display:flex;"><span>    end)
</span></span><span style="display:flex;"><span>  end,
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It overrides the <code>on_attach</code> event to pass an LSP-digestible list of semantic tokens. And voilà, C# files are now loaded seamlessly.</p>
<p>I&rsquo;m not done yet. I&rsquo;m having another <a href="https://github.com/OmniSharp/omnisharp-roslyn/issues/2510">weird issue</a> with <em>.editorconfig</em> files. I&rsquo;m still triaging it, and will report back when (if) I sort it out.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Making the latest C# language features available in older .NET versions</title>
      <link>https://nicolaiarocci.com/making-the-latest-csharp-language-features-available-in-older-dotnet-versions/</link>
      <pubDate>Sat, 04 Feb 2023 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/making-the-latest-csharp-language-features-available-in-older-dotnet-versions/</guid>
      <description>In a C# library I&amp;rsquo;ve been working on, I wanted to use C# 9.0&amp;rsquo;s init keyword. Quoting the documentation:
The init keyword defines an accessor method in a property or indexer. An init-only setter assigns a value to the property or the indexer element only during object construction. This enforces immutability so that once the object is initialized, it can&amp;rsquo;t be changed again.
Consider the following class:
public class Person { public string FirstName { get; init; } } You can initialize it like this:</description>
      <content:encoded><![CDATA[<p>In a C# library I&rsquo;ve been working on, I wanted to use C# 9.0&rsquo;s <code>init</code> keyword.
Quoting the <a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/init">documentation</a>:</p>
<blockquote>
<p>The init keyword defines an accessor method in a property or indexer. An
init-only setter assigns a value to the property or the indexer element
<strong>only</strong> during object construction. This enforces immutability so that once
the object is initialized, it can&rsquo;t be changed again.</p>
</blockquote>
<p>Consider the following class:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>    public class Person
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        public string FirstName { get; init; }
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>You can initialize it like this:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>    <span style="font-weight:bold">var</span> person = new Person { FirstName = <span style="font-style:italic">&#34;John&#34;</span> };
</span></span></code></pre></div><p>But this will fail:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>    <span style="font-weight:bold">var</span> person = new Person();
</span></span><span style="display:flex;"><span>    person.FirstName = <span style="font-style:italic">&#34;John&#34;</span>;  //Not allowed
</span></span></code></pre></div><p>For my project, which is a .NET Standard 2.0 library, I thought this approach
might be preferable to a parameter-enforced class constructor alternative.</p>
<p>To my surprise, however, when I tried the above, I got the following error:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>The predefined type &#39;System.Runtime.CompilerServices.IsExternalInit&#39; must be
</span></span><span style="display:flex;"><span>defined or imported in order to declare init-only setter
</span></span></code></pre></div><p>As it <a href="https://developercommunity.visualstudio.com/t/error-cs0518-predefined-type-systemruntimecompiler/1244809#TPIN-N1249582">turns out</a>, The <code>IsExternalInit</code> type is only included in the net5.0
(and subsequent) target frameworks, so one cannot use it right away in a
NetStandard 2.0 (or 2.1, for that matter) library.</p>
<p>In the dotnet world, when I encounter <em>&ldquo;type is not defined in version X&rdquo;</em>
scenario, I know I can get around the issue by making up the type on my own. A
quick lookup confirmed that this was the case, and the workaround is to add
the following somewhere in my source code:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>    namespace System.Runtime.CompilerServices
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        internal static class IsExternalInit {}
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>And presto, the <code>init</code> keyword is now fully available to my library.</p>
<p>While researching this matter, I stumbled into <a href="https://github.com/Sergio0694/PolySharp">PolySharp</a>,  a lovely
package that takes this workaround approach to new heights. What is it?</p>
<blockquote>
<p>PolySharp provides generated, source-only polyfills for C# language features,
to easily use all runtime-agnostic features downlevel. The package is
distributed as a source generator, so that it will automatically detect which
polyfills are needed depending on the target framework and project in use:
just add a reference to PolySharp, set your C# language version to latest,
and have fun!</p>
</blockquote>
<p>And it works! Just add a PolySharp reference, and almost all modern C# language
features become automagically available to your project, with no tricks around
polluting your code. What&rsquo;s also nice about PolySharp, is that it isn&rsquo;t a
dependency for your library; it only needs to be there at compile time.</p>
<p>Do you know what&rsquo;s funny? After all, I took a different route; no <code>init</code>
keyword is used anymore in my library, but that&rsquo;s for another story.</p>
]]></content:encoded>
    </item>
    <item>
      <title>A quick preview of the Blazor United prototype for .NET8</title>
      <link>https://nicolaiarocci.com/a-quick-preview-of-the-blazor-united-prototype-for-.net8/</link>
      <pubDate>Sat, 28 Jan 2023 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/a-quick-preview-of-the-blazor-united-prototype-for-.net8/</guid>
      <description>Steve Sanderson, the original creator of Blazor, recently posted a quick peek at some of the new Blazor prototypes they are experimenting with for .NET 8.
I think this looks great. Mixing client and server is a brilliant concept. Essentially one would be served with server-side Blazor on the first landing. While using the app, a background task would download the client-side stuff, ready to be consumed at any subsequent access.</description>
      <content:encoded><![CDATA[<p>Steve Sanderson, the original creator of Blazor, recently posted a quick peek
at some of the new Blazor prototypes they are experimenting with for .NET 8.</p>
<p>
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/48G_CEGXZZM" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<!-- raw HTML omitted -->
I think this looks great. Mixing client and server is a brilliant concept.
Essentially one would be served with server-side Blazor on the first landing.
While using the app, a background task would download the client-side stuff,
ready to be consumed at any subsequent access.</p>
<p>Blazor United is all experimental at the moment, but I&rsquo;m confident it will land
in one form or another, either in .NET 8 or later. I remember a few years ago
at a Microsoft MVP Summit in Redmond when Steve first introduced Blazor as &ldquo;an
experiment&rdquo;. If he puts in the effort to present his experiments to the public,
he&rsquo;s got approval for that, which means the project is a little more than just
an experiment at this point.</p>
<p>Blazor weakness so far has been more with the tooling than the features. Should
Blazor United come with some solid tooling, it will be a huge hit.</p>
]]></content:encoded>
    </item>
    <item>
      <title>On implementing the ASP.NET Core 7 rate-limiting middleware</title>
      <link>https://nicolaiarocci.com/on-implementing-the-asp.net-core-7-rate-limiting-middleware/</link>
      <pubDate>Fri, 23 Dec 2022 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/on-implementing-the-asp.net-core-7-rate-limiting-middleware/</guid>
      <description>Today, my last self-assigned duty before the Christmas break was to migrate our in-house rate-limiting implementation (based on the AspNetCoreRateLimiting third-party package) to the new, shiny rate-limiting middleware introduced by ASP.NET Core 7. While the process was relatively straightforward, I stumbled upon a few quirks I want to annotate here.
Our use case is simple. We use what the ASP.NET Core 7 documentation defines as a &amp;ldquo;fixed window limiter.&amp;rdquo; It uses a specified time window to limit requests.</description>
      <content:encoded><![CDATA[<p>Today, my last self-assigned duty before the Christmas break was to migrate
our in-house rate-limiting implementation (based on the
<a href="https://github.com/stefanprodan/AspNetCoreRateLimit">AspNetCoreRateLimiting</a> third-party package) to the new, shiny
<a href="https://devblogs.microsoft.com/dotnet/announcing-rate-limiting-for-dotnet/">rate-limiting middleware</a> introduced by ASP.NET Core 7. While the process
was relatively straightforward, I stumbled upon a few quirks I want to annotate
here.</p>
<p>Our use case is simple. We use what the ASP.NET Core 7 documentation defines as
a &ldquo;fixed window limiter.&rdquo; It uses a specified time window to limit requests.
When the time window expires, a new time window starts, and the request limit
is reset. Consider the following code (for convenience, I&rsquo;m using an extension
method):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>public static void ConfigureRateLimit(this IServiceCollection services)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    services.AddRateLimiter(x =&gt; 
</span></span><span style="display:flex;"><span>        x.AddFixedWindowLimiter(
</span></span><span style="display:flex;"><span>                policyName: &#34;fixed&#34;, options =&gt;
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    options.PermitLimit 1;
</span></span><span style="display:flex;"><span>                    options.Window = TimeSpan.FromSeconds(10);
</span></span><span style="display:flex;"><span>                    options.QueueLimit 1;
</span></span><span style="display:flex;"><span>                }));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It sets a window of 10 seconds. Within that window, a maximum of one request is
allowed. Exceeding requests will be queued and served at window reset. Notice
that we defined &ldquo;fixed&rdquo; as the policy name.</p>
<p>Once our policy is configured, we must instrument the app instance to use the
rate limiter, then we call <code>RequireRateLimiting</code> on our endpoints:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>app.UseRouting();  // I&#39;m mentioning this line for good reason, see below
</span></span><span style="display:flex;"><span>app.UseRateLimiter();
</span></span><span style="display:flex;"><span>app.UseEndpoints(endpoints =&gt; { endpoints.MapControllers()
</span></span><span style="display:flex;"><span>    .RequireRateLimiting(&#34;fixed&#34;); });
</span></span></code></pre></div><p>Nothing else is needed, really, for such a simple scenario. We could be more
sophisticated. We could opt for more advanced options, like a &ldquo;sliding windows
limiter&rdquo; or a &ldquo;bucket token limiter&rdquo;; we could apply rate limiting only to
specific endpoints or controllers or mix and match these options. I chose to
ditch hard-coded settings and read them from the configuration file. My
<em>appsettings.json</em> contains the following (with different vaues):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>  &#34;RateLimiter&#34;: {
</span></span><span style="display:flex;"><span>    &#34;PermitLimit&#34;: 1
</span></span><span style="display:flex;"><span>    &#34;Window&#34;: 10,
</span></span><span style="display:flex;"><span>    &#34;QueueLimit&#34;: 1
</span></span><span style="display:flex;"><span>  }
</span></span></code></pre></div><p>The <code>RateLimiter</code> class maps the json structure:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>public class RateLimiter
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    public int PermitLimit { get; set; }
</span></span><span style="display:flex;"><span>    public int Window { get; set; }
</span></span><span style="display:flex;"><span>    public int QueueLimit { get; set; }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The updated code looks like this:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>public <span style="font-weight:bold">static</span> void ConfigureRateLimit(this IServiceCollection services, 
</span></span><span style="display:flex;"><span>    IConfiguration configuration)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="font-weight:bold">var</span> rateLimiter = new RateLimiter();
</span></span><span style="display:flex;"><span>    configuration.GetSection(<span style="font-style:italic">&#34;RateLimiter&#34;</span>).Bind(rateLimiter);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    services.AddRateLimiter(x =&gt; 
</span></span><span style="display:flex;"><span>        x.AddFixedWindowLimiter(
</span></span><span style="display:flex;"><span>                policyName: <span style="font-style:italic">&#34;fixed&#34;</span>, options =&gt;
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    options.PermitLimit = rateLimiter.PermitLimit;
</span></span><span style="display:flex;"><span>                    options.Window = TimeSpan.FromSeconds(rateLimiter.Window);
</span></span><span style="display:flex;"><span>                    options.QueueLimit = rateLimiter.QueueLimit;
</span></span><span style="display:flex;"><span>                }));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I wish I could say it all worked splendidly on the first try. The API was
running fine, but it was not rate-limited. It looked like the middleware was
not being invoked, or it somehow failed miserably and silently. After an
embarrassingly long time, I figured out the problem: <code>UseRateLimiter</code>
<em>must</em> be called after <code>UseRouting</code>.</p>
<p>Before:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>app.UseRateLimiter();
</span></span><span style="display:flex;"><span>app.UseRouting();
</span></span><span style="display:flex;"><span>app.UseEndpoints(endpoints =&gt; { endpoints
</span></span><span style="display:flex;"><span>    .MapControllers().RequireRateLimiting(&#34;fixed&#34;); });
</span></span></code></pre></div><p>After:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>app.UseRouting();
</span></span><span style="display:flex;"><span>app.UseRateLimiter();
</span></span><span style="display:flex;"><span>app.UseEndpoints(endpoints =&gt; { endpoints.MapControllers()
</span></span><span style="display:flex;"><span>    .RequireRateLimiting(&#34;fixed&#34;); });
</span></span></code></pre></div><p>Simply switching two lines saved the day. I looked high and low but could not
find any reference to this requirement. If intended, it should be mentioned in
the documentation. If it is a bug, it should be fixed (and I should
probably open at ticket about it.)</p>
<p>Anyways, now the API is rate-limited via the new middleware. The first request
sent via Postman goes through. The second, rapid-fired one is queued and served
at window reset, as expected. A third request within the same window is bounced
back.</p>
<p>However:</p>
<ol>
<li>You get a <code>503 Service Unavailable</code> response. I&rsquo;m not in favor of 500
replies for this case. Five-hundreds should be reserved for server errors,
and that&rsquo;s not what we are dealing with here. My previous implementation
served a more appropriate <code>429 Too Many Requests</code>.</li>
<li>No <code>Retry-After</code> header is included with the response. I think it&rsquo;s
mandatory to instruct clients on what to do next.</li>
</ol>
<p>Luckily, the rate-limiting middleware allows for ample customization. On
defining our policy, we can attach a custom function to the <code>OnRejected</code> event.
The code below is updated to address both issues above:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>public <span style="font-weight:bold">static</span> <span style="font-weight:bold">class</span> ServicesConfiguration
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    public <span style="font-weight:bold">static</span> void ConfigureRateLimit(this IServiceCollection services, 
</span></span><span style="display:flex;"><span>        IConfiguration configuration) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="font-weight:bold">var</span> rateLimiter = new RateLimiter();
</span></span><span style="display:flex;"><span>        configuration.GetSection(<span style="font-style:italic">&#34;RateLimiter&#34;</span>).Bind(rateLimiter);
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        services.AddRateLimiter(x =&gt; 
</span></span><span style="display:flex;"><span>            x.AddFixedWindowLimiter(
</span></span><span style="display:flex;"><span>                    policyName: <span style="font-style:italic">&#34;fixed&#34;</span>, options =&gt; {
</span></span><span style="display:flex;"><span>                        options.PermitLimit = rateLimiter.PermitLimit;
</span></span><span style="display:flex;"><span>                        options.Window = TimeSpan.FromSeconds(rateLimiter.Window);
</span></span><span style="display:flex;"><span>                        options.QueueLimit = rateLimiter.QueueLimit;
</span></span><span style="display:flex;"><span>                    })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                // new code here:
</span></span><span style="display:flex;"><span>                .OnRejected = (context, _) =&gt; {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                // inject Retry-After header (too much line wrapping, I know)
</span></span><span style="display:flex;"><span>                <span style="font-weight:bold">if</span> (context.Lease.TryGetMetadata(MetadataName.RetryAfter, 
</span></span><span style="display:flex;"><span>                    out <span style="font-weight:bold">var</span> retryAfter)) {
</span></span><span style="display:flex;"><span>                    context.HttpContext.Response.Headers.RetryAfter =
</span></span><span style="display:flex;"><span>                        ((<span style="font-weight:bold">int</span>) retryAfter.TotalSeconds).ToString();
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                // <span style="font-weight:bold">return</span> a different status code
</span></span><span style="display:flex;"><span>                context.HttpContext.Response.StatusCode = 
</span></span><span style="display:flex;"><span>                    StatusCodes.Status429TooManyRequests;
</span></span><span style="display:flex;"><span>                <span style="font-weight:bold">return</span> new();
</span></span><span style="display:flex;"><span>            });
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>And that&rsquo;s all there is to it. I dropped the AspNetCoreRateLimiting dependency.
That is one great piece of software, and I am grateful to its author Stefan
Prodan and his contributors. As mentioned in <a href="/my-top-7-new-features-in-.net-7/">My Top 7 New Features in .NET
7</a>, they recently released a package that allows using Redis as a
rate-limiting backend. I might adopt it in the future.</p>
<p>Complete documentation for ASP.NET Core 7 rate-limiting middleware is available
<a href="https://learn.microsoft.com/en-us/aspnet/core/performance/rate-limit?view=aspnetcore-7.0">here</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>First impressions on JetBrains Rider 2022.3 update</title>
      <link>https://nicolaiarocci.com/first-impressions-on-jetbrains-rider-2022.3-update/</link>
      <pubDate>Mon, 12 Dec 2022 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/first-impressions-on-jetbrains-rider-2022.3-update/</guid>
      <description>Today I upgraded to JetBrains&amp;rsquo; Rider 2022.3. Startup speed has been enhanced, and full .NET 7 and C# 11 support is included. So far, my favorite feature is the conversion of regular and verbatim strings into their raw counterparts (it&amp;rsquo;s often the small, simple things.)
My second best is the fulls upport for WSL2 remote development. This one took a good while to come out of the trenches, but better late than never, I&amp;rsquo;d say.</description>
      <content:encoded><![CDATA[<p>Today I upgraded to JetBrains&rsquo; Rider 2022.3. Startup speed has been
enhanced, and full .NET 7 and C# 11 support is included. So far,  my favorite
feature is the conversion of regular and verbatim strings into their raw
counterparts (it&rsquo;s often the small, simple things.)</p>
<p><img loading="lazy" src="/images/cs-to-raw-strings.gif" alt=""  />
</p>
<p>My second best is the fulls upport for WSL2  remote development. This one took a
good while to come out of the trenches, but better late than never, I&rsquo;d say.</p>
<p>And the new experimental UI? That&rsquo;s neat too.</p>
<p><img loading="lazy" src="/images/uiux-newui-thumb.png" alt=""  />
</p>
<p>The full list of updates is available on their <a href="https://www.jetbrains.com/rider/whatsnew/2022-3/">What&rsquo;s New</a> page.</p>
]]></content:encoded>
    </item>
    <item>
      <title>My Top 7 New Features in .NET 7</title>
      <link>https://nicolaiarocci.com/my-top-7-new-features-in-.net-7/</link>
      <pubDate>Sun, 04 Dec 2022 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/my-top-7-new-features-in-.net-7/</guid>
      <description>The other day we did a .NET 7 Spotlight event at this month&amp;rsquo;s DevRomagna meetup. The speakers were Ugo Lattanzi and me. In my session, I chose to talk about my top 7 new features in .NET 7 (pun intended.) What follows is a mix of my preparation notes and what I ended up really saying1.
1. Performance Since the initial release of &amp;ldquo;new dotnet&amp;rdquo; (.NET Core), performance has always been a critical goal for the .</description>
      <content:encoded><![CDATA[<p>The other day we did a <a href="https://www.meetup.com/it-IT/devromagna/events/289709131/">.NET 7 Spotlight</a> event at this month&rsquo;s
<a href="https://www.meetup.com/it-IT/devromagna/">DevRomagna</a> meetup. The speakers were <a href="https://twitter.com/imperugo">Ugo Lattanzi</a> and me. In my
session, I chose to talk about my top 7 new features in .NET 7 (pun intended.)
What follows is a mix of my preparation notes and what I ended up really
saying<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<h2 id="1-performance">1. Performance</h2>
<p>Since the initial release of &ldquo;new dotnet&rdquo; (.NET Core), performance has always
been a critical goal for the .NET team. Starting with .NET 5, performance gains
have been skyrocketing. .NET 6 was <em>a lot</em> faster than 5, and now, well, I&rsquo;m
surprised by the remarkable performance improvements in .NET 7. Stephen Toub
posted a remarkably long (255 printed pages!) <a href="https://devblogs.microsoft.com/dotnet/performance_improvements_in_net_7">in-depth analysis of the
performance improvements in .NET 7</a>. one That was followed by articles
dedicated to <a href="https://devblogs.microsoft.com/dotnet/performance-improvements-in-aspnet-core-7/">ASP.NET Core 7</a> and <a href="https://devblogs.microsoft.com/dotnet/dotnet-7-performance-improvements-in-dotnet-maui/">MAUI 7</a> performance gains. At .NETConf
2022, a particular slide caught everyone&rsquo;s attention.</p>
<p><img loading="lazy" src="/images/dotnetconf22.png" alt=""  />
</p>
<p>I recall seeing the same slide at the .NET 5 release, so this one is must be
updated version. I&rsquo;m more impressed with the gRPC graph than the big &ldquo;11x
faster than Node&rdquo; one. Being faster than Node doesn&rsquo;t break the news these days,
but being quicker than Go, C++ and Rust? That&rsquo;s one bold statement you have
right there.</p>
<p>An <a href="https://dusted.codes/how-fast-is-really-aspnet-core">exciting article</a> surfaced a while ago on this specific topic. In it,
Dustin Moris Gorski presents an in-depth analysis of the ASP.NET Core 7 code
used for the TechEmpower Framework Benchmark referenced in the above slide. The
results are&hellip; fascinating. That code is undoubtedly <em>not</em> what mere mortals
tend to run in their production systems. It is super-performance-optimized,
often ditching canonical, built-in, and wildly adopted features in favor of
low-level, high-performance and precisely hand-crafted alternatives. Dustin&rsquo;s
article is a masterpiece for several reasons; I suggest you invest your time
<a href="https://dusted.codes/how-fast-is-really-aspnet-core">reading it</a>.</p>
<p>But yeah, despite this glitch, the takeaway is that .NET 7 is speedy, faster
than previous versions, and on par with, if not (far?) superior to, most stacks
and frameworks. The <a href="https://devblogs.microsoft.com/dotnet/performance_improvements_in_net_7">Stephen Toub&rsquo;s article</a> is a testament to the massive
work done and the achievements obtained.</p>
<p>Most importantely, we get most of these speed benefits for free, just by
upgrading to .NET 7. And the good new is, the upgrade is as easy as changing
the framework moniker from, say, <code>net6.0</code> to <code>net7.0</code> and upgrading the
Microsoft dependencies to v7.0.0.</p>
<h2 id="2-c-11-required-modifier">2. C# 11 <code>required</code> modifier</h2>
<p>As a consequence of the C# release cycle alignment to that of.NET itself (which
is much faster), recent versions of C# see fewer features announcements than in
the past. A good thing in my opinion. Of the several appreciable new features
coming with C# 11, a remarkable one is the <a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/required"><code>required</code> modifier</a>.</p>
<p>When you enable nullable checks in a project, non-nullable string properties
are flagged with warning that they should be initialized with a non-null value
when exiting the constructor:</p>
<p><img loading="lazy" src="/images/required-keyword1.png" alt=""  />
</p>
<p>A common workaround has been these properties them with a <code>null!</code> value. That
is like telling the compiler that we know they should be initialized with a
non-nullable, but well, let&rsquo;s initialize them with a null value first, just in
case. It&rsquo;ll all be sorted later in the code. Somewhat awkward and prone to
errors. Also, battling the compiler like that is a tedious task.</p>
<p>Enter the <code>required</code> keyword. When you flag a property with <code>required,</code> the
IntelliSense engine will report an error if the property value is not set <em>at
initialization</em>, not at declaration.</p>
<p><img loading="lazy" src="/images/required-keyword2.png" alt=""  />
</p>
<p>When someone initializes our class instance, he/she&rsquo;s <em>required</em> to set an
explicit value for our property. Notice how we went from a warning (which
will compile) to an error (which won&rsquo;t compile). Once you start using this
feature, it feels so obvious and natural that you wonder why it wasn&rsquo;t there
right from start.</p>
<h2 id="3-c-11-raw-string-literals">3. C# 11 raw string literals</h2>
<p>In C# 11, wrapping a string with triple-double-quotes makes it a <a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-11.0/raw-string-literal">raw
literal</a>. Its main benefits are that no escaping of double-quotes is
necessary, and newlines are allowed within the string.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span><span style="font-weight:bold">var</span> xml = <span style="font-style:italic">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">          &lt;element attr=&#34;content&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">            &lt;body&gt;
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">            &lt;/body&gt;
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">          &lt;/element&gt;
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">          &#34;&#34;&#34;</span>;
</span></span></code></pre></div><p>The code looks natural, and no runtime costs for specialized string
manipulation are required. One caveat is that string literals naturally remove
the indentation when producing the final literal value. The snippet above
prints as:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>&lt;element attr=&#34;content&#34;&gt;
</span></span><span style="display:flex;"><span>  &lt;body&gt;
</span></span><span style="display:flex;"><span>  &lt;/body&gt;
</span></span><span style="display:flex;"><span>&lt;/element&gt;
</span></span></code></pre></div><p>We can disable indentation removal like so:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span><span style="font-weight:bold">var</span> xml = <span style="font-style:italic">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">          &lt;element attr=&#34;content&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">            &lt;body&gt;
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">            &lt;/body&gt;
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">          &lt;/element&gt;
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">&#34;&#34;&#34;</span>;
</span></span></code></pre></div><p>String interpolation is also supported:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span><span style="font-weight:bold">var</span> json = $$<span style="font-style:italic">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">             {
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">                &#34;summary&#34;: &#34;text&#34;,
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">                &#34;length&#34; : {{value.Length}},
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">             };
</span></span></span><span style="display:flex;"><span><span style="font-style:italic">             &#34;&#34;&#34;</span>
</span></span></code></pre></div><p>In hindsight, like the <code>required</code> modifier, raw string literals appear as
obvious.</p>
<h2 id="4-built-in-container-support">4. Built-in container support</h2>
<p>.NET 7 has <a href="https://devblogs.microsoft.com/dotnet/announcing-builtin-container-support-for-the-dotnet-sdk/">built-in container support</a>, meaning that <code>dotnet publish</code> can
now output to a container image instead of a directory. We control image names,
tags, and other settings (like the base image) via dedicated <code>.csproj</code> tags. Two
requirements:</p>
<ul>
<li>Docker must be running when we issue the <code>publish</code> command;</li>
<li>The <code>Microsoft.NET.Build.Containers</code> package must be added to the project as
a package reference.</li>
</ul>
<p>In my demo, I had a small console application that I published to a docker
image by simply issuing the following command:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ dotnet publish --os linux --arch x64 /t:PublishContainer -c Release
</span></span></code></pre></div><p>I did not mention a Dockerfile, and that&rsquo;s because it is not needed anymore.
All my projects deploy to docker containers and are already migrated to .NET 7.
I&rsquo;m currently using Dockerfiles, but I&rsquo;ll be experimenting with this
alternative in the coming weeks, both with builds and remote CI builds.</p>
<h2 id="5-native-aot">5. Native AOT</h2>
<p><a href="https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/">Native AOT</a> produces a standalone executable in the target platform&rsquo;s file
format, with no external dependencies. It&rsquo;s native, with no IL or JIT involved,
and provides fast startup time and a small, self-contained deployment.</p>
<p>In my demo, I just needed to add a <code>&lt;PublishAot&gt;true&lt;/PublishAot&gt;</code> tag to the
<code>.csproj</code>, and then the <code>dotnet publish -c Release</code> command produced a
single-file, macOS native executable. You can set the destination platform at
build-time like so:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ dotnet publish -r win-x64 -c Release
</span></span></code></pre></div><p>Native AOT will be determinant in a number of use cases, like
multi-cloud-deployments, lambda functions, and, in general, hyper-scale
services. ASP.NET Core is currently not supported, so we&rsquo;re limited to console
apps.</p>
<h2 id="6-and-7-rate-limiting-and-output-caching">6 and 7. Rate-limiting and output caching</h2>
<p>Ok, these are two, not one. Luckily, my pal Ugo, who was demoing ASP.NET Core 7
parts after me, took charge of showing these.</p>
<p>I briefly mentioned that rate-limiting and output caching are key features in
mature production systems. Until today, we had to bake them in-house or rely on
third-party packages. I&rsquo;ve been using LazyCache and AspNetCoreRateLimit myself.
The latter <a href="https://github.com/stefanprodan/AspNetCoreRateLimit/issues/382">recently acknowledged</a> the arrival of rate-limiting in .NET 7 and
embraced it in a new package that offers Redis as a rate-limiting backend.
<a href="https://devblogs.microsoft.com/dotnet/announcing-rate-limiting-for-dotnet/">Rate-limiting</a> and <a href="https://learn.microsoft.com/en-us/aspnet/core/performance/caching/output?view=aspnetcore-7.0">output caching</a> are now part of the ASP.NET Core
framework, and that&rsquo;s where they belong.</p>
<h2 id="8-minimal-apis-group-routes">8. Minimal APIs group routes</h2>
<p>I know I said 7. I don&rsquo;t use minimal APIs in production yet, but <a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-7.0#route-groups">group
routing</a> is beautiful and something I&rsquo;ll be employing on the first
occasion. During the meetup, an interesting (and much-expected) discussion
ensued on the usefulness of minimal APIs. Veterans of many battles don&rsquo;t deem
them necessary, especially in real-world use cases, which is actually accurate:
one can keep relying on the canonical MVC approach. The sentiment was that
Minimal APIs are mostly targeted to newcomers, which is probably true<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. As
someone coming from the Python REST ecosystem, I dig them a lot. They evolve
rapidly and I&rsquo;m sure we&rsquo;ll soon see them in action in complex, real scenarios.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>To Caesar what is Caesar&rsquo;s, short on time, I recycled both the idea and the materials from James Montemagno&rsquo;s <a href="https://www.youtube.com/watch?v=0BvCzZ9P7UY">excellent video</a> on the same the topic.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Back when Minimal APIs were about to debut, I wrote <em><a href="https://nicolaiarocci.com/will-.net-6-minimal-apis-turn-heads?">Will .NET 6 Minimal APIs turn heads?</a></em>, with some musings on their effectiveness and target audience.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>The Origins of Python</title>
      <link>https://nicolaiarocci.com/the-origins-of-python/</link>
      <pubDate>Sat, 26 Nov 2022 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/the-origins-of-python/</guid>
      <description>Yesterday the creator of the Python language, Guido van Rossum, tweeted about The Origins of Python, an essay by his mentor, Lambert Meertens.
&amp;ldquo;On Sunday, June 21, 1970, in an office building on Great Portland Street in London, a teletype sprang to life. Under the heading &amp;ldquo;HAPPY FAMILIES,&amp;rdquo; the machine rattled out a sequence of English sentences, such as &amp;ldquo;THE DOG SITS ON THE BABY&amp;rdquo; and &amp;ldquo;UNCLE TED PLAYS WITH SISTER.</description>
      <content:encoded><![CDATA[<p>Yesterday the creator of the Python language, Guido van Rossum, <a href="https://twitter.com/gvanrossum/status/1596268474518876160">tweeted</a>
about <a href="https://inference-review.com/article/the-origins-of-python">The Origins of Python</a>, an essay by his mentor, Lambert Meertens.</p>
<blockquote>
<p>&ldquo;On Sunday, June 21, 1970, in an office building on Great Portland Street in
London, a teletype sprang to life. Under the heading &ldquo;HAPPY FAMILIES,&rdquo; the
machine rattled out a sequence of English sentences, such as &ldquo;THE DOG SITS ON
THE BABY&rdquo; and &ldquo;UNCLE TED PLAYS WITH SISTER.&rdquo; The &ldquo;Happy Families&rdquo; program
that produced this output had been written that same weekend by someone with
no prior programming experience, a participant in a workshop organized by the
Computer Arts Society offering a course in &ldquo;non-numerical programming.&rdquo;</p>
</blockquote>
<blockquote>
<p>Almost fifty years later, on October 26, 2019, in Istanbul, the eyes of a
young woman lit up as she managed to get her very first program to run. She
was attending a workshop organized by Django Girls, an international
non-profit organization aiming to empower women through free, one-day
programming workshops.</p>
</blockquote>
<blockquote>
<p>The programming language used at the London workshop in 1970 was TELCOMP, a
simple unstructured language similar to BASIC—not BASIC as it is now, but
unstructured BASIC as it was then. The programming language taught at the
Istanbul workshop in 2019 was Python, a programming language designed by Guido
van Rossum that has become wildly popular, steadily gaining in popularity
since an inconspicuous public release in 1991. As far apart as these events
are, both in time and geography, an arc of history connects them.&rdquo;</p>
</blockquote>
<p>It is a magnificent article. If you&rsquo;re passionate about Python, and programming
languages in general, make sure to read it.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>In the same vein, another outstanding reading would be <a href="https://dl.acm.org/doi/pdf/10.1145/3386325">The Early History of F#</a>.
[rss]: <a href="https://nicolaiarocci.com/index.xml">https://nicolaiarocci.com/index.xml</a>
[tw]: <a href="http://twitter.com/nicolaiarocci">http://twitter.com/nicolaiarocci</a>
[nl]: <a href="https://buttondown.email/nicolaiarocci">https://buttondown.email/nicolaiarocci</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Software quality is systemic</title>
      <link>https://nicolaiarocci.com/software-quality-is-systemic/</link>
      <pubDate>Thu, 15 Sep 2022 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/software-quality-is-systemic/</guid>
      <description>Jacob Kaplan-Moss&amp;rsquo;s hot take on software quality:
Software quality is more the result of a system designed to produce quality, and not so much the result of individual performance. That is: a group of mediocre programmers working with a structure designed to produce quality will produce better software than a group of fantastic programmers working in a system designed with other goals.
This leads to the insightful conclusion:
Instead of spending tons of time and effort on hiring because you believe that you can “only hire the best”, direct some of that effort towards building a system that produces great results out of a wider spectrum of individual performance.</description>
      <content:encoded><![CDATA[<p>Jacob Kaplan-Moss&rsquo;s hot take on software quality:</p>
<blockquote>
<p><strong>Software quality is more the result of a system designed to produce
quality, and not so much the result of individual performance</strong>. That is:
a group of mediocre programmers working with a structure designed to produce
quality will produce better software than a group of fantastic programmers
working in a system designed with other goals.</p>
</blockquote>
<p>This leads to the insightful conclusion:</p>
<blockquote>
<p>Instead of spending tons of time and effort on hiring because you believe
that you can “only hire the best”, direct some of that effort towards
building a system that produces great results out of a wider spectrum of
individual performance.</p>
</blockquote>
<p>But what does he mean by a <em>system designed for quality</em>? Read it all <a href="https://jacobian.org/2022/sep/9/quality-is-systemic/">here</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>My Playwright session at WebDay 2022</title>
      <link>https://nicolaiarocci.com/my-playwright-session-at-webday-2022/</link>
      <pubDate>Fri, 01 Apr 2022 06:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/my-playwright-session-at-webday-2022/</guid>
      <description>If you understand Italian, the recording of my Playwright session at UGIdotNET&amp;rsquo;s WebDay 2022 is now available on YouTube1. Playwright is a phenomenal cross-browser, cross-platform, cross-language, single-API, mobile-friendly front-end testing tool.
I&amp;rsquo;m looking forward to giving the same session in English sooner or later, but I should first win my laziness and start looking for exciting events with open CFPs. If you happen to know one, please let me know.</description>
      <content:encoded><![CDATA[<p>If you understand Italian, the recording of my Playwright session at
UGIdotNET&rsquo;s <a href="https://www.ugidotnet.org/e/2840/Web-Day-2022">WebDay 2022</a> is now available on YouTube<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Playwright is
a phenomenal cross-browser, cross-platform, cross-language, single-API,
mobile-friendly front-end testing tool.</p>
<p>I&rsquo;m looking forward to giving the same session in English sooner or later, but
I should first win my laziness and start looking for exciting events with open
CFPs. If you happen to know one, please let me know.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/BaY9WIHUwFc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>A couple weeks later I also presented at <a href="https://www.meetup.com/it-IT/DevRomagna/events/284626987/">DevRomagna</a>, the local meetup I run.
[rss]: <a href="https://nicolaiarocci.com/index.xml">https://nicolaiarocci.com/index.xml</a>
[tw]: <a href="http://twitter.com/nicolaiarocci">http://twitter.com/nicolaiarocci</a>
[nl]: <a href="https://buttondown.email/nicolaiarocci">https://buttondown.email/nicolaiarocci</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Lay Back and Keep Smiling</title>
      <link>https://nicolaiarocci.com/lay-back-and-keep-smiling/</link>
      <pubDate>Sun, 23 Jan 2022 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/lay-back-and-keep-smiling/</guid>
      <description>Tomorrow we&amp;rsquo;re releasing a major project on which we&amp;rsquo;ve been working non-stop for two and a half years. No matter how many years in the trenches, release day always makes me a bit nervous. Experience does help. I know there will be problems, and we will solve them. Some customers will complain, and those will be the most vocal. The vast majority of them will appreciate the effort, enjoy the features, and stay silent.</description>
      <content:encoded><![CDATA[<p>Tomorrow we&rsquo;re releasing a major project on which we&rsquo;ve been working non-stop
for two and a half years. No matter how many years in the trenches, release day
always makes me a bit nervous. Experience does help. I know there will be
problems, and we will solve them. Some customers will complain, and those will
be the most vocal. The vast majority of them will appreciate the effort, enjoy
the features, and stay silent. That&rsquo;s how it works. We&rsquo;ll do just fine.</p>
<p>As you can imagine, it&rsquo;s a working weekend for me. While hacking in the early
morning, I listened to <a href="https://open.spotify.com/playlist/1WjnPw3PbQJOsEpEgJsz5f?si=53a83f9c31484310">The Mildlife Very Fantastic Playlist</a> when a curious
tune caught my attention<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. I glanced over to Spotify, and my eyes fell on
the most appropriate CD cover for launch day ever.</p>
<p><img loading="lazy" src="/images/laidback-keepsmiling.jpg" alt="Laid Back&amp;hellip;Keep Smiling"  />
</p>
<p>Whatever happens tomorrow, lay back and keep smiling.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Track #8, <em>Fly Away / Walking in the Sunshine</em>
[rss]: <a href="https://nicolaiarocci.com/index.xml">https://nicolaiarocci.com/index.xml</a>
[tw]: <a href="http://twitter.com/nicolaiarocci">http://twitter.com/nicolaiarocci</a>
[nl]: <a href="https://buttondown.email/nicolaiarocci">https://buttondown.email/nicolaiarocci</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>My ASP.NET 5 migration to .NET 6</title>
      <link>https://nicolaiarocci.com/my-asp.net-5-migration-to-.net-6/</link>
      <pubDate>Sun, 14 Nov 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/my-asp.net-5-migration-to-.net-6/</guid>
      <description>I spent the last few days migrating our ASP.NET REST services, MVC web applications and Blazor server apps to .NET 6. Overall the process was pretty straightforward. The few issues I went through were easy to solve and well documented. Things got more involved with the EF Core 6 transition, especially with the Npgsql Entity Framework Core Provider.
The official ASP.NET Core 5.0 to 6.0 migration guide was my first stop.</description>
      <content:encoded><![CDATA[<p>I spent the last few days migrating our ASP.NET REST services, MVC web
applications and Blazor server apps to .NET 6. Overall the process was pretty
straightforward. The few issues I went through were easy to solve and well
documented. Things got more involved with the EF Core 6 transition, especially
with the Npgsql Entity Framework Core Provider.</p>
<p>The official <a href="https://docs.microsoft.com/en-us/aspnet/core/migration/50-to-60">ASP.NET Core 5.0 to 6.0 migration guide</a> was my first stop. It
offers the perfect entry point, rich with in-depth links. At this stage, I am
not interested in switching to the new .NET 6 minimal hosting model (aka
Minimal APIs). I think it&rsquo;s a significant improvement, and we will likely adopt
it for new projects, but our production projects aren&rsquo;t going to be refactored
right away. Should minimal APIs also prove to be remarkably performant, we&rsquo;ll
reconsider them<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>The first step was updating the target framework moniker to <code>net6.0</code>.</p>
<pre><code>&lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt;
  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;
</code></pre>
<p>Then, I updated all <code>Microsoft.AspNetCore.*</code> and <code>Microsoft.Extensions.*</code> package
references to version 6.0.0.</p>
<pre><code>&lt;ItemGroup&gt;
  &lt;PackageReference Include=&quot;Microsoft.AspNetCore.JsonPatch&quot; Version=&quot;6.0.0&quot; /&gt;
  &lt;PackageReference Include=&quot;Microsoft.Extensions.Caching.[...]&quot; Version=&quot;6.0.0&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<p>That&rsquo;s all I needed to do to update the MVC application. The only other thing
left for me was to update Dockerfile&rsquo;s <code>FROM</code> statements to pull the new .NET
6 image:</p>
<pre><code># build stage
FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build
WORKDIR /build
[..]
# final stage/image
FROM mcr.microsoft.com/dotnet/aspnet:6.0
[..]
</code></pre>
<p>Migrating the WebApi/REST services required more work. I got a few errors and
warnings, either at compile or runtime. Let&rsquo;s go through them one by one.</p>
<h3 id="new-jsonserializer-source-generator-overloads">New <code>JsonSerializer</code> source generator overloads</h3>
<blockquote>
<p>The call is ambiguous between the following methods or properties:
&lsquo;JsonSerializer.Serialize(TValue, JsonSerializerOptions?)&rsquo; and
&lsquo;JsonSerializer.Serialize(TValue, JsonTypeInfo)&rsquo;&quot;</p>
</blockquote>
<p>In .NET 6, the <code>Sytem.Text.Json.JsonSerializer</code> <a href="https://docs.microsoft.com/en-us/dotnet/core/compatibility/serialization/6.0/jsonserializer-source-generator-overloads">acquired two new overloads</a> that
support pre-generated type information via source-generators. Previously, you
could write code that passed <code>null</code> (or <code>default</code>) as the value for the
<code>JsonSeralizerOptions</code> parameter:</p>
<pre><code>entity.Property(e =&gt; e.Value)
    .HasConversion(
        v =&gt; JsonSerializer.Serialize(v, null),
        v =&gt; JsonSerializer.Deserialize(v, null));
</code></pre>
<p>However, the new source-generator-enabled overloads will cause ambiguity if you
pass <code>null</code>. The solution was to add simply an explicit cast to the intended
target:</p>
<pre><code>entity.Property(e =&gt; e.Value)
    .HasConversion(
        v =&gt; JsonSerializer.Serialize(v, (JsonSerializerOptions)null), 
        v =&gt; JsonSerializer.Deserialize(v, (JsonSerializerOptions)null));
</code></pre>
<h3 id="the-rngcryptoserviceprovider-is-now-obsolete">The <code>RNGCryptoServiceProvider</code> is now obsolete</h3>
<blockquote>
<p>SYSLIB0023: RNGCryptoServiceProvider is obsolete</p>
</blockquote>
<p>As it turns out, <code>RNGCryptoServiceProvider</code> is <a href="https://docs.microsoft.com/en-us/dotnet/fundamentals/syslib-diagnostics/syslib0023">marked as obsolete in .NET 6</a>. The
new preferred way to generate a random number is using one of the
<code>RandomNunmberGenerator</code> static methods.</p>
<pre><code>  // old
  using var rng = new RNGCryptoServiceProvider();
  var uintBuffer = new byte[sizeof(uint)];
  rng.GetBytes(uintBuffer);
  var num = BitConverter.ToUInt32(uintBuffer, 0);

  // new
  using var rng = RandomNumberGenerator.Create();
  var uintBuffer = new byte[sizeof(uint)];
  rng.GetBytes(uintBuffer);
  var num = BitConverter.ToUInt32(uintBuffer, 0);
</code></pre>
<p>The two issues above are essentially the only ones I met with .NET 6 itself. As
mentioned, I also encountered a few EF Core 6 annoyances. They are listed
below.</p>
<h3 id="new-imodelcachekeyfactorycreate-overload">New <code>IModelCacheKeyFactory.Create()</code> overload</h3>
<blockquote>
<p>The requested configuration is not stored in the read-optimized model, please
use DbContext.GetService&lt;IDesignTimeModel&gt;().Model.</p>
</blockquote>
<p>If, like me, you happen to have a custom <code>IModelCacheKeyFactory</code>
implementation, you will likely get this error at runtime. Starting with EF
Core 6, <a href="https://github.com/dotnet/EntityFramework.Docs/pull/3305/files">you must implement</a> the new overload of the <code>Create</code> method that
handles design-time model caching.</p>
<pre><code>// old
public class DynamicModelCacheKeyFactoryDesignTimeSupport : IModelCacheKeyFactory
{
   public object Create(DbContext context) =&gt; 
     context is DynamicContext dynamicContext
       ? (context.GetType(), dynamicContext.UseIntProperty)
       : (object)context.GetType();

    public object Create(DbContext context) =&gt; Create(context, false);
}

// new
public class DynamicModelCacheKeyFactoryDesignTimeSupport : IModelCacheKeyFactory
{
   public object Create(DbContext context, bool designTime) =&gt; 
     context is DynamicContext dynamicContext
       ? (context.GetType(), dynamicContext.UseIntProperty, designTime)
       : (object)context.GetType();

    public object Create(DbContext context) =&gt; Create(context, false);
}
</code></pre>
<h3 id="nested-optional-dependents-with-no-required-properties">Nested optional dependents with no required properties</h3>
<blockquote>
<p>Entity type &lsquo;[EntityType]&rsquo; is an optional dependent using table sharing and
containing other dependents without any required non shared property to
identify whether the entity exists. If all nullable properties contain a null
value in database then an object instance won&rsquo;t be created in the query
causing nested dependent&rsquo;s values to be lost. Add a required property to
create instances with null values for other properties or mark the incoming
navigation as required to always create an instance.</p>
</blockquote>
<p>The message above is a consequence of a <a href="https://docs.microsoft.com/en-us/ef/core/what-is-new/ef-core-6.0/breaking-changes#high-impact-changes">high-impact breaking change</a> introduced
in EF Core 6.0. In the past, you could have models with nested optional dependents
sharing the same table, each with no required properties. In such
circumstances, data loss could occur (see the <a href="https://docs.microsoft.com/en-us/ef/core/what-is-new/ef-core-6.0/breaking-changes#high-impact-changes">documentation</a> for details
and examples). My solution was to mark at least one property of dependent
models with the <code>RequiredAttribute</code> (which, in every single case, was the right
thing to do anyway)</p>
<h3 id="the-efcorenamingconventions-package-is-missing-a-method">The <code>EFCore.NamingConventions</code> package is missing a method</h3>
<blockquote>
<p>Method &lsquo;GetServiceProviderHashCode&rsquo; in type &lsquo;ExtensionInfo&rsquo; from assembly
&lsquo;EFCore.NamingConventions&quot;</p>
</blockquote>
<p>The message says it all: there&rsquo;s currently a missing method in the latest
stable version of the <code>EFCore.NamingConventions</code> package. At the time of this
writing, <code>v6.0</code> of the package has not been released, but there is a pre-release
available that includes the missing implementation. Switch to <code>v6.0.0-rc.1</code> and
you&rsquo;ll be fine (ticket is <a href="https://github.com/efcore/EFCore.NamingConventions/issues/108">here</a>). I&rsquo;m sure the new stable release will be
out by the time you read this.</p>
<p><em>Update: EFCore.NamingConventions v6 has now been released.</em></p>
<h3 id="the-npgsql-timestamps-breaking-change">The Npgsql timestamps breaking change</h3>
<p>While the above situations were quick to fix, the new, updated Npgsql provider
offers a different threat level. There&rsquo;s <a href="https://www.npgsql.org/efcore/release-notes/6.0.html#major-changes-to-timestamp-mapping">one significant breaking change</a>
that impacts <code>DateTime</code> fields (timestamps). As the documentation suggests, it is
possible to opt out of this change to preserve backward compatibility, but
I decided to take the plunge and embrace it. The short version is that
Postgres&rsquo;s <code>timestamp</code> fields (&rsquo;timestamps without timezone&rsquo;) are changed to
<code>timestampz</code> (&rsquo;timestamps with time zones&rsquo;). In the application, when dealing
with Npgsql, <code>DateTime</code> properties must be treated as UTC by setting the <code>Kind</code>
property to <code>DateTimeKind.UTC</code>. When you run the migration tool, a migration is
created to accomodate the change, which can impact existing data. Make sure you
read the <a href="https://www.npgsql.org/efcore/release-notes/6.0.html#migrating-columns-from-timestamp-to-timestamptz">detailed notes</a> to assess the impact on your data. I let the
migration run, then updated models configuration by setting a custom
<code>DateTimeUtcValueConverter</code> for DateTime properties:</p>
<pre><code>// custom DateTime converter
protected readonly ValueConverter DateTimeToUtcConverter = 
  new ValueConverter&lt;DateTime, DateTime&gt;(
    v =&gt; DateTime.SpecifyKind(v, DateTimeKind.Utc),
    v =&gt; v);

// Entity configuration 
internal class MyEntityConfiguratin : IEntityTypeConfiguration&lt;MyEntity&gt; 
{
  public override void Configure(EntityTypeBuilder&lt;MyEntity&gt; builder)
  {
    builder.Property(o =&gt; o.Date).HasConversion(DateTimeToUtcConverter);
  }
}
</code></pre>
<p>Now Postgres timestamps are stored as &rsquo;timestamp with timezone (timestampz).
Actual values are UTC as before. A custom converter is attached to the <code>Date</code>
property at the application level to ensure that values are correctly handled.</p>
<p>Our stack is now fully running on .NET 6. Upgrading a standard ASP.NET
5 project to .NET 6 revealed to be relatively straightforward. The EF Core
6.0 migration can be more involved, while the Npgsql 6 migration requires some
attention but, remember, you can always opt-out of the delicate timestamps
change. Was the upgrade worth it? I think so for a few reasons. First, .NET
6 is LTS, while .NET 5 will be out of support in six months. Second, .<a href="https://devblogs.microsoft.com/dotnet/announcing-net-6">NET 6 is
the fastest yet</a>, with a remarkable margin (EF Core 6 alone is <a href="https://docs.microsoft.com/en-us/ef/core/what-is-new/ef-core-6.0/whatsnew#improved-performance-on-techempower-fortunes">70%
faster</a>.) While the primary migration is done, there are a lot of changes
and new features that are worth considering for our codebase, which is
something we will be doing in the upcoming weeks.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>My initial ramblings on Minimal APIs are available <a href="/will-.net-6-minimal-apis-turn-heads/">here</a>.
[rss]: <a href="https://nicolaiarocci.com/index.xml">https://nicolaiarocci.com/index.xml</a>
[tw]: <a href="http://twitter.com/nicolaiarocci">http://twitter.com/nicolaiarocci</a>
[nl]: <a href="https://buttondown.email/nicolaiarocci">https://buttondown.email/nicolaiarocci</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>ASP.NET 6 Migration Cheatsheet and FAQ</title>
      <link>https://nicolaiarocci.com/asp.net-6-migration-cheatsheet-and-faq/</link>
      <pubDate>Thu, 23 Sep 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/asp.net-6-migration-cheatsheet-and-faq/</guid>
      <description>David Fowler has a very informative gist up on GitHub. It&amp;rsquo;s titled [Migration to ASP.NET Core. NET6][3] and it&amp;rsquo;s filled with details, recipes and FAQs on migrating an ASP.NET Core 5 web app to ASP.NET Core 61. The focus is on the new, streamlined hosting model, also known as Minimal APIs2. To be clear, You don&amp;rsquo;t have to move to the new model. As the FAQ section emphasizes:
Do I have to migrate to the new hosting model</description>
      <content:encoded><![CDATA[<p>David Fowler has a very informative gist up on GitHub. It&rsquo;s titled [Migration
to ASP.NET Core. NET6][3] and it&rsquo;s filled with details, recipes and FAQs on
migrating an ASP.NET Core 5 web app to ASP.NET Core 6<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. The focus is on the
new, streamlined hosting model, also known as Minimal APIs<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. To be clear,
You don&rsquo;t <em>have</em> to move to the new model. As the FAQ section emphasizes:</p>
<blockquote>
<p>Do I have to migrate to the new hosting model</p>
<p>No, you don&rsquo;t have to. It&rsquo;s the preferred way to host ASP.NET Core
applications from .NET 6 and onwards but you aren&rsquo;t forced to change your
project layout. This means you can upgrade from .NET 5 to .NET 6.0 by
changing the target framework in your project file from net5.0 to net6.0.</p>
</blockquote>
<p>.NET6 Release Candidate is out, so the guide is unlikely to receive updates,
but I&rsquo;m sure that David will be ready to do so if required.</p>
<p>We are about to release several brand new web services in the coming weeks.
They are all ASP.NET 5, currently in beta, but before release we&rsquo;re likely to
upgrade them to NET6. NET6 is LTS, NET5 isn&rsquo;t, and offers significant
advantages, remarkable [performance gains][2] included.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The Core tag was dropped in NET5, and it was a good move. The reason why the insist on using it with ASP.NET eludes me.
[rss]: <a href="https://nicolaiarocci.com/index.xml">https://nicolaiarocci.com/index.xml</a>
[tw]: <a href="http://twitter.com/nicolaiarocci">http://twitter.com/nicolaiarocci</a>
[nl]: <a href="https://buttondown.email/nicolaiarocci">https://buttondown.email/nicolaiarocci</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://nicolaiarocci.com/will-.net-6-minimal-apis-turn-heads/">Will .NET 6 Mininal APIs turn heads?</a> collects my thoughts on the subject.
[2]: <a href="https://nicolaiarocci.com/performance-improvements-in-.net6/">https://nicolaiarocci.com/performance-improvements-in-.net6/</a>
[3]: <a href="https://gist.github.com/davidfowl/0e0372c3c1d895c3ce195ba983b1e03d">https://gist.github.com/davidfowl/0e0372c3c1d895c3ce195ba983b1e03d</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Performance improvements in .NET6</title>
      <link>https://nicolaiarocci.com/performance-improvements-in-.net6/</link>
      <pubDate>Fri, 03 Sep 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/performance-improvements-in-.net6/</guid>
      <description>I&amp;rsquo;m pretty psyched about the upcoming .NET6 release. I&amp;rsquo;ve already touched on ASP.NET 6 Minimal APIs. Continuing on the long-established tradition, the team has also worked hard on the performance side of things. File IO, for example, is seeing impressive gains:
For .NET 6, we have made FileStream much faster and more reliable, thanks to an almost entire re-write. For same cases, the async implementation is now a few times faster!</description>
      <content:encoded><![CDATA[<p>I&rsquo;m pretty psyched about the upcoming .NET6 release. I&rsquo;ve already <a href="https://nicolaiarocci.com/will-.net-6-minimal-apis-turn-heads/">touched</a>
on ASP.NET 6 Minimal APIs. Continuing on the long-established tradition, the
team has also worked hard on the performance side of things. File IO, for
example, is seeing <a href="https://devblogs.microsoft.com/dotnet/file-io-improvements-in-dotnet-6/">impressive gains</a>:</p>
<blockquote>
<p>For .NET 6, we have made FileStream much faster and more reliable, thanks to
an almost entire re-write. For same cases, the async implementation is now
a few times faster! We also recognized the need of having more
high-performance file IO features: concurrent reads and writes,
scatter/gather IO and introduced new APIs for them. TL;DR File I/O is better,
stronger, faster!</p>
</blockquote>
<p>If you have the time, make sure you read the whole blog post. Learning about
the low-level details on how they achieved such (pretty phenomenal) results is
fascinating. They&rsquo;re not stopping at file IO either. In another <a href="https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-6/#is-that-all">lengthy blog
post</a>, they had to add a table of contents, or we would get lost in the myriad
of improvements.</p>
<blockquote>
<p>Don’t worry, I don’t cover all of them here, but grab a large mug of your
favorite hot beverage, and settle in: this post takes a rip-roarin’ tour
through ~400 PRs that, all together, significantly improve .NET performance
for .NET 6.</p>
</blockquote>
<p>There are <a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-7/">a</a> <a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-6/">ton</a> <a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-5/">of</a> <a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-4/">new</a> <a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-3/">things</a> <a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-2/">coming</a> <a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-1/">up</a>,
too, of course.</p>
]]></content:encoded>
    </item>
    <item>
      <title>How to read Windows-1252 encoded files with .NETCore and .NET5&#43;</title>
      <link>https://nicolaiarocci.com/how-to-read-windows-1252-encoded-files-with-.netcore-and-.net5-/</link>
      <pubDate>Fri, 27 Aug 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/how-to-read-windows-1252-encoded-files-with-.netcore-and-.net5-/</guid>
      <description>Another day, another lesson learned: modern .NET does not support the Windows-1252 encoding out of the box. Today my colleague was happily porting a legacy NET4+ app to NET6. As usual, the port was super-easy; it would compile and run just fine, so he was surprised when the app crashed reading a few specific XML files. That&amp;rsquo;s when I was called in. A closer inspection revealed a pattern: all those crashing files were Windows 1252-encoded (the rest, a vast majority, were UTF-8.</description>
      <content:encoded><![CDATA[<p>Another day, another lesson learned: modern .NET does not support the
Windows-1252 encoding out of the box. Today my colleague was happily porting
a legacy NET4+ app to NET6. As usual, the port was super-easy; it would compile
and run just fine, so he was surprised when the app crashed reading a few
specific XML files. That&rsquo;s when I was called in. A closer inspection revealed
a pattern: all those crashing files were Windows 1252-encoded (the rest, a vast
majority, were UTF-8.)</p>
<p>It turns out that under NETCore/NET5+, to read Windows-1252 encoded files, we
first need to take a dependency on <code>System.Text.Encoding.CodePages</code>:</p>
<pre><code>dotnet add package System.Text.Encoding.CodePages
</code></pre>
<p>Then, we register a <code>CodePagesEncodingProvider</code> instance from the package:</p>
<pre><code>Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
</code></pre>
<p>Finally, on creating the XmlReader instance, we can set the encoding. To do
that, we need to pass an <code>XmlParserContext</code> instance, which allows us to
specify custom encoding:</p>
<pre><code># Create the parser context and set the encoding
var context = new XmlParserContext(null, null, null, XmlSpace.None)
context.Encoding = Encoding.GetEncoding(1252);

# Use the custom parser when reading the Xml
using (var r = XmlReader.Create(fileName, null, context))
{
    ...
}
</code></pre>
<p>And sure enough, all those troublesome XML files are no problem anymore. It
works on all platforms: Linux, macOS, and Windows.  That&rsquo;s a lot of tinkering
for a small task that required no effort in the past. However, it makes sense
as .NET is now cross-platform, and we want to reduce the app&rsquo;s footprint as
much as possible.</p>
]]></content:encoded>
    </item>
    <item>
      <title>On GitHub Copilot</title>
      <link>https://nicolaiarocci.com/on-github-copilot/</link>
      <pubDate>Sat, 24 Jul 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/on-github-copilot/</guid>
      <description>Like everyone else on the planet, I&amp;rsquo;ve been following GitHub Copilot since its launch. It is an impressive achievement and a remarkable milestone for the deep learning industry, that&amp;rsquo;s for sure. We are obviously at the early stages in deep learning applied to software development, and it is somewhat unsettling to ponder what the future might hold in this field.
Like many others, however, I worry about code quality issues and the risk of license infringements1.</description>
      <content:encoded><![CDATA[<p>Like everyone else on the planet, I&rsquo;ve been following <a href="https://copilot.github.com/">GitHub Copilot</a> since
its launch. It is an impressive achievement and a remarkable milestone for the
deep learning industry, that&rsquo;s for sure. We are obviously at the early stages
in deep learning applied to software development, and it is somewhat unsettling
to ponder what the future might hold in this field.</p>
<p>Like many others, however, I worry about code quality issues and the risk of
license infringements<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. I am also concerned that the advent of Copilot-like
tools might fundamentally change the software developer experience, if not the
software developer role as a whole, and for the worst.</p>
<p>I wrote down some notes preparing for an in-depth Copilot article, but then
I stumbled on Jeremy Howard&rsquo;s &lsquo;[Is Copilot a blessing, or a curse?][3]&rsquo;. In
that piece, Jeremy covers all of my points and then some more. Also, given his
background, Jeremy&rsquo;s musings on deep learning carry way more weight than mine.
My advice is to read his article. I especially appreciate his critique on
Copilot&rsquo;s so-advertised role as &ldquo;AI pair programmer&rdquo;:</p>
<blockquote>
<p>GitHub markets Copilot as a “pair programmer”. But I’m not sure this really
captures what it’s doing. A good pair programmer is someone who helps you
question your assumptions, identify hidden problems, and see the bigger
picture. Copilot doesn’t do any of those things – quite the opposite, it
blindly assumes that your assumptions are appropriate and focuses entirely on
churning out code based on the immediate context of where your text cursor is
right now.</p>
</blockquote>
<p>He then mentions both <em>automation</em> and <em>anchoring</em> biases and explains how they
might influence the developers using advanced AI-powered automation tools like
Copilot.</p>
<p>The code proposed to Copilot seems to solve most problems, yes, but it appears
to average quality at best. Jeremy explains why: Copilot trains on public
repositories, with no filter on the overall quality of the material at hand
&ndash;something complicated to achieve, indeed. The developer is expected to
carefully review the suggestions, and that&rsquo;s where automation and anchoring
biases might affect judgment. Besides, who enjoys doing code reviews?
I certainly don&rsquo;t. Any day, I&rsquo;d instead take on the challenge and churn out my
own solution. Yes, it might require effort and time, or see me googling for
some help (those Stack Overflow hints have usually been reviewed, amended and
commented on by fellow programmers; both quality <em>and</em> review, right there).
When my solution works, I am thrilled. That feel of self-accomplishment and
satisfaction is what I enjoy the most. It&rsquo;s what I look forward to in the
morning when I sit at my desk.</p>
<p>I also don&rsquo;t want to renounce deep understanding. When we delegate code
creation, we&rsquo;re taking a step toward shallow knowledge in our field. Eric
Sink&rsquo;s &lsquo;[Will deep understanding still be valuable?][4]&rsquo; has an excellent
discussion around this topic:</p>
<blockquote>
<p>In my nearly 4 decades of writing code, I have consistently found that the
most valuable thing is to know how things work. Nothing in software
development is more effective than the ability to see deeper. [&hellip;] I am
utterly convinced that deep understanding is important. But increasingly,
I feel like I&rsquo;m swimming upstream. It seems like most people in our industry
care far more about &ldquo;how to do&rdquo; rather than &ldquo;how does it work&rdquo;.</p>
</blockquote>
<p>Copilot is great and feels like magic<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. And precisely for that reason, at my
company, we&rsquo;re not going to adopt it.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For example, see Armin Ronacher&rsquo;s  on Copilot <a href="https://twitter.com/mitsuhiko/status/1410886329924194309">regurgitating famous, GPL-license code</a>.
[3]: <a href="https://www.fast.ai/2021/07/19/copilot/">https://www.fast.ai/2021/07/19/copilot/</a>
[4]: <a href="https://ericsink.com/entries/depth.html">https://ericsink.com/entries/depth.html</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Any sufficiently advanced technology is indistinguishable from magic <em>&ndash;Arthur C. Clark</em>
[rss]: <a href="https://nicolaiarocci.com/index.xml">https://nicolaiarocci.com/index.xml</a>
[tw]: <a href="http://twitter.com/nicolaiarocci">http://twitter.com/nicolaiarocci</a>
[nl]: <a href="https://buttondown.email/nicolaiarocci">https://buttondown.email/nicolaiarocci</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Will .NET 6 Minimal APIs turn heads?</title>
      <link>https://nicolaiarocci.com/will-.net-6-minimal-apis-turn-heads/</link>
      <pubDate>Wed, 14 Jul 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/will-.net-6-minimal-apis-turn-heads/</guid>
      <description>I am pretty excited about the [Minimal APIs][3] feature that is coming with .NET 6. Three lines of code will be enough to build a fully functional REST microservice1:
var app = WebApplication.Create(args); app.MapGet(&amp;quot;/&amp;quot;, () =&amp;gt; &amp;quot;Hello World!&amp;quot;); await app.RunAsync(); If you&amp;rsquo;re a seasoned ASP.NET MVC/WebApi developer, the snippet caught your attention because, pre-.NET 6, achieving the same result will have you messing with a lot of extra cruft2. I suspect, however, that this feature is not primarily targeted at existing .</description>
      <content:encoded><![CDATA[<p>I am pretty excited about the [Minimal APIs][3] feature that is coming with
.NET 6. Three lines of code will be enough to build a fully functional REST
microservice<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<pre><code>var app = WebApplication.Create(args);
app.MapGet(&quot;/&quot;, () =&gt; &quot;Hello World!&quot;);
await app.RunAsync();
</code></pre>
<p>If you&rsquo;re a seasoned ASP.NET MVC/WebApi developer, the snippet caught your
attention because, pre-.NET 6, achieving the same result will have you messing
with a lot of extra cruft<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. I suspect, however, that this feature is not
primarily targeted at existing .NET developers. Developers new and old looking
at .NET for the first time, or those like me returning after a long break;
these are, I think, the designated audience.</p>
<p>A long time ago, I left C# and .NET behind <em>precisely</em> because I had to write
REST APIs, and back then, the options available in .NET were, to put it mildly,
cumbersome. Admittedly, there were other reasons for switching, like .NET not
being cross-platform - I wanted to run my APIs on Linux - and general
dissatisfaction with the Microsoft ecosystem. Long story short, I went with
Python. Check out this snippet from Flask&rsquo;s renowned <a href="https://flask.palletsprojects.com/en/2.0.x/quickstart/#a-minimal-application">Quickstart</a>:</p>
<pre><code>app = Flask(__name__)

@app.route(&quot;/&quot;)
def hello_world():
    return &quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;
</code></pre>
<p>Launched with the compelling motto &lsquo;web development, one drop at a time&rsquo; and
presented as a &lsquo;micro&rsquo; web framework, Flask immediately caught my attention<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.
Cruft-free and elegant APIs are not a Flask (or Python, for the matter)
exclusive. A Node code snippet for a REST API would be similar. Now, with NET
6 Minimal APIs, we&rsquo;re finally matching the industry standard for code clarity
and simplicity. Moreover, .NET has better performance<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> and strongly typed
languages that offer excellent type inference (F# reigns supreme there, with C#
catching up nicely.) I&rsquo;d dare to say that the C# snippet is a winner. I mean,
look at that inline lambda, with no casts!</p>
<p>Minimal APIs typical use-case is everyone&rsquo;s favourite, microservices. I do not
doubt the delivery<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup><sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>. The challenge, I think, is the actual adoption rate.
Whether veterans will adopt them or not (over time, they will) is relatively
significant, I guess. The critical question is, will Minimal APIs succeed in
attracting new developers to .NET?</p>
<p>That will mainly depend on communication. Will evangelism be robust, persistent
and persuasive enough? That&rsquo;s the tricky part. Every time I speak to the Python
or JavaScript crowd, I  am amazed that the majority don&rsquo;t even know that .NET
is now open-source, cross-platform, and blazingly performant. Most, if not all,
are tied to the old idea of a Windows-only, cumbersome, black-boxed,
enterprise-oriented offering. That&rsquo;s not the case anymore. .NET is on par with
the other cool stacks or is getting there very rapidly. I am afraid it&rsquo;s just
a little bit too late for the vast majority of the web development crowd to
take notice. It will take an enormous, coordinated effort to bring the message
across.</p>
<p>With the platform now ready, effective communication, branding, and evangelism
will eventually change the tide. Tutorials, getting-started guides, conference
talks, YouTube videos, and workshops should all be explicitly conceived for new
developers. The process started already. The observant can see the numerous
efforts being made in this area. Will it be enough to attract new crowds? It is
a hard bet, but I sure hope so because C# and F# are great languages, and NET
6 is modern, robust,  feature-rich, and powerful enough to go at war, and with
no fear.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>You will still be able to scale up to (or start right away with) a fully-functional WebApi/MVC application, with all its classes and controllers.
[3]: <a href="https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-4/#introducing-minimal-apis">https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-4/#introducing-minimal-apis</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Mind you. The dev team isn&rsquo;t just adding a layer of abstraction on top of the existing code. Quoting fellow MVP <a href="https://www.telerik.com/blogs/low-ceremony-high-value-tour-minimal-apis-dotnet-6">Dave Brock</a> &ldquo;With minimal APIs, the goal is to move out core API-building capabilities—the ones that only exist in MVC today—and allow them to be used outside of MVC. When extracting these components away to a new paradigm, you can rely on middleware-like performance.&rdquo;&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Long story short, besides lazily maintaining my Python open source <a href="/opensource">projects</a>, I am mostly back to C# these days.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Sure, all benchmarks should be taken with a grain of salt, but <a href="https://www.techempower.com/benchmarks/#section=data-r20&amp;hw=ph&amp;test=plaintext">check this out</a>. ASPCORE ranks at #2; Flask and Node #338 and #173 respectively. And NET 6 is expected to still improve on performance.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>For examples of real-life-scenarios, see Damian Edwards&rsquo; <a href="https://github.com/DamianEdwards/MinimalApiPlayground/blob/main/src/MinimalApiPlayground/Program.cs">Minimal APIs playground</a>.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Cool. As I am writing this, NET 6 Preview 6 is released, which adds <a href="https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-6/#configure-swagger-ui-with-minimal-apis">OpenAPI (Swagger UI) support</a> to Minimal APIs.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Custom default values for not existing dictionary items (and a lesson learned)</title>
      <link>https://nicolaiarocci.com/custom-default-values-for-not-existing-dictionary-items-and-a-lesson-learned/</link>
      <pubDate>Fri, 11 Jun 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/custom-default-values-for-not-existing-dictionary-items-and-a-lesson-learned/</guid>
      <description>When dealing with dictionaries, a typical problem is when an operation attempts to retrieve an element using a key that does not exist in the dictionary. In .NET, a KeyNotFoundException is raised, and that&amp;rsquo;s the desired behaviour in most circumstances. Sometimes, however, you know that your program will frequently try to retrieve keys that do not exist. In such cases, it is more efficient to use the TryGetValue method:
This method returns the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter is returned (source)</description>
      <content:encoded><![CDATA[<p>When dealing with dictionaries, a typical problem is when an operation attempts
to retrieve an element using a key that does not exist in the dictionary. In
.NET, a <code>KeyNotFoundException</code> is raised, and that&rsquo;s the desired behaviour in
most circumstances. Sometimes, however, you know that your program will
frequently try to retrieve keys that do not exist. In such cases, it is more
efficient to use the <code>TryGetValue</code> method:</p>
<blockquote>
<p>This method returns the value associated with the specified key, if the key
is found; otherwise, the default value for the type of the value parameter is
returned (<a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.trygetvalue?view=net-5.0">source</a>)</p>
</blockquote>
<p>The devil hides in details. <code>TryGetValue</code> returns the default value for the
type of the <code>value</code> parameter. So, if you use <code>TryGetValue</code> to look into
a dictionary of strings, <code>null</code> is returned on a missing key. That is probably
ok in most cases. Howewer, if your logic requires a custom default value
instead, then you are out of luck. You have to set it yourself on <code>TryGetValue</code>
failure. A typical implementation would be:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>    <span style="font-weight:bold">var</span> result = MyDictionary.TryGetValue(<span style="font-style:italic">&#34;key&#34;</span>, <span style="font-weight:bold">var</span> out value) 
</span></span><span style="display:flex;"><span>        <span style="">?</span> value
</span></span><span style="display:flex;"><span>        : <span style="font-style:italic">&#34;not found&#34;</span>;
</span></span></code></pre></div><p>It is a minor annoyance but still a hassle. Our solution has always been
a homemade <code>GetValueOrDefault</code> extension method, something like this:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>    public <span style="font-weight:bold">static</span> TValue GetValueOrDefault&lt;TKey, TValue&gt; 
</span></span><span style="display:flex;"><span>        (this IDictionary&lt;TKey, TValue&gt; dictionary, TKey key, TValue defaultValue)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="font-weight:bold">return</span> dictionary.TryGetValue(key, <span style="font-weight:bold">var</span> out value) 
</span></span><span style="display:flex;"><span>            <span style="">?</span> value
</span></span><span style="display:flex;"><span>            : defaultValue;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>Usage:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>    <span style="font-weight:bold">var</span> result = MyDictionary.GetValueOrDefault(<span style="font-style:italic">&#34;key&#34;</span>, <span style="font-style:italic">&#34;not found&#34;</span>);
</span></span></code></pre></div><p>We&rsquo;ve been using it since forever, and we are still using it even in recent
projects.</p>
<p>Today, as I was looking at something only tangentially related, I learned that
our extension method is obsolete, and it&rsquo;s been for a while. NetStandard
2.1 and NetCore 2 added a new extension method to the official API. It&rsquo;s
called, you guessed it, <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.collectionextensions.getvalueordefault?view=net-5.0"><code>GetValueOrDefault</code></a>. It extends
<code>ÌReadOnlyDictionary&lt;TKey, TValue&gt;</code>, so it applies to all generic dictionaries,
which is cool.</p>
<p>We could continue with our extension method. It has the advantage of working
across all .NET platforms, not just recent ones. Implementations are likely
similar, and there’s probably little (if any) performance difference (I am too
lazy to compare). With NETCore (now NET5), APIs have not only acquired
cross-platform compatibility and improved performance but they have also been
expanded and amended, something often not very apparent. Not to me, at least.</p>
<p>The point I want to make here, I think, is that nothing is set in stone. Today&rsquo;s
little event shows how my knowledge becomes stagnant over time. Setting apart
the time to learn new things is good, but acquired ones need sharping too.</p>
]]></content:encoded>
    </item>
    <item>
      <title>On Programming and Writing</title>
      <link>https://nicolaiarocci.com/on-programming-and-writing/</link>
      <pubDate>Tue, 25 May 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/on-programming-and-writing/</guid>
      <description>My brilliant friend Salvatore Sanfilippo (otherwise known as antirez of Redis fame) has an interesting write-up on his website. How similar is programming to prose writing? After getting his own feet wet with novel writing, he is convinced that the two activities share many common traits.
One year ago I paused my programming life and started writing a novel, with the illusion that my new activity was deeply different than the previous one.</description>
      <content:encoded><![CDATA[<p>My brilliant friend Salvatore Sanfilippo (otherwise known as antirez of Redis
fame) has an interesting write-up on <a href="http://antirez.com/news/135">his website</a>. How similar is
programming to prose writing? After getting his own feet wet with novel
writing, he is convinced that the two activities share many common traits.</p>
<blockquote>
<p>One year ago I paused my programming life and started writing a novel, with
the illusion that my new activity was deeply different than the previous one.
A river of words later, written but more often rewritten, I’m pretty sure of
the contrary: programming big systems and writing novels have many common
traits and similar processes.</p>
</blockquote>
<p>It is a worthy read. I especially appreciate his conclusions on what
programming can actually learn from writing:</p>
<blockquote>
<p>I believe programming, in this regard, can learn something from writing: when
writing the first core of a new system, when the original creator is still
alone, isolated, able to do anything, she should pretend that this first core
is her only bullet. During the genesis of the system she should rewrite this
primitive kernel again and again, in order to find the best possible design. My
hypothesis is that this initial design will greatly inform what will happen
later: growing organically something that has a good initial structure will
result in a better system, even after years of distance from the original
creation, and even if the original core was just a tiny faction of the future
mass the system would eventually assume.</p>
</blockquote>
<p>I suspect that his line of reasoning might be influenced by some sort
of confirmation bias<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.  We are inclined to notice similarities between our
own activities, especially so when we perform them passionately. While common
patterns emerge naturally, differences, even remarkable ones, tend to go
unnoticed.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The term <em>confirmation bias</em> is probably misused in this context. I am sure there is a better definition; it just eludes me and my own ignorance.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Flask 2.0</title>
      <link>https://nicolaiarocci.com/flask-2.0/</link>
      <pubDate>Fri, 14 May 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/flask-2.0/</guid>
      <description>Flask 2.0 has just been released. Along with it come many other major satellite releases: Werkzeug 2.0, Jinja 3.0, Click 8.0, ItsDangerous 2.0, and MarkupSafe 2.0.
Across all projects, Python 3.6+ is now required, and comprehensive type annotations are supported. At a glance, I&amp;rsquo;d say that the biggest news is async views in Flask 2. Work has also been done around Werkzeug Request and Response classes to allow for better sync and async in the future (it&amp;rsquo;s not a public API yet.</description>
      <content:encoded><![CDATA[<p>Flask 2.0 has just been released. Along with it come many other major satellite
releases: Werkzeug 2.0, Jinja 3.0, Click 8.0, ItsDangerous 2.0, and MarkupSafe
2.0.</p>
<p>Across all projects, Python 3.6+ is now required, and comprehensive type
annotations are supported. At a glance, I&rsquo;d say that the biggest news is async
views in Flask 2. Work has also been done around Werkzeug <code>Request</code> and
<code>Response</code> classes to allow for better sync and async in the future (it&rsquo;s not
a public API yet.) Jinja, Click and ItsDangerous come with a lot of new
niceties. Details are available on the <a href="https://palletsprojects.com/blog/flask-2-0-released/">Pallets website</a>.</p>
<p>Flask is, of course, the giant on which shoulders the whole <a href="https://python-eve.org">Eve</a> project rests.
To say that the Pallets team has been working hard at the forge is an
understatement—huge congrats to all of them.</p>
]]></content:encoded>
    </item>
    <item>
      <title>dotnet SmtpClient should not be used</title>
      <link>https://nicolaiarocci.com/dotnet-smtpclient-should-not-be-used/</link>
      <pubDate>Tue, 04 May 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/dotnet-smtpclient-should-not-be-used/</guid>
      <description>I am very late to the party, but today I learned that the good old dotnet SmptClient is considered obsolete and should not be used. Quoting the documentation:
We don&amp;rsquo;t recommend using the SmtpClient class for new development because SmtpClient doesn&amp;rsquo;t support many modern protocols. Use MailKit or other libraries instead. (source)
Interestingly, Microsoft is recommending a third-party open-source library as an alternative. I hope we&amp;rsquo;ll see more of that in the future.</description>
      <content:encoded><![CDATA[<p>I am very late to the party, but today I learned that the good old dotnet
<code>SmptClient</code> is considered obsolete and should not be used. Quoting the
documentation:</p>
<blockquote>
<p>We don&rsquo;t recommend using the SmtpClient class for new development because
SmtpClient doesn&rsquo;t support many modern protocols. Use MailKit or other
libraries instead. (<a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.mail.smtpclient?view=net-5.0&amp;viewFallbackFrom=netcore-5.0#remarks">source</a>)</p>
</blockquote>
<p>Interestingly, Microsoft is recommending a third-party open-source library as an
alternative. I hope we&rsquo;ll see more of that in the future.</p>
<p>I just finished integrating <a href="https://github.com/jstedfast/MailKit">MailKit</a> in our backend. I must say that I&rsquo;m
pleasantly surprised by its rich feature-set and the elegant and
straightforward design, which makes getting on-board super easy. It&rsquo;s built on
top of the excellent MimeKit, after all, and authored by the very same author
Jeffrey Stedfast.</p>
]]></content:encoded>
    </item>
    <item>
      <title>School assignments that count: simulating the COVID outbreak with the C language</title>
      <link>https://nicolaiarocci.com/school-assignments-that-count-simulating-the-covid-outbreak-with-the-c-language/</link>
      <pubDate>Mon, 05 Apr 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/school-assignments-that-count-simulating-the-covid-outbreak-with-the-c-language/</guid>
      <description>Giulia got an exciting assignment from her teacher:
Write a C program that simulates (a simplified version of) COVID outbreak spreading across a population of 200 people. When a healthy person comes into contact with a sick person, the healthy person becomes ill, too. After some time, a sick person will recover. A recovered person cannot infect a healthy person nor become sick again after coming in contact with a sick person.</description>
      <content:encoded><![CDATA[<p>Giulia got an exciting assignment from her teacher:</p>
<blockquote>
<p>Write a C program that simulates (a simplified version of) COVID outbreak
spreading across a population of 200 people. When a healthy person comes into
contact with a sick person, the healthy person becomes ill, too. After some
time, a sick person will recover. A recovered person cannot infect a healthy
person nor become sick again after coming in contact with a sick person.</p>
</blockquote>
<p>In more prosaic terms: the world comprises a 30*50 cell grid. Of these, 200
cells are randomly selected to be alive. Throughout the simulation, each of
these cells can be in one of the following three states: healthy, sick, or
recovered. If a cell is ill, at the next cycle, all neighbouring cells will
also be diseased. A cell stays sick for 14 cycles. At cycle 15, it is healed.
The simulation ends when all 200 cells are either recovered or healthy.</p>
<p>Giulia&rsquo;s implementation was fine, but a couple of subtle bugs prevented it from
succeeding, and that&rsquo;s how I got involved. In general, she doesn&rsquo;t ask for
help, nor do I ask her about her progress. If she reaches out to me, it&rsquo;s only
for serious trouble, and when that happens, I enjoy working with her. Besides,
while I do a lot C# these days, I don&rsquo;t do C since aeons ago, so it&rsquo;s great to
get back to it every once in a while.</p>
<p><img loading="lazy" src="/images/covid-sim-prima-esecuzione.png" alt="first cyckle"  />

Above, the healthy population inhabiting its 1500-cells world, right before the outbreak.</p>
<p><img loading="lazy" src="/images/covid-sim-esecuzione-intermedia.png" alt="intermediate"  />

Halfway through the simulation, 86 cells are healthy, 46 are sick, and 68 are
healed.</p>
<p><img loading="lazy" src="/images/covid-sim-ultima-esecuzione.png" alt="final cycle"  />

End of the simulation. It doesn&rsquo;t matter how many times you run it; the number
of people who were never infected is stunningly low by the end. Moreover,
a simulation like this one, albeit simplified, reveals how dramatically an epidemic
can spread if not contained with social distancing.</p>
<p>I was pleasantly surprised by this assignment. Here we have a teacher who
doesn&rsquo;t constraint herself to the standard, well-established routine. Instead,
she keeps her students engaged and challenges them. At the same time, she takes
the chance to educate them on the current sanitary emergency. Giulia tells me
that her teacher was inspired by a March 2020 Washington Post article: <em><a href="https://www.washingtonpost.com/graphics/2020/world/corona-simulator/">Why
outbreaks like coronavirus spread exponentially, and how to &ldquo;flatten the
curve.&rdquo;</a></em> That&rsquo;s excellent work. It includes several animated simulations,
Giulia&rsquo;s assignment being one of them.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Get better at programming by learning how things work</title>
      <link>https://nicolaiarocci.com/get-better-at-programming-by-learning-how-things-work/</link>
      <pubDate>Sat, 27 Mar 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/get-better-at-programming-by-learning-how-things-work/</guid>
      <description>When we talk about getting better at programming, we often talk about testing, writing reusable code, design patterns, and readability. All of those things are important. But in this blog post, I want to talk about a different way to get better at programming: learning how the systems you’re using work! This is the main way I approach getting better at programming.
Once again, Julia Evans has great sensible advice up on her site.</description>
      <content:encoded><![CDATA[<blockquote>
<p>When we talk about getting better at programming, we often talk about
testing, writing reusable code, design patterns, and readability. All of
those things are important. But in this blog post, I want to talk about
a different way to get better at programming: learning how the systems you’re
using work! This is the main way I approach getting better at programming.</p>
</blockquote>
<p>Once again, Julia Evans has great sensible advice up on <a href="https://jvns.ca/blog/learn-how-things-work/">her site</a>.</p>
<p>I appreciate her note on how today we work with so many complex systems that it
is next to impossible to understand all of them.  The experienced developer
comes at peace with that, acknowledges ignorance, and, more importantly,
understands when it&rsquo;s worth digging deeper. In other words:</p>
<blockquote>
<p>Being a senior developer is less about knowing absolutely everything and more
about quickly being able to recognize when you don’t know something and learn
it.</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Write libraries, not services? Not so fast</title>
      <link>https://nicolaiarocci.com/write-libraries-not-services-not-so-fast/</link>
      <pubDate>Thu, 25 Mar 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/write-libraries-not-services-not-so-fast/</guid>
      <description>Write libraries instead of services is an interesting article I read a while ago. I cannot get it off my head. In an attempt to clear up my mind, I decided to sit down and write about it. I have been writing libraries for a good part of my life. Most of my earlier dev-work resides on thousands of computers in the form of libraries. More recently, I have been writing and deploying remote services.</description>
      <content:encoded><![CDATA[<p><a href="http://catern.com/services.html">Write libraries instead of services</a> is an interesting article I read
a while ago. I cannot get it off my head. In an attempt to clear up my mind,
I decided to sit down and write about it. I have been writing libraries for
a good part of my life. Most of my earlier dev-work resides on thousands of
computers in the form of libraries. More recently, I have been writing and
deploying remote services. Libraries versus Services is a topic I care about.</p>
<p>Let&rsquo;s jump into the article.</p>
<blockquote>
<p>A service has constant administration costs which are paid by the service
provider. A properly designed library instead moves these costs to the users
of the library.</p>
</blockquote>
<p>This ignores the issue of support. You are going to have to support your users.
Support comes at a cost. I would argue that, given the distributed nature of
libraries, supporting them can become <em>very</em> costly. Your library is probably
residing in a myriad of diverse, local environments. Issues are hard to
replicate or reason about. It is hard to isolate your own code from the
surrounding environment.</p>
<blockquote>
<p>People say, &ldquo;services are easy because you can upgrade them centrally, so you
can avoid slow-to-upgrade users making everyone&rsquo;s lives worse.&rdquo; But this
assumes that slow-to-upgrade users can have negative effects on everyone
else. If one user can&rsquo;t have a negative impact on other users, then you don&rsquo;t
care if some users are slow to upgrade; they&rsquo;re only hurting themselves.</p>
</blockquote>
<p>Again, support. Those slow-to-upgrade users are going to not just hurt but
torture your support service with years-old obsolete issues.  If you think it&rsquo;s
the user&rsquo;s responsibility to keep dependencies up to date, good luck with that.
That assumes that developers adopting the library control their deployments,
which isn&rsquo;t often the case. They might employ the library in a desktop
application distributed to dozens (or thousands) of end-users. It could be next
to impossible for them to make sure that all their deployments are up to speed.
Old versions are a pain point and one (if not the most) significant cost
factor. Maintaining a service comes at a cost too, and you&rsquo;ll likely need to
offer some sort of support there as well. A service, however, ensures that all
your users are on the same version, which tremendously reduces the support
effort.</p>
<p>When weighting costs, support must be factored in, along with all the rest:
development, maintenance, distribution, documentation, etc.  Maybe the
article&rsquo;s author has the luxury of not having to deal with support himself.
Still, there&rsquo;s someone else at his company who has to do that.</p>
<p>A service, on the other hand, represents a single point of failure. If it goes
down, all users are immediately affected<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. By contrast, a nasty bug in your
library will only affect the unlucky users on that version. Now, <em>this</em> makes
a significant advantage for distributed libraries.</p>
<p>Your service, however, will talk to all languages via REST, GraphQL, or any
other interface of choice. The library will usually speak just one language.
Yes, you might provide language-specific SDKs for your service, but that&rsquo;s just
an option.</p>
<p>Do you need to hold state? If you do, most of the time, a service will be
a better option. With state comes responsibility, however. You have to
ensure regular backups, resilience, and maintenance, all of them at a cost.</p>
<p>The author suggests a few approaches to circumventing library limitations. Some
are reasonable, like dynamic linking where it is applicable (not all stacks
support it). Others, quite frankly, I don&rsquo;t understand.</p>
<p>Many factors influence the choice between service and library, use case and
prevailing circumstances being the main ones. I am not even sure they are
comparable, as they tend to solve different problems.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I know first hand. We&rsquo;ve recently been impacted by a catastrophic event that happened to one of our providers. Our services went down and, with them, a good part of our users. How we overcame the situation and what we learned in the process would probably be worth telling, maybe in a future article.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Semantic Versioning Will Not Save You</title>
      <link>https://nicolaiarocci.com/semantic-versioning-will-not-save-you/</link>
      <pubDate>Thu, 04 Mar 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/semantic-versioning-will-not-save-you/</guid>
      <description>The always brilliant Hynek recently posted Semantic Versioning Will Not Save You. Primarily targeted at consumers of SemVer-versioned packages, it is full of insightful advice.
From my perspective as an open-source maintainer, I can tell you that versioning is hard. Judging when a new release is going to break backward compatibility is not as simple as it might seem on the surface, and Hynek does a great job explaining why. Sometimes it is also hard for me to tell if a change in a codebase classifies as a new feature, small improvement, or fix—subtle differences.</description>
      <content:encoded><![CDATA[<p>The always brilliant Hynek recently posted <a href="https://hynek.me/articles/semver-will-not-save-you/">Semantic Versioning Will Not Save
You</a>. Primarily targeted at <em>consumers</em> of SemVer-versioned packages, it is
full of insightful advice.</p>
<p>From my perspective as an open-source maintainer, I can tell you that
versioning is hard. Judging when a new release is going to break backward
compatibility is not as simple as it might seem on the surface, and Hynek does
a great job explaining why. Sometimes it is also hard for me to tell if
a change in a codebase classifies as a new feature, small improvement, or
fix—subtle differences. In the context of SemVer, it matters a lot because
version numbers have a meaning. Consumers will likely decide whether to upgrade
or not based on that meaning.</p>
<p>Admittedly, and precisely because I did not feel comfortable giving guarantees,
the <a href="https://hynek.me/articles/semver-will-not-save-you/">Eve</a> project has been <a href="https://0ver.org/">0-versioned</a> for seven years. Seven years!
I wanted it to be mature, battle-tested and stable; only then would I feel
comfortable going 1.0. In Eve&rsquo;s case, 1.0 means not only &ldquo;stable&rdquo; but also
&ldquo;done.&rdquo; All major features are in, and they are stable. I am not alone, of
course. Flask, the web-framework on which Eve builds, has been 0-versioned for
many years too. I&rsquo;ve also been on the receiving hand of SemVer-related issues,
check the Eve backlog. The same happened with my other projects (<a href="https://python-cerberus.org">Cerberus</a>
is the exception as it has no dependencies.)</p>
<p>Hynek&rsquo;s point, I think, is that SemVer is a just convention. At each new
release, a semantic-versioned package expresses the maintainer&rsquo;s intention, but
there are no guarantees.</p>
<blockquote>
<p>This does not mean that SemVer is bad or worthless. Knowing the intentions of
a maintainer can be valuable – especially when things break. Because that’s
all SemVer is: a TL;DR of the changelog. What it does mean though, is that
you can’t rely on the semantic meaning of SemVer and <strong>you must treat every
update as potentially breaking</strong>.</p>
</blockquote>
<p>Make sure you read the Taking Responsibility section. It has sound advice on
protecting your project from dependency hell.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Reverse engineering an obfuscated codebase and fixing it in the process</title>
      <link>https://nicolaiarocci.com/reverse-engineering-an-obfuscated-codebase-and-fixing-it-in-the-process/</link>
      <pubDate>Tue, 02 Mar 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/reverse-engineering-an-obfuscated-codebase-and-fixing-it-in-the-process/</guid>
      <description>Today&amp;rsquo;s mandatory reading is How I cut GTA Online loading times by 70%.
As someone who&amp;rsquo;s been fighting the protection/obfuscation cat &amp;amp; mouse game for twenty+ years, let me tell you one thing. The way this guy reverse-engineered parts of the GTA5 codebase and then proceeded to single-handly triage and fix a long-standing (7+ years) performance issue is simply mindblowing. All he had to work with were heavily obfuscated dlls. This also shows how we, the protectors, are always playing a losing game.</description>
      <content:encoded><![CDATA[<p>Today&rsquo;s mandatory reading is <a href="https://nee.lv/2021/02/28/How-I-cut-GTA-Online-loading-times-by-70/">How I cut GTA Online loading times by 70%</a>.</p>
<p>As someone who&rsquo;s been fighting the protection/obfuscation cat &amp; mouse game for
twenty+ years, let me tell you one thing. The way this guy reverse-engineered
parts of the GTA5 codebase and then proceeded to single-handly triage and fix
a long-standing (7+ years) performance issue is simply mindblowing. All he had
to work with were heavily obfuscated dlls.  This also shows how we, the
protectors, are always playing a losing game.</p>
<blockquote>
<p>There seems to be some sort of an obfuscation/encryption at play here that
has replaced most instructions with gibberish. Not to worry, we simply need
to dump the game&rsquo;s memory while it&rsquo;s executing the part we want to look at.
The instructions have to be de-obfuscated before running one way or another.</p>
</blockquote>
<p>Make sure you read this <a href="https://nee.lv/2021/02/28/How-I-cut-GTA-Online-loading-times-by-70/">stuff</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Musings on Python&#39;s Pattern Matching</title>
      <link>https://nicolaiarocci.com/musings-on-pythons-pattern-matching/</link>
      <pubDate>Tue, 23 Feb 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/musings-on-pythons-pattern-matching/</guid>
      <description>Pattern Matching is coming to Python, and I am not sure I like it. Don&amp;rsquo;t get me wrong, I love pattern matching. I use it all the time in F#. I am sure that once it lands in the language, it will be wildly adopted.
So what&amp;rsquo;s the problem with Python&amp;rsquo;s pattern matching? The community, some core developers included, has expressed several concerns. The Python Steering Council has acknowledged them and is willing to look into improvements should they be proposed.</description>
      <content:encoded><![CDATA[<p>Pattern Matching <a href="https://lwn.net/Articles/845480/">is coming</a> to Python, and I am not sure I like it. Don&rsquo;t get me
wrong, I love pattern matching. I use it all the time in F#. I am sure that
once it lands in the language, it will be wildly adopted.</p>
<p>So what&rsquo;s the problem with Python&rsquo;s pattern matching? The community, some core
developers included, has expressed <a href="https://discuss.python.org/t/gauging-sentiment-on-pattern-matching/5770">several concerns</a>. The Python Steering
Council has acknowledged them and is willing to look into improvements should
they be proposed. I am not going into the details here. You can look them up
yourself. Let&rsquo;s just say that there are a few gotchas, like the requirement to
use dotted names as constants, to prevent them from being interpreted as
capture variables instead (doh!) The lack of local scope bites hard here.</p>
<p>If we look at pattern matching in isolation, it is undoubtedly desirable. There
ought to be a reason why every language on the planet is trying to adopt it. Is
it pythonic? I doubt it. With all its corner cases and the odd syntax, I think
that the current design adds quite a bit of complexity to the language. As
someone <a href="https://news.ycombinator.com/item?id=26083779">noted</a>, core dev Larry Hastings puts it well:</p>
<blockquote>
<p>I dislike the syntax and semantics expressed in PEP 634. I see the match
statement as a DSL contrived to look like Python and to be used inside of
Python, but with very different semantics. When you enter a PEP 634 match
statement, the rules of the language change completely, and code that looks
like existing Python code does something surprisingly very different (<a href="https://discuss.python.org/t/gauging-sentiment-on-pattern-matching/5770/21">source</a>)</p>
</blockquote>
<p>I especially agree with this sentiment, and I am still quoting Hastings:</p>
<blockquote>
<p><strong>I think the bar for adding new syntax to Python at this point in its life
should be set very high</strong>. The language is already conceptually pretty large,
and every new feature means new concepts one must learn if one is to read an
arbitrary blob of someone else&rsquo;s Python code. The bigger the new syntax, the
higher the bar should become, and so the bigger payoff the new syntax has to
provide.</p>
</blockquote>
<p>Unfortunately, I feel like this trend of getting away from pythonic-Python has
been going on for a while. As my friend Alessandro Molina mentioned just today:</p>
<blockquote>
<p>I have been thinking about how Python has been moving away from its own Zen
since the time of &ldquo;async&rdquo; keyword. Convenience rarely values added
complexity. Never been a big fan of adding keywords that will be misused by
the majority to deal with the vertical needs of a minority (<a href="https://twitter.com/__amol__/status/1364205630928617473">source</a>)</p>
</blockquote>
<p>He was referring to group exceptions, not pattern matching. Still, his tweet
struck a nerve as I was busy writing down these thoughts.</p>
<p>More generally, I am concerned with all the recent attempts to take features
from functional languages and bring them over to object-oriented languages.
It&rsquo;s not just a Python thing; C# just ported Records, pattern matching, and
a few other things over from F#/ML. I understand that like 85% of the software
development crowd is into object-oriented languages, but look, it&rsquo;s going to
exceptionally hard to successfully and seamlessly move features from apples to
oranges.</p>
]]></content:encoded>
    </item>
    <item>
      <title>What I listen to while programming</title>
      <link>https://nicolaiarocci.com/what-i-listen-to-while-programming/</link>
      <pubDate>Fri, 12 Feb 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/what-i-listen-to-while-programming/</guid>
      <description>What music do you listen to while programming?1 For me, it&amp;rsquo;s usually jazz, classical, electronic, lots of it, or nothing. There are some specialized websites and podcasts I sometimes recur to, like [Music for Programming][1]. Several Spotify playlists I dig a lot, [Every Day I&amp;rsquo;m Nerdin&amp;rsquo;][2] being one of them. What can I say? I am musically omnivore.
However, I recently discovered something different: the [Field Recordings podcast][3]. &amp;ldquo;A podcast where audio-makers stand silently in fields (or things that could be broadly interpreted as fields).</description>
      <content:encoded><![CDATA[<p>What music do you listen to while programming?<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> For me, it&rsquo;s usually jazz,
classical, electronic, lots of it, or nothing. There are some specialized
websites and podcasts I sometimes recur to, like [Music for Programming][1].
Several Spotify playlists I dig a lot, [Every Day I&rsquo;m Nerdin&rsquo;][2] being one of
them. What can I say? I am musically omnivore.</p>
<p>However, I recently discovered something different: the [Field Recordings
podcast][3]. &ldquo;A podcast where audio-makers stand silently in fields (or things
that could be broadly interpreted as fields).&rdquo; I am told it was launched last
year, just about when the COVID lockdowns started, by acclaimed UK audio artist
and producer Eleanor McDowall. It&rsquo;s free, updated daily with submissions coming
from all over the world, and holds many treasures. Most episodes are short, I&rsquo;d
say around the 5 minutes mark, with some notable exceptions like [The Sound of
2020][4], &ldquo;A slow weave of some of 2020&rsquo;s Field Recordings in chronological
order&rdquo;. One of my favorites has got to be the &ldquo;[Inside the log burner][5]&rdquo;
episode by Chris Attaway (Devoran, Cornwall, UK, January 2021):</p>
<blockquote>
<p>&ldquo;I was prepping a fire in our log burner on a cold, blustery day here in
Devoran, Cornwall and the wind whistling through the vents was really creepy!
So I stuck my Zoom inside and recorded it for a bit. It was like it had its
own little atmosphere and weather inside!&rdquo;</p>
</blockquote>
<p>At my desk churning out code, I hit play, and that stove is instantly
teleported here, right by my side. I can almost feel its warmth. Indeed,
there&rsquo;s something cathartic about listening to these sound fragments from all
over the world.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>As I write this, news of the passing of Chick Corea hit me. Today his <em>Plays</em> album is on repeat.
[5]: <a href="https://fieldrecordings.xyz/2021/01/12/inside-the-log-burner-devoran-cornwall-in-january-2021-by-chris-attaway/">https://fieldrecordings.xyz/2021/01/12/inside-the-log-burner-devoran-cornwall-in-january-2021-by-chris-attaway/</a>
[4]: <a href="https://fieldrecordings.xyz/2020/12/14/the-sound-of-2020/">https://fieldrecordings.xyz/2020/12/14/the-sound-of-2020/</a>
[3]: <a href="https://fieldrecordings.xyz/">https://fieldrecordings.xyz/</a>
[2]: <a href="https://open.spotify.com/playlist/1itC2kKqIqun8OU05J5G8v?si=iYtyuKAfT4ejArv1aaT4FQ">https://open.spotify.com/playlist/1itC2kKqIqun8OU05J5G8v?si=iYtyuKAfT4ejArv1aaT4FQ</a>
[1]: <a href="http://www.musicforprogramming.net/">http://www.musicforprogramming.net/</a>
[rss]: <a href="https://nicolaiarocci.com/index.xml">https://nicolaiarocci.com/index.xml</a>
[tw]: <a href="http://twitter.com/nicolaiarocci">http://twitter.com/nicolaiarocci</a>
[nl]: <a href="https://buttondown.email/nicolaiarocci">https://buttondown.email/nicolaiarocci</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>When Homebrew breaks your Python virtual environment</title>
      <link>https://nicolaiarocci.com/when-homebrew-breaks-your-python-virtual-environment/</link>
      <pubDate>Mon, 08 Feb 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/when-homebrew-breaks-your-python-virtual-environment/</guid>
      <description>Ever had your old, trusty Python virtual environment fail on you? I sure did. Sometimes, when I activate or switch between virtual environments, I get the following error:
$ workon eve dyld: Library not loaded: @executable_path/../.Python I never really took the time to look into it. When this happens, because I am in a rush (and because I am a lazy old fart), I shrug it off, recreate the virtual environment on the spot, and get back to work.</description>
      <content:encoded><![CDATA[<p>Ever had your old, trusty Python virtual environment fail on you? I sure did.
Sometimes, when I activate or switch between virtual environments, I get the
following error:</p>
<pre><code>$ workon eve
dyld: Library not loaded: @executable_path/../.Python
</code></pre>
<p>I never really took the time to look into it. When this happens, because I am
in a rush (and because I am a lazy old fart), I shrug it off, recreate the
virtual environment on the spot, and get back to work.</p>
<p>My friend Justin Mayer knows better. The other day, he posted a <a href="https://justinmayer.com/posts/homebrew-python-is-not-for-you/">short
insightful article</a> about this very same issue:</p>
<blockquote>
<p>Perhaps you heard stories about why you shouldn’t use the system-bundled
Python, so instead you use Homebrew to install Python and then use its
interpreter to create a virtual environment. A month later, you activate that
same environment, and when you try to use it, you see this inscrutable error:
(&hellip;) What happened? The Python interpreter referenced by the virtual
environment… no longer exists. But how can that be? You didn’t change
anything! You didn’t change anything… but Homebrew did.</p>
</blockquote>
<p>Homebrew is the culprit. If you have been affected (and if you have done any
length of serious Python work, you have), then go <a href="https://justinmayer.com/posts/homebrew-python-is-not-for-you/">read</a> Justin&rsquo;s piece. He
explains the whys and then goes into the hows you solve the problem for good.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Strong opinions on software development</title>
      <link>https://nicolaiarocci.com/strong-opinions-on-software-development/</link>
      <pubDate>Wed, 03 Feb 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/strong-opinions-on-software-development/</guid>
      <description>After six years in the field, Chris has shared his strong opinions on software development practices, languages, and methodologies. I like his attitude. Willingness to continuously put one&amp;rsquo;s personal views under scrutiny, eventually adapting or even changing them as needed, is not a common trait. Not in our field. While I generally agree with most of his opinions, I feel the urge to comment on a few of them.
Typed languages are better when you&amp;rsquo;re working on a team of people with various experience levels</description>
      <content:encoded><![CDATA[<p>After six years in the field, Chris has <a href="https://chriskiehl.com/article/thoughts-after-6-years">shared</a> his strong opinions on
software development practices, languages, and methodologies. I like his
attitude. Willingness to continuously put one&rsquo;s personal views under scrutiny,
eventually adapting or even changing them as needed, is not a common trait. Not
in our field. While I generally agree with most of his opinions, I feel the
urge to comment on a few of them.</p>
<blockquote>
<p>Typed languages are better when you&rsquo;re working on a team of people with
various experience levels</p>
</blockquote>
<p>Typed languages are better, period.</p>
<blockquote>
<p>Software architecture probably matters more than anything else. A shitty
implementation of a good abstraction causes no net harm to the code base.
A bad abstraction or missing layer causes everything to rot.</p>
</blockquote>
<p>Perfect. I am stealing this line.</p>
<blockquote>
<p>Clever code isn&rsquo;t usually good code. Clarity trumps all other concerns.</p>
</blockquote>
<p>Good <em>and</em> clever code is very possible, though. Agree on the second part.</p>
<blockquote>
<p>Bad code can be written in any paradigm</p>
</blockquote>
<p>Ça va sans dire</p>
<blockquote>
<p>So called &ldquo;best practices&rdquo; are contextual and not broadly applicable. Blindly
following them makes you an idiot</p>
</blockquote>
<p>Not following them also makes you an idiot.</p>
<blockquote>
<p>Designing scalable systems when you don&rsquo;t need to makes you a bad engineer.</p>
</blockquote>
<p>But how do I know in advance whether I need to be scalable or not? Not always
an easy call. Also, scalability doesn&rsquo;t necessarily imply complexity.</p>
<blockquote>
<p>In general, RDBMS &gt; NoSql</p>
</blockquote>
<p>In general, use the right tool for the right job.</p>
<blockquote>
<p>Functional programming is another tool, not a panacea.</p>
</blockquote>
<p>The jury is out on this one. In my admittedly limited experience, functional
programming tends to win over OOP. It&rsquo;s not a coincidence that most OOP
languages keep adding functional features (looking at you, C#.).</p>
<blockquote>
<p>Pencil and paper are the best programming tools and vastly under used</p>
</blockquote>
<p>Old fart me concurs.</p>
<blockquote>
<p>Trading purity in exchange for practicality is usually a good call</p>
</blockquote>
<p>Don&rsquo;t get carried away with that.</p>
<blockquote>
<p>Talking directly to the customer always reveals more about the problem, in
less time, and with higher accuracy</p>
</blockquote>
<p><em>:s/always/sometimes</em></p>
<blockquote>
<p>The word &ldquo;scalable&rdquo; has a mystical and stupefying power over the mind of the
software engineer. Its mere utterance can whip them into a depraved frenzy.
Grim actions have been justified using this word</p>
</blockquote>
<p>I plea guilty on this one.</p>
<blockquote>
<p>Despite being called &ldquo;engineers,&rdquo; most decision are pure cargo-cult with no
backing analysis, data, or numbers</p>
</blockquote>
<p>I am a software craftsman.</p>
<blockquote>
<p>People who stress over code style, linting rules, or other minutia are insane
weirdos</p>
</blockquote>
<p>I am an insane weirdo.</p>
<blockquote>
<p>Code coverage has absolutely nothing to do with code quality</p>
</blockquote>
<p>It also has nothing to do with <em>tests</em> quality.</p>
<blockquote>
<p>Monoliths are pretty good in most circumstances</p>
</blockquote>
<p><em>:s/most/some</em></p>
<blockquote>
<p>TDD purists are just the worst. Their frail little minds can&rsquo;t process the
existence of different workflows.</p>
</blockquote>
<p>Ouch. This hurts.</p>
<p>I am not sure I would have had so many well-formed opinions only six years in.
Read them all on <a href="https://chriskiehl.com/article/thoughts-after-6-years">Chris&rsquo; website</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>The unreasonable effectiveness of simple HTML</title>
      <link>https://nicolaiarocci.com/the-unreasonable-effectiveness-of-simple-html/</link>
      <pubDate>Thu, 28 Jan 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/the-unreasonable-effectiveness-of-simple-html/</guid>
      <description>We&amp;rsquo;ve seen other articles pointing the finger at unnecessarily bloated websites. Terence Eden&amp;rsquo;s On the unreasonable effectiveness of simple HTML deserves mention, I think, for two reasons. First, the delivery is incredibly effective. Second, it is effective because of the storytelling.
By enveloping the message into an original short, touching story, he achieves two goals. First, he captures the reader&amp;rsquo;s attention; second, he makes the experience memorable. Please, go and read it; I&amp;rsquo;ll wait here.</description>
      <content:encoded><![CDATA[<p>We&rsquo;ve seen other articles pointing the finger at unnecessarily bloated
websites. Terence Eden&rsquo;s <em><a href="https://shkspr.mobi/blog/2021/01/the-unreasonable-effectiveness-of-simple-html/">On the unreasonable effectiveness of simple
HTML</a></em> deserves mention, I think, for two reasons. First, the delivery is
incredibly effective. Second, it is effective because of the storytelling.</p>
<p>By enveloping the message into an original short, touching story, he achieves
two goals. First, he captures the reader&rsquo;s attention; second, he makes the
experience memorable. Please, go and read it; I&rsquo;ll wait here.</p>
<p>In the second paragraph, we&rsquo;re already knee-deep into the story:</p>
<blockquote>
<p>In the middle, a young woman sits on a hard plastic chair. She is surrounded
by canvas-bags containing her worldly possessions. She doesn’t look like she
is in a great emotional place right now. Clutched in her hands is a games
console – a PlayStation Portable. She stares at it intensely; blocking out
the world with Candy Crush. Or, at least, that’s what I thought.</p>
</blockquote>
<p>Then, in the second to last paragraph, when the story is long over, notice the
expedient of echoing elements from the story (the woman&rsquo;s chair; the small
obsolete device; both uncomfortable) to reinforce the message:</p>
<blockquote>
<p>Go sit in an uncomfortable chair, in an uncomfortable location, and stare at
an uncomfortably small screen with an uncomfortably outdated web browser. How
easy is it to use the websites you’ve created?</p>
</blockquote>
<p>For added momentum, the last paragraph reconciliates the story and the
message—worth a read. Style notes aside, of course, unless your website serves
static content, some Javascript is probably going to be unavoidable. The point
still stands, though: do not overdo it. Or, as Confucius would say, do not use
a cannon to kill a mosquito.</p>
]]></content:encoded>
    </item>
    <item>
      <title>On the short, tormented life of Phil Katz</title>
      <link>https://nicolaiarocci.com/on-the-short-tormented-life-of-phil-katz/</link>
      <pubDate>Fri, 22 Jan 2021 07:05:25 +0100</pubDate>
      <guid>https://nicolaiarocci.com/on-the-short-tormented-life-of-phil-katz/</guid>
      <description>Bless the Internet Archive and its Wayback Machine. With it, we can go back in time and read The short, tormented life of computer genius Phil Katz, an unusually detailed and accurate article published in the April 14, 2000 issue of the Milwaukee Journal Sentinel.
When he was found dead April 14, Phil Katz was slumped against a nightstand in a south side hotel, cradling an empty bottle of peppermint schnapps.</description>
      <content:encoded><![CDATA[<p>Bless the Internet Archive and its Wayback Machine. With it, we can go back in
time and read <a href="https://web.archive.org/web/20000829071343/http://www2.jsonline.com/news/state/may00/katz21052000a.asp">The short, tormented life of computer genius Phil
Katz</a>, an unusually detailed and accurate article published in the April 14,
2000 issue of the Milwaukee Journal Sentinel.</p>
<blockquote>
<p>When he was found dead April 14, Phil Katz was slumped against a nightstand
in a south side hotel, cradling an empty bottle of peppermint schnapps. The
genius who built a multimillion-dollar software company known worldwide for
its pioneering &ldquo;zip&rdquo; files had died of acute pancreatic bleeding caused by
chronic alcoholism. He was alone, estranged long ago from his family and
a virtual stranger to employees of his own company, PKWare Inc. He was 37.</p>
</blockquote>
<p>In the late 80s, when the culmination of Katz&rsquo;s work on compression algorithms,
PKZIP, emerged as the clear winner of the so-called &ldquo;compressors war,&rdquo; <a href="http://nicolaiarocci.com/a-trip-down-memory-lane-fidonet-and-usenet/">I was
running my own little BBS</a>, Lorien, which later evolved into Phoenix BBS,
a fully-fledged FidoNet node. When Lorien went first online in 1987, most if
not all downloadables were in ARC format. Three years later, in 1990, when
Phoenix emerged from Lorien&rsquo;s ashes, ZIP archives ruled the world. Fast forward
30 years. A couple of days ago, I wrote C# code that receives data streams over
a REST API and then stores them as ZIP files.</p>
<p>I would be hard-pressed to find another piece of shareware, single-handly
developed software that has been as influential, pervasive, and widespread in
the industry as PKZIP from PKWare. Of course, Linux and SQLite, although both
came later (the former in 1991, the latter in the spring of 2000.)</p>
<p>Katz&rsquo;s story is indeed a cautionary tale of genius, torment, and horrible
demise. I cannot help but wonder: would his life trajectory have been different
had he not been so successful? Probably not, given the details revealed in
the article, but who knows. For sure, the tormented story of Phil Katz leaves
me with one clear takeaway. Success does not grant happiness.</p>
]]></content:encoded>
    </item>
    <item>
      <title>The Obligation of The Programmer</title>
      <link>https://nicolaiarocci.com/obligation-programmer/</link>
      <pubDate>Tue, 18 Nov 2014 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/obligation-programmer/</guid>
      <description>Robert C.Martin, of Clean Code fame, has something to say on the role of we programmers in today’s society.
We rule the world.
We don’t quite understand this yet. More importantly, the world doesn’t quite understand it yet. Our civilization doesn’t quite realize how dependent it has become on software — on us.
He goes as far as suggesting a programmer’s code of conduct of sorts. Food for thought I guess, although I suspect we’re too much of a wild and scattered bunch for something like that to really stick.</description>
      <content:encoded><![CDATA[<p>Robert C.Martin, of <!-- raw HTML omitted -->Clean Code<!-- raw HTML omitted --> fame, has something to say on the role of we programmers in today’s society.</p>
<blockquote>
<p>We rule the world.</p>
<p>We don’t quite understand this yet. More importantly, the world doesn’t quite understand it yet. Our civilization doesn’t quite realize how dependent it has become on software — on us.</p>
</blockquote>
<p>He goes as far as suggesting a programmer’s code of conduct of sorts. Food for thought I guess, although I suspect we’re too much of a wild and scattered bunch for something like that to really stick.</p>
<p>Nonetheless, he raises a very good point about the predominance of software in our society and the risk that soon or later someone will wake up and attempt to impose some sort of regulation on the profession.</p>
<p>Read it all at the <a href="http://blog.cleancoder.com/uncle-bob/2014/11/15/WeRuleTheWorld.html">Clean Coder Blog</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Why Don’t More People Work As Programmers?</title>
      <link>https://nicolaiarocci.com/dont-people-work-programmers/</link>
      <pubDate>Thu, 06 Nov 2014 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/dont-people-work-programmers/</guid>
      <description>This originally appeared on Quora and is well worth reading.
Becoming a good programmer is incredibly difficult and it doesn’t happen quickly. We can’t expect to plant some trees and have 2000-year-old redwoods grow overnight, regardless of the demand for them.
via Why Don&amp;rsquo;t More People Work As Programmers? – Forbes.</description>
      <content:encoded><![CDATA[<p>This originally appeared on Quora and is well worth reading.</p>
<blockquote>
<p>Becoming a good programmer is incredibly difficult and it doesn’t happen quickly. We can’t expect to plant some trees and have 2000-year-old redwoods grow overnight, regardless of the demand for them.</p>
</blockquote>
<p>via <a href="http://www.forbes.com/sites/quora/2014/10/31/why-dont-more-people-work-as-programmers/">Why Don&rsquo;t More People Work As Programmers? – Forbes</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>How to be a sane programmer</title>
      <link>https://nicolaiarocci.com/how-to-be-a-sane-programmer/</link>
      <pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/how-to-be-a-sane-programmer/</guid>
      <description>But here’s the rub. Programming, like writing, painting, and music, is chiefly a creative endeavor not a technical one. Practice with any technology or language is useful as a means of learning tools and techniques, but it will not make you a substantially better programmer.
via How to be a sane programmer</description>
      <content:encoded><![CDATA[<blockquote>
<p>But here’s the rub. Programming, like writing, painting, and music, is chiefly a creative endeavor not a technical one. Practice with any technology or language is useful as a means of learning tools and techniques, but it will not make you a substantially better programmer.</p>
</blockquote>
<p>via <a href="http://www.nicholascloud.com/2014/03/how-to-be-a-sane-programmer/">How to be a sane programmer</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Why Good Programming Projects Go Bad</title>
      <link>https://nicolaiarocci.com/why-good-programming-projects-go-bad/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/why-good-programming-projects-go-bad/</guid>
      <description>Fred Brooks wrote the software development classic The Mythical Man-Month almost 40 years ago. In this interview, Brooks explains why managers still make the same mistakes.
via Why Good Programming Projects Go Bad.</description>
      <content:encoded><![CDATA[<blockquote>
<p>Fred Brooks wrote the software development classic The Mythical Man-Month almost 40 years ago. In this interview, Brooks explains why managers still make the same mistakes.</p>
</blockquote>
<p>via <!-- raw HTML omitted -->Why Good Programming Projects Go Bad<!-- raw HTML omitted -->.</p>
]]></content:encoded>
    </item>
    <item>
      <title>The Future of Programming</title>
      <link>https://nicolaiarocci.com/the-future-of-programming/</link>
      <pubDate>Wed, 31 Jul 2013 00:00:00 +0000</pubDate>
      <guid>https://nicolaiarocci.com/the-future-of-programming/</guid>
      <description>Bret Victor on Vimeo.</description>
      <content:encoded><![CDATA[<p><a href="http://vimeo.com/worrydream">Bret Victor</a> on <a href="https://vimeo.com">Vimeo</a>.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
