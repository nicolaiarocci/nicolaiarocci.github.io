---
title: Come accorciare links e URL usando le API di Bit.ly via ASP.NET
author: Nicola Iarocci
date: 2010-11-29
url: /accorciare-url-usando-bit-ly-via-asp-net/
short-url:
  - http://bit.ly/gyZp2G
robotsmeta:
  - index,follow
socialize_text:
  - 'Condividi la tua opinione con gli altri lettori oppure chiedi chiarimenti <a href="#comments">lasciando un commento</a>. Puoi anche <a href="http://nicolaiarocci.com/feed/" title="Syndicate this site using RSS">iscriverti al feed <abbr title="Really Simple Syndication">RSS</abbr></a> per tenerti aggiornato/a sugli articoli pubblicati. Ciao e grazie, Nicola.'
socialize:
  - 1,2
dsq_thread_id:
  - 2104477789
categories:
  - Guide
  - Programming
tags:
  - api
  - asp.net
  - httpwebrequest
  - url shortener
---
<img class="alignright size-full wp-image-1152" title="DotNet Logo" src="http://i2.wp.com/nicolaiarocci.com/wp-content/uploads/dotnet-logo-new.jpg?fit=221%2C210" alt="DotNet Logo" srcset="http://i2.wp.com/nicolaiarocci.com/wp-content/uploads/dotnet-logo-new.jpg?w=221 221w, http://i2.wp.com/nicolaiarocci.com/wp-content/uploads/dotnet-logo-new.jpg?resize=150%2C142 150w" sizes="(max-width: 221px) 100vw, 221px" data-recalc-dims="1" />Una delle applicazioni su cui sto lavorando in questo periodo manda decine di emails al giorno, ognuna contenente almeno un paio di links (URL). Questi link sono molto lunghi perché oltre all&#8217;indirizzo della pagina da aprire contengono una o più [query strings][1]. In generale, per tante buone ragioni, le URL lunghe non sono mai una buona idea; ancor meno lo sono se  devono comparire in un messaggio email. Gli algoritmi di [word wrapping][2] dei client di posta elettronica vanno in crisi quando sono costretti a inserire un ritorno di carrello nel bel mezzo della URL. Come biasimarli? <!--more-->

Ci sono poi certi sistemi di web mail (quello di Libero, per non far nomi) che semplicemente non sono capaci di riprodurre correttamente un link o se lo fanno non attivano il link per ragioni di sicurezza, lasciando così al destinatario della mail il compito di copiare e incollare l&#8217;intera URL nel browser. Operazione non sempre banale per l&#8217;utente medio, soprattutto quando (guarda caso!) il testo da copiare e incollare è lunghissimo.

Si potrebbe risolvere banalmente ricorrendo agli [anchor tag HTML][3] ma nel mio caso questa strada non è praticabile: i messaggi devono essere in puro testo. Non solo, questa soluzione non risolverebbe comunque il problema dei web mail client che non si fidano dei miei messaggi. Creare a priori URL brevi non è una opzione per ragioni di legacy (il sito non l&#8217;ho creato io!). Come fare allora?

## Chiedere aiuto a un servizio URL Shortener

Gli [URL shortener][4] sono servizi molto usati in ambito social networking e non solo. Data una certa URL di qualunque lunghezza ne restituiscono una equivalente molto più breve. Pioniere in questo campo è stato TinyURL ma oggigiorno il servizio più diffuso e conosciuto è senz&#8217;altro [Bit.ly][5], il quale ha l&#8217;indubbio vantaggio di offrire una [REST API][6] ricca, robusta e [ben documentata][7]. Questa libreria gratuita consente ai programmatori indipendenti (noi) l&#8217;implementazione di servizi di URL shortening nelle proprie applicazioni.

Ecco dunque **ShortenUrl**, una semplice funzione ASP.NET che restituisce una URL breve a partire da una URL di qualunque lunghezza passata come parametro. Nel caso la chiamata alla API fallisca la funzione restituirà semplicemente una stringa vuota.

<pre class="brush:vb">Public Function ShortenUrl(ByVal url As String) As String
        Const login As String = "Il_tuo_Bitly_Username"
        Const apiKey As String = "La_tua_Bitly_ApiKey"
        Dim encodedUrl As String = HttpUtility.UrlEncode(url)
        Dim requestUri As String = String.Format("http://api.bit.ly/v3/shorten?login={0}&apiKey={1}&longUrl={2}&format=txt", login, apiKey, encodedUrl)
        Dim reg As HttpWebRequest = HttpWebRequest.Create(requestUri)
        reg.Timeout = 10000
        Dim shortUrl As String = String.Empty
        Try
            shortUrl = New StreamReader(reg.GetResponse().GetResponseStream).ReadLine
        Catch ex As Exception
            'in caso di errore non facciamo nulla perché vogliamo restituire semplicemente una stringa vuota.
            'potremmo sollevare una eccezione, loggare l'errore, ecc.
        End Try
        Return shortUrl
    End Function</pre>

La gran parte del lavoro è fatto da una sola linea di codice (ok, avrei potuto suddividerla in due o tre linee per amor di chiarezza, te lo concedo). La richiesta REST al servizio è eseguita da una istanza della classe [HttpWebRequest][8]. Il [metodo Shorten][9] può restituire risultati in formato [JSON][10], [XML][11] o puro testo. Per semplicità ho scelto il formato testo. A seconda delle necessità potresti ricorrere al bellissimo formato JSON o al logorroico XML,  la documentazione ufficiale contiene esempi molto chiari anche per questi formati.

Se non disponi di un account Bit.ly dovrai [registrarti][12] (è gratis). Una volta creato l&#8217;account potrai recuperare facilmente la tua [API Key personale][13], indispensabile per poter effettuare chiamate ai metodi della libreria.

 [1]: http://en.wikipedia.org/wiki/Query_string
 [2]: http://en.wikipedia.org/wiki/Word_wrap
 [3]: http://www.w3schools.com/HTML/html_links.asp
 [4]: http://it.wikipedia.org/wiki/URL_shortening
 [5]: http://bit.ly/
 [6]: http://it.wikipedia.org/wiki/Representational_State_Transfer
 [7]: http://code.google.com/p/bitly-api/wiki/ApiDocumentation#bit.ly_API_Documentation
 [8]: http://msdn.microsoft.com/it-it/library/system.net.httpwebrequest(v=VS.90).aspx
 [9]: http://code.google.com/p/bitly-api/wiki/ApiDocumentation#/v3/shorten
 [10]: http://it.wikipedia.org/wiki/JSON
 [11]: http://it.wikipedia.org/wiki/XML
 [12]: http://bit.ly/a/sign_up
 [13]: http://bit.ly/a/your_api_key
